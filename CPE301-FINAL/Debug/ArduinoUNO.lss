
ArduinoUNO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000d02  00000d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c4  00800130  00800130  00000dc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006861  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000194f  00000000  00000000  000079b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001daa  00000000  00000000  00009308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a40  00000000  00000000  0000b0b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c70  00000000  00000000  0000baf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ddc  00000000  00000000  0000d764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00011540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
   4:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__vector_1>
   8:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_2>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_7>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_16>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_18>
  4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_19>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
  69:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
  7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
  91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
  a5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000af <port_to_mode_PGM>:
  af:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000ba <__ctors_start>:
  ba:	35 02       	muls	r19, r21
  bc:	b2 02       	muls	r27, r18

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d8 e0       	ldi	r29, 0x08	; 8
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	e2 e0       	ldi	r30, 0x02	; 2
  d2:	fd e0       	ldi	r31, 0x0D	; 13
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
  d6:	05 90       	lpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a0 33       	cpi	r26, 0x30	; 48
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	a0 e3       	ldi	r26, 0x30	; 48
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	a4 3f       	cpi	r26, 0xF4	; 244
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	cf e5       	ldi	r28, 0x5F	; 95
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
  f8:	21 97       	sbiw	r28, 0x01	; 1
  fa:	fe 01       	movw	r30, r28
  fc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__tablejump2__>
 100:	cd 35       	cpi	r28, 0x5D	; 93
 102:	d1 07       	cpc	r29, r17
 104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
 106:	0e 94 be 02 	call	0x57c	; 0x57c <main>
 10a:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_ZN14HardwareSerial9availableEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
 112:	fc 01       	movw	r30, r24
 114:	24 85       	ldd	r18, Z+12	; 0x0c
 116:	35 85       	ldd	r19, Z+13	; 0x0d
 118:	f9 01       	movw	r30, r18
 11a:	e0 5c       	subi	r30, 0xC0	; 192
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
 120:	91 81       	ldd	r25, Z+1	; 0x01
 122:	32 96       	adiw	r30, 0x02	; 2
 124:	20 81       	ld	r18, Z
 126:	31 81       	ldd	r19, Z+1	; 0x01
 128:	80 5c       	subi	r24, 0xC0	; 192
 12a:	9f 4f       	sbci	r25, 0xFF	; 255
 12c:	82 1b       	sub	r24, r18
 12e:	93 0b       	sbc	r25, r19
 130:	8f 73       	andi	r24, 0x3F	; 63
 132:	90 78       	andi	r25, 0x80	; 128
 134:	99 23       	and	r25, r25
 136:	24 f4       	brge	.+8      	; 0x140 <_ZN14HardwareSerial9availableEv+0x2e>
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	80 6c       	ori	r24, 0xC0	; 192
 13c:	9f 6f       	ori	r25, 0xFF	; 255
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	08 95       	ret

00000142 <_ZN14HardwareSerial4peekEv>:
 142:	fc 01       	movw	r30, r24
 144:	84 85       	ldd	r24, Z+12	; 0x0c
 146:	95 85       	ldd	r25, Z+13	; 0x0d
 148:	fc 01       	movw	r30, r24
 14a:	e0 5c       	subi	r30, 0xC0	; 192
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	40 81       	ld	r20, Z
 150:	51 81       	ldd	r21, Z+1	; 0x01
 152:	32 96       	adiw	r30, 0x02	; 2
 154:	20 81       	ld	r18, Z
 156:	31 81       	ldd	r19, Z+1	; 0x01
 158:	42 17       	cp	r20, r18
 15a:	53 07       	cpc	r21, r19
 15c:	41 f0       	breq	.+16     	; 0x16e <_ZN14HardwareSerial4peekEv+0x2c>
 15e:	20 81       	ld	r18, Z
 160:	31 81       	ldd	r19, Z+1	; 0x01
 162:	fc 01       	movw	r30, r24
 164:	e2 0f       	add	r30, r18
 166:	f3 1f       	adc	r31, r19
 168:	80 81       	ld	r24, Z
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	9f ef       	ldi	r25, 0xFF	; 255
 172:	08 95       	ret

00000174 <_ZN14HardwareSerial4readEv>:
 174:	fc 01       	movw	r30, r24
 176:	84 85       	ldd	r24, Z+12	; 0x0c
 178:	95 85       	ldd	r25, Z+13	; 0x0d
 17a:	fc 01       	movw	r30, r24
 17c:	e0 5c       	subi	r30, 0xC0	; 192
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	40 81       	ld	r20, Z
 182:	51 81       	ldd	r21, Z+1	; 0x01
 184:	32 96       	adiw	r30, 0x02	; 2
 186:	20 81       	ld	r18, Z
 188:	31 81       	ldd	r19, Z+1	; 0x01
 18a:	42 17       	cp	r20, r18
 18c:	53 07       	cpc	r21, r19
 18e:	81 f0       	breq	.+32     	; 0x1b0 <_ZN14HardwareSerial4readEv+0x3c>
 190:	20 81       	ld	r18, Z
 192:	31 81       	ldd	r19, Z+1	; 0x01
 194:	dc 01       	movw	r26, r24
 196:	a2 0f       	add	r26, r18
 198:	b3 1f       	adc	r27, r19
 19a:	8c 91       	ld	r24, X
 19c:	20 81       	ld	r18, Z
 19e:	31 81       	ldd	r19, Z+1	; 0x01
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	2f 73       	andi	r18, 0x3F	; 63
 1a6:	33 27       	eor	r19, r19
 1a8:	31 83       	std	Z+1, r19	; 0x01
 1aa:	20 83       	st	Z, r18
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	08 95       	ret

000001b6 <_ZN14HardwareSerial5flushEv>:
 1b6:	fc 01       	movw	r30, r24
 1b8:	81 a1       	ldd	r24, Z+33	; 0x21
 1ba:	88 23       	and	r24, r24
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <_ZN14HardwareSerial5flushEv+0x12>
 1be:	a4 89       	ldd	r26, Z+20	; 0x14
 1c0:	b5 89       	ldd	r27, Z+21	; 0x15
 1c2:	8c 91       	ld	r24, X
 1c4:	86 ff       	sbrs	r24, 6
 1c6:	fb cf       	rjmp	.-10     	; 0x1be <_ZN14HardwareSerial5flushEv+0x8>
 1c8:	11 a2       	std	Z+33, r1	; 0x21
 1ca:	08 95       	ret

000001cc <_ZN14HardwareSerial5writeEh>:
 1cc:	dc 01       	movw	r26, r24
 1ce:	1e 96       	adiw	r26, 0x0e	; 14
 1d0:	8d 91       	ld	r24, X+
 1d2:	9c 91       	ld	r25, X
 1d4:	1f 97       	sbiw	r26, 0x0f	; 15
 1d6:	fc 01       	movw	r30, r24
 1d8:	e0 5c       	subi	r30, 0xC0	; 192
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	40 81       	ld	r20, Z
 1de:	51 81       	ldd	r21, Z+1	; 0x01
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	4f 73       	andi	r20, 0x3F	; 63
 1e6:	55 27       	eor	r21, r21
 1e8:	32 96       	adiw	r30, 0x02	; 2
 1ea:	20 81       	ld	r18, Z
 1ec:	31 81       	ldd	r19, Z+1	; 0x01
 1ee:	42 17       	cp	r20, r18
 1f0:	53 07       	cpc	r21, r19
 1f2:	d9 f3       	breq	.-10     	; 0x1ea <_ZN14HardwareSerial5writeEh+0x1e>
 1f4:	fc 01       	movw	r30, r24
 1f6:	e0 5c       	subi	r30, 0xC0	; 192
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	20 81       	ld	r18, Z
 1fc:	31 81       	ldd	r19, Z+1	; 0x01
 1fe:	fc 01       	movw	r30, r24
 200:	e2 0f       	add	r30, r18
 202:	f3 1f       	adc	r31, r19
 204:	60 83       	st	Z, r22
 206:	1e 96       	adiw	r26, 0x0e	; 14
 208:	ed 91       	ld	r30, X+
 20a:	fc 91       	ld	r31, X
 20c:	1f 97       	sbiw	r26, 0x0f	; 15
 20e:	e0 5c       	subi	r30, 0xC0	; 192
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	51 83       	std	Z+1, r21	; 0x01
 214:	40 83       	st	Z, r20
 216:	56 96       	adiw	r26, 0x16	; 22
 218:	ed 91       	ld	r30, X+
 21a:	fc 91       	ld	r31, X
 21c:	57 97       	sbiw	r26, 0x17	; 23
 21e:	20 81       	ld	r18, Z
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	5f 96       	adiw	r26, 0x1f	; 31
 226:	0c 90       	ld	r0, X
 228:	5f 97       	sbiw	r26, 0x1f	; 31
 22a:	02 c0       	rjmp	.+4      	; 0x230 <_ZN14HardwareSerial5writeEh+0x64>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <_ZN14HardwareSerial5writeEh+0x60>
 234:	82 2b       	or	r24, r18
 236:	80 83       	st	Z, r24
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	91 96       	adiw	r26, 0x21	; 33
 23c:	8c 93       	st	X, r24
 23e:	91 97       	sbiw	r26, 0x21	; 33
 240:	54 96       	adiw	r26, 0x14	; 20
 242:	ed 91       	ld	r30, X+
 244:	fc 91       	ld	r31, X
 246:	55 97       	sbiw	r26, 0x15	; 21
 248:	80 81       	ld	r24, Z
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	80 83       	st	Z, r24
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	08 95       	ret

00000254 <_Z11serialEventv>:
 254:	08 95       	ret

00000256 <__vector_18>:
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
 272:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 276:	82 fd       	sbrc	r24, 2
 278:	1c c0       	rjmp	.+56     	; 0x2b2 <__vector_18+0x5c>
 27a:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 27e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <rx_buffer+0x40>
 282:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <rx_buffer+0x41>
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	8f 73       	andi	r24, 0x3F	; 63
 28a:	99 27       	eor	r25, r25
 28c:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <rx_buffer+0x42>
 290:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <rx_buffer+0x43>
 294:	82 17       	cp	r24, r18
 296:	93 07       	cpc	r25, r19
 298:	71 f0       	breq	.+28     	; 0x2b6 <__vector_18+0x60>
 29a:	a6 ed       	ldi	r26, 0xD6	; 214
 29c:	b1 e0       	ldi	r27, 0x01	; 1
 29e:	ed 91       	ld	r30, X+
 2a0:	fc 91       	ld	r31, X
 2a2:	11 97       	sbiw	r26, 0x01	; 1
 2a4:	ea 56       	subi	r30, 0x6A	; 106
 2a6:	fe 4f       	sbci	r31, 0xFE	; 254
 2a8:	40 83       	st	Z, r20
 2aa:	11 96       	adiw	r26, 0x01	; 1
 2ac:	9c 93       	st	X, r25
 2ae:	8e 93       	st	-X, r24
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__vector_18+0x60>
 2b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <_Z14serialEventRunv>:
 2d2:	80 e3       	ldi	r24, 0x30	; 48
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 89 00 	call	0x112	; 0x112 <_ZN14HardwareSerial9availableEv>
 2da:	89 2b       	or	r24, r25
 2dc:	11 f0       	breq	.+4      	; 0x2e2 <_Z14serialEventRunv+0x10>
 2de:	0e 94 2a 01 	call	0x254	; 0x254 <_Z11serialEventv>
 2e2:	08 95       	ret

000002e4 <__vector_19>:
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
 2fe:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <tx_buffer+0x40>
 302:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <tx_buffer+0x41>
 306:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tx_buffer+0x42>
 30a:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <tx_buffer+0x43>
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	31 f4       	brne	.+12     	; 0x320 <__vector_19+0x3c>
 314:	e1 ec       	ldi	r30, 0xC1	; 193
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	8f 7d       	andi	r24, 0xDF	; 223
 31c:	80 83       	st	Z, r24
 31e:	10 c0       	rjmp	.+32     	; 0x340 <__vector_19+0x5c>
 320:	e4 e9       	ldi	r30, 0x94	; 148
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	a0 81       	ld	r26, Z
 326:	b1 81       	ldd	r27, Z+1	; 0x01
 328:	ae 5a       	subi	r26, 0xAE	; 174
 32a:	be 4f       	sbci	r27, 0xFE	; 254
 32c:	2c 91       	ld	r18, X
 32e:	80 81       	ld	r24, Z
 330:	91 81       	ldd	r25, Z+1	; 0x01
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	8f 73       	andi	r24, 0x3F	; 63
 336:	99 27       	eor	r25, r25
 338:	91 83       	std	Z+1, r25	; 0x01
 33a:	80 83       	st	Z, r24
 33c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <_ZN14HardwareSerial5beginEm>:
 35a:	cf 92       	push	r12
 35c:	df 92       	push	r13
 35e:	ef 92       	push	r14
 360:	ff 92       	push	r15
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	ec 01       	movw	r28, r24
 36c:	6a 01       	movw	r12, r20
 36e:	7b 01       	movw	r14, r22
 370:	41 15       	cp	r20, r1
 372:	51 4e       	sbci	r21, 0xE1	; 225
 374:	61 05       	cpc	r22, r1
 376:	71 05       	cpc	r23, r1
 378:	09 f1       	breq	.+66     	; 0x3bc <_ZN14HardwareSerial5beginEm+0x62>
 37a:	ec 89       	ldd	r30, Y+20	; 0x14
 37c:	fd 89       	ldd	r31, Y+21	; 0x15
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	08 a0       	ldd	r0, Y+32	; 0x20
 384:	02 c0       	rjmp	.+4      	; 0x38a <_ZN14HardwareSerial5beginEm+0x30>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <_ZN14HardwareSerial5beginEm+0x2c>
 38e:	80 83       	st	Z, r24
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	79 e0       	ldi	r23, 0x09	; 9
 394:	8d e3       	ldi	r24, 0x3D	; 61
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	a7 01       	movw	r20, r14
 39a:	96 01       	movw	r18, r12
 39c:	0e 94 57 06 	call	0xcae	; 0xcae <__udivmodsi4>
 3a0:	89 01       	movw	r16, r18
 3a2:	9a 01       	movw	r18, r20
 3a4:	01 50       	subi	r16, 0x01	; 1
 3a6:	11 09       	sbc	r17, r1
 3a8:	21 09       	sbc	r18, r1
 3aa:	31 09       	sbc	r19, r1
 3ac:	36 95       	lsr	r19
 3ae:	27 95       	ror	r18
 3b0:	17 95       	ror	r17
 3b2:	07 95       	ror	r16
 3b4:	98 01       	movw	r18, r16
 3b6:	01 15       	cp	r16, r1
 3b8:	10 41       	sbci	r17, 0x10	; 16
 3ba:	a8 f0       	brcs	.+42     	; 0x3e6 <_ZN14HardwareSerial5beginEm+0x8c>
 3bc:	ec 89       	ldd	r30, Y+20	; 0x14
 3be:	fd 89       	ldd	r31, Y+21	; 0x15
 3c0:	10 82       	st	Z, r1
 3c2:	60 e8       	ldi	r22, 0x80	; 128
 3c4:	74 e8       	ldi	r23, 0x84	; 132
 3c6:	8e e1       	ldi	r24, 0x1E	; 30
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	a7 01       	movw	r20, r14
 3cc:	96 01       	movw	r18, r12
 3ce:	0e 94 57 06 	call	0xcae	; 0xcae <__udivmodsi4>
 3d2:	da 01       	movw	r26, r20
 3d4:	c9 01       	movw	r24, r18
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	a1 09       	sbc	r26, r1
 3da:	b1 09       	sbc	r27, r1
 3dc:	b6 95       	lsr	r27
 3de:	a7 95       	ror	r26
 3e0:	97 95       	ror	r25
 3e2:	87 95       	ror	r24
 3e4:	9c 01       	movw	r18, r24
 3e6:	e8 89       	ldd	r30, Y+16	; 0x10
 3e8:	f9 89       	ldd	r31, Y+17	; 0x11
 3ea:	30 83       	st	Z, r19
 3ec:	ea 89       	ldd	r30, Y+18	; 0x12
 3ee:	fb 89       	ldd	r31, Y+19	; 0x13
 3f0:	20 83       	st	Z, r18
 3f2:	19 a2       	std	Y+33, r1	; 0x21
 3f4:	ee 89       	ldd	r30, Y+22	; 0x16
 3f6:	ff 89       	ldd	r31, Y+23	; 0x17
 3f8:	40 81       	ld	r20, Z
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	9c 01       	movw	r18, r24
 400:	0c 8c       	ldd	r0, Y+28	; 0x1c
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	24 2b       	or	r18, r20
 40e:	20 83       	st	Z, r18
 410:	ee 89       	ldd	r30, Y+22	; 0x16
 412:	ff 89       	ldd	r31, Y+23	; 0x17
 414:	40 81       	ld	r20, Z
 416:	9c 01       	movw	r18, r24
 418:	0d 8c       	ldd	r0, Y+29	; 0x1d
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	22 0f       	add	r18, r18
 41e:	33 1f       	adc	r19, r19
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	24 2b       	or	r18, r20
 426:	20 83       	st	Z, r18
 428:	ee 89       	ldd	r30, Y+22	; 0x16
 42a:	ff 89       	ldd	r31, Y+23	; 0x17
 42c:	40 81       	ld	r20, Z
 42e:	9c 01       	movw	r18, r24
 430:	0e 8c       	ldd	r0, Y+30	; 0x1e
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	22 0f       	add	r18, r18
 436:	33 1f       	adc	r19, r19
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	24 2b       	or	r18, r20
 43e:	20 83       	st	Z, r18
 440:	ee 89       	ldd	r30, Y+22	; 0x16
 442:	ff 89       	ldd	r31, Y+23	; 0x17
 444:	20 81       	ld	r18, Z
 446:	0f 8c       	ldd	r0, Y+31	; 0x1f
 448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 452:	80 95       	com	r24
 454:	82 23       	and	r24, r18
 456:	80 83       	st	Z, r24
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	08 95       	ret

0000046a <_GLOBAL__sub_I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 46a:	e0 e3       	ldi	r30, 0x30	; 48
 46c:	f1 e0       	ldi	r31, 0x01	; 1
 46e:	13 82       	std	Z+3, r1	; 0x03
 470:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 472:	88 ee       	ldi	r24, 0xE8	; 232
 474:	93 e0       	ldi	r25, 0x03	; 3
 476:	a0 e0       	ldi	r26, 0x00	; 0
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	84 83       	std	Z+4, r24	; 0x04
 47c:	95 83       	std	Z+5, r25	; 0x05
 47e:	a6 83       	std	Z+6, r26	; 0x06
 480:	b7 83       	std	Z+7, r27	; 0x07

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	91 83       	std	Z+1, r25	; 0x01
 488:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
 48a:	86 e9       	ldi	r24, 0x96	; 150
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	95 87       	std	Z+13, r25	; 0x0d
 490:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
 492:	82 e5       	ldi	r24, 0x52	; 82
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	97 87       	std	Z+15, r25	; 0x0f
 498:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
 49a:	85 ec       	ldi	r24, 0xC5	; 197
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	91 8b       	std	Z+17, r25	; 0x11
 4a0:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
 4a2:	84 ec       	ldi	r24, 0xC4	; 196
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	93 8b       	std	Z+19, r25	; 0x13
 4a8:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
 4aa:	80 ec       	ldi	r24, 0xC0	; 192
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	95 8b       	std	Z+21, r25	; 0x15
 4b0:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
 4b2:	81 ec       	ldi	r24, 0xC1	; 193
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	97 8b       	std	Z+23, r25	; 0x17
 4b8:	86 8b       	std	Z+22, r24	; 0x16
  _ucsrc = ucsrc;
 4ba:	82 ec       	ldi	r24, 0xC2	; 194
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	91 8f       	std	Z+25, r25	; 0x19
 4c0:	80 8f       	std	Z+24, r24	; 0x18
  _udr = udr;
 4c2:	86 ec       	ldi	r24, 0xC6	; 198
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	93 8f       	std	Z+27, r25	; 0x1b
 4c8:	82 8f       	std	Z+26, r24	; 0x1a
  _rxen = rxen;
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	84 8f       	std	Z+28, r24	; 0x1c
  _txen = txen;
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	85 8f       	std	Z+29, r24	; 0x1d
  _rxcie = rxcie;
 4d2:	87 e0       	ldi	r24, 0x07	; 7
 4d4:	86 8f       	std	Z+30, r24	; 0x1e
  _udrie = udrie;
 4d6:	85 e0       	ldi	r24, 0x05	; 5
 4d8:	87 8f       	std	Z+31, r24	; 0x1f
  _u2x = u2x;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	80 a3       	std	Z+32, r24	; 0x20
 4de:	08 95       	ret

000004e0 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}
 4e0:	8f 92       	push	r8
 4e2:	9f 92       	push	r9
 4e4:	af 92       	push	r10
 4e6:	bf 92       	push	r11
 4e8:	cf 92       	push	r12
 4ea:	df 92       	push	r13
 4ec:	ef 92       	push	r14
 4ee:	ff 92       	push	r15
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	5c 01       	movw	r10, r24
 4fa:	7b 01       	movw	r14, r22
 4fc:	4c 01       	movw	r8, r24
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	88 0e       	add	r8, r24
 502:	91 1c       	adc	r9, r1
 504:	65 01       	movw	r12, r10
 506:	e5 e0       	ldi	r30, 0x05	; 5
 508:	ce 0e       	add	r12, r30
 50a:	d1 1c       	adc	r13, r1
 50c:	00 e0       	ldi	r16, 0x00	; 0
 50e:	10 e0       	ldi	r17, 0x00	; 0
 510:	f4 01       	movw	r30, r8
 512:	61 91       	ld	r22, Z+
 514:	4f 01       	movw	r8, r30
 516:	4a e0       	ldi	r20, 0x0A	; 10
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	c7 01       	movw	r24, r14
 51c:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print5printEhi>
 520:	ec 01       	movw	r28, r24
 522:	6e e2       	ldi	r22, 0x2E	; 46
 524:	c7 01       	movw	r24, r14
 526:	0e 94 10 03 	call	0x620	; 0x620 <_ZN5Print5printEc>
 52a:	8c 0f       	add	r24, r28
 52c:	9d 1f       	adc	r25, r29
 52e:	08 0f       	add	r16, r24
 530:	19 1f       	adc	r17, r25
 532:	8c 14       	cp	r8, r12
 534:	9d 04       	cpc	r9, r13
 536:	61 f7       	brne	.-40     	; 0x510 <_ZNK9IPAddress7printToER5Print+0x30>
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	f5 01       	movw	r30, r10
 53e:	65 81       	ldd	r22, Z+5	; 0x05
 540:	c7 01       	movw	r24, r14
 542:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print5printEhi>
 546:	80 0f       	add	r24, r16
 548:	91 1f       	adc	r25, r17
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	bf 90       	pop	r11
 55c:	af 90       	pop	r10
 55e:	9f 90       	pop	r9
 560:	8f 90       	pop	r8
 562:	08 95       	ret

00000564 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 564:	ea ed       	ldi	r30, 0xDA	; 218
 566:	f1 e0       	ldi	r31, 0x01	; 1
 568:	85 e1       	ldi	r24, 0x15	; 21
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	91 83       	std	Z+1, r25	; 0x01
 56e:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
 570:	12 82       	std	Z+2, r1	; 0x02
    _address[1] = second_octet;
 572:	13 82       	std	Z+3, r1	; 0x03
    _address[2] = third_octet;
 574:	14 82       	std	Z+4, r1	; 0x04
    _address[3] = fourth_octet;
 576:	15 82       	std	Z+5, r1	; 0x05
 578:	08 95       	ret

0000057a <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 57a:	08 95       	ret

0000057c <main>:

int main(void)
{
	init();
 57c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <init>

	initVariant();
 580:	0e 94 bd 02 	call	0x57a	; 0x57a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 584:	0e 94 29 06 	call	0xc52	; 0xc52 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 588:	c9 e6       	ldi	r28, 0x69	; 105
 58a:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 58c:	0e 94 3c 06 	call	0xc78	; 0xc78 <loop>
		if (serialEventRun) serialEventRun();
 590:	20 97       	sbiw	r28, 0x00	; 0
 592:	e1 f3       	breq	.-8      	; 0x58c <main+0x10>
 594:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z14serialEventRunv>
 598:	f9 cf       	rjmp	.-14     	; 0x58c <main+0x10>

0000059a <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 59a:	cf 92       	push	r12
 59c:	df 92       	push	r13
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	41 15       	cp	r20, r1
 5ac:	51 05       	cpc	r21, r1
 5ae:	b1 f0       	breq	.+44     	; 0x5dc <_ZN5Print5writeEPKhj+0x42>
 5b0:	8c 01       	movw	r16, r24
 5b2:	e6 2e       	mov	r14, r22
 5b4:	f7 2e       	mov	r15, r23
 5b6:	ea 01       	movw	r28, r20
 5b8:	c1 2c       	mov	r12, r1
 5ba:	d1 2c       	mov	r13, r1
 5bc:	d7 01       	movw	r26, r14
 5be:	6d 91       	ld	r22, X+
 5c0:	7d 01       	movw	r14, r26
 5c2:	d8 01       	movw	r26, r16
 5c4:	ed 91       	ld	r30, X+
 5c6:	fc 91       	ld	r31, X
 5c8:	01 90       	ld	r0, Z+
 5ca:	f0 81       	ld	r31, Z
 5cc:	e0 2d       	mov	r30, r0
 5ce:	c8 01       	movw	r24, r16
 5d0:	09 95       	icall
 5d2:	c8 0e       	add	r12, r24
 5d4:	d9 1e       	adc	r13, r25
 5d6:	21 97       	sbiw	r28, 0x01	; 1
 5d8:	89 f7       	brne	.-30     	; 0x5bc <_ZN5Print5writeEPKhj+0x22>
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <_ZN5Print5writeEPKhj+0x46>
 5dc:	c1 2c       	mov	r12, r1
 5de:	d1 2c       	mov	r13, r1
 5e0:	c6 01       	movw	r24, r12
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	ef 90       	pop	r14
 5ee:	df 90       	pop	r13
 5f0:	cf 90       	pop	r12
 5f2:	08 95       	ret

000005f4 <_ZN5Print5printEPKc>:
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	81 f0       	breq	.+32     	; 0x61a <_ZN5Print5printEPKc+0x26>
 5fa:	fb 01       	movw	r30, r22
 5fc:	01 90       	ld	r0, Z+
 5fe:	00 20       	and	r0, r0
 600:	e9 f7       	brne	.-6      	; 0x5fc <_ZN5Print5printEPKc+0x8>
 602:	31 97       	sbiw	r30, 0x01	; 1
 604:	af 01       	movw	r20, r30
 606:	46 1b       	sub	r20, r22
 608:	57 0b       	sbc	r21, r23
 60a:	dc 01       	movw	r26, r24
 60c:	ed 91       	ld	r30, X+
 60e:	fc 91       	ld	r31, X
 610:	02 80       	ldd	r0, Z+2	; 0x02
 612:	f3 81       	ldd	r31, Z+3	; 0x03
 614:	e0 2d       	mov	r30, r0
 616:	09 95       	icall
 618:	08 95       	ret
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	08 95       	ret

00000620 <_ZN5Print5printEc>:
 620:	dc 01       	movw	r26, r24
 622:	ed 91       	ld	r30, X+
 624:	fc 91       	ld	r31, X
 626:	01 90       	ld	r0, Z+
 628:	f0 81       	ld	r31, Z
 62a:	e0 2d       	mov	r30, r0
 62c:	09 95       	icall
 62e:	08 95       	ret

00000630 <_ZN5Print7printlnEv>:
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	ec 01       	movw	r28, r24
 63a:	6d e0       	ldi	r22, 0x0D	; 13
 63c:	0e 94 10 03 	call	0x620	; 0x620 <_ZN5Print5printEc>
 640:	8c 01       	movw	r16, r24
 642:	6a e0       	ldi	r22, 0x0A	; 10
 644:	ce 01       	movw	r24, r28
 646:	0e 94 10 03 	call	0x620	; 0x620 <_ZN5Print5printEc>
 64a:	80 0f       	add	r24, r16
 64c:	91 1f       	adc	r25, r17
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	08 95       	ret

00000658 <_ZN5Print7printlnEPKc>:
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	ec 01       	movw	r28, r24
 662:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN5Print5printEPKc>
 666:	8c 01       	movw	r16, r24
 668:	ce 01       	movw	r24, r28
 66a:	0e 94 18 03 	call	0x630	; 0x630 <_ZN5Print7printlnEv>
 66e:	80 0f       	add	r24, r16
 670:	91 1f       	adc	r25, r17
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	08 95       	ret

0000067c <_ZN5Print11printNumberEmh>:
 67c:	4f 92       	push	r4
 67e:	5f 92       	push	r5
 680:	6f 92       	push	r6
 682:	7f 92       	push	r7
 684:	9f 92       	push	r9
 686:	af 92       	push	r10
 688:	bf 92       	push	r11
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
 69e:	a1 97       	sbiw	r28, 0x21	; 33
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	f8 94       	cli
 6a4:	de bf       	out	0x3e, r29	; 62
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	cd bf       	out	0x3d, r28	; 61
 6aa:	5c 01       	movw	r10, r24
 6ac:	6a 01       	movw	r12, r20
 6ae:	7b 01       	movw	r14, r22
 6b0:	92 2e       	mov	r9, r18
 6b2:	19 a2       	std	Y+33, r1	; 0x21
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	82 17       	cp	r24, r18
 6b8:	20 f0       	brcs	.+8      	; 0x6c2 <_ZN5Print11printNumberEmh+0x46>
 6ba:	0f 2e       	mov	r0, r31
 6bc:	fa e0       	ldi	r31, 0x0A	; 10
 6be:	9f 2e       	mov	r9, r31
 6c0:	f0 2d       	mov	r31, r0
 6c2:	8e 01       	movw	r16, r28
 6c4:	0f 5d       	subi	r16, 0xDF	; 223
 6c6:	1f 4f       	sbci	r17, 0xFF	; 255
 6c8:	49 2c       	mov	r4, r9
 6ca:	51 2c       	mov	r5, r1
 6cc:	61 2c       	mov	r6, r1
 6ce:	71 2c       	mov	r7, r1
 6d0:	c7 01       	movw	r24, r14
 6d2:	b6 01       	movw	r22, r12
 6d4:	a3 01       	movw	r20, r6
 6d6:	92 01       	movw	r18, r4
 6d8:	0e 94 57 06 	call	0xcae	; 0xcae <__udivmodsi4>
 6dc:	8c 2d       	mov	r24, r12
 6de:	92 9e       	mul	r9, r18
 6e0:	80 19       	sub	r24, r0
 6e2:	11 24       	eor	r1, r1
 6e4:	01 50       	subi	r16, 0x01	; 1
 6e6:	11 09       	sbc	r17, r1
 6e8:	8a 30       	cpi	r24, 0x0A	; 10
 6ea:	10 f4       	brcc	.+4      	; 0x6f0 <_ZN5Print11printNumberEmh+0x74>
 6ec:	80 5d       	subi	r24, 0xD0	; 208
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <_ZN5Print11printNumberEmh+0x76>
 6f0:	89 5c       	subi	r24, 0xC9	; 201
 6f2:	d8 01       	movw	r26, r16
 6f4:	8c 93       	st	X, r24
 6f6:	c2 2e       	mov	r12, r18
 6f8:	d3 2e       	mov	r13, r19
 6fa:	e4 2e       	mov	r14, r20
 6fc:	f5 2e       	mov	r15, r21
 6fe:	c1 14       	cp	r12, r1
 700:	d1 04       	cpc	r13, r1
 702:	e1 04       	cpc	r14, r1
 704:	f1 04       	cpc	r15, r1
 706:	21 f7       	brne	.-56     	; 0x6d0 <_ZN5Print11printNumberEmh+0x54>
 708:	01 15       	cp	r16, r1
 70a:	11 05       	cpc	r17, r1
 70c:	91 f0       	breq	.+36     	; 0x732 <_ZN5Print11printNumberEmh+0xb6>
 70e:	f8 01       	movw	r30, r16
 710:	01 90       	ld	r0, Z+
 712:	00 20       	and	r0, r0
 714:	e9 f7       	brne	.-6      	; 0x710 <_ZN5Print11printNumberEmh+0x94>
 716:	31 97       	sbiw	r30, 0x01	; 1
 718:	af 01       	movw	r20, r30
 71a:	40 1b       	sub	r20, r16
 71c:	51 0b       	sbc	r21, r17
 71e:	d5 01       	movw	r26, r10
 720:	ed 91       	ld	r30, X+
 722:	fc 91       	ld	r31, X
 724:	02 80       	ldd	r0, Z+2	; 0x02
 726:	f3 81       	ldd	r31, Z+3	; 0x03
 728:	e0 2d       	mov	r30, r0
 72a:	b8 01       	movw	r22, r16
 72c:	c5 01       	movw	r24, r10
 72e:	09 95       	icall
 730:	02 c0       	rjmp	.+4      	; 0x736 <_ZN5Print11printNumberEmh+0xba>
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	a1 96       	adiw	r28, 0x21	; 33
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	0f be       	out	0x3f, r0	; 63
 740:	cd bf       	out	0x3d, r28	; 61
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	df 90       	pop	r13
 750:	cf 90       	pop	r12
 752:	bf 90       	pop	r11
 754:	af 90       	pop	r10
 756:	9f 90       	pop	r9
 758:	7f 90       	pop	r7
 75a:	6f 90       	pop	r6
 75c:	5f 90       	pop	r5
 75e:	4f 90       	pop	r4
 760:	08 95       	ret

00000762 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 762:	21 15       	cp	r18, r1
 764:	31 05       	cpc	r19, r1
 766:	49 f4       	brne	.+18     	; 0x77a <_ZN5Print5printEmi+0x18>
 768:	dc 01       	movw	r26, r24
 76a:	ed 91       	ld	r30, X+
 76c:	fc 91       	ld	r31, X
 76e:	01 90       	ld	r0, Z+
 770:	f0 81       	ld	r31, Z
 772:	e0 2d       	mov	r30, r0
 774:	64 2f       	mov	r22, r20
 776:	09 95       	icall
 778:	08 95       	ret
  else return printNumber(n, base);
 77a:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN5Print11printNumberEmh>
}
 77e:	08 95       	ret

00000780 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
 780:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
 782:	46 2f       	mov	r20, r22
 784:	50 e0       	ldi	r21, 0x00	; 0
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN5Print5printEmi>
}
 78e:	08 95       	ret

00000790 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
 790:	81 30       	cpi	r24, 0x01	; 1
 792:	39 f0       	breq	.+14     	; 0x7a2 <_Z12disableTimerh+0x12>
 794:	18 f0       	brcs	.+6      	; 0x79c <_Z12disableTimerh+0xc>
 796:	82 30       	cpi	r24, 0x02	; 2
 798:	51 f0       	breq	.+20     	; 0x7ae <_Z12disableTimerh+0x1e>
 79a:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
 79c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
 7a0:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 7a2:	ef e6       	ldi	r30, 0x6F	; 111
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	8d 7f       	andi	r24, 0xFD	; 253
 7aa:	80 83       	st	Z, r24
      break;
 7ac:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 7ae:	e0 e7       	ldi	r30, 0x70	; 112
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	8d 7f       	andi	r24, 0xFD	; 253
 7b6:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 7be:	e1 eb       	ldi	r30, 0xB1	; 177
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	88 7f       	andi	r24, 0xF8	; 248
 7c6:	84 60       	ori	r24, 0x04	; 4
 7c8:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
 7ca:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 7ce:	08 95       	ret

000007d0 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
 7d0:	cf 93       	push	r28
 7d2:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
 7d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7d8:	8c 13       	cpse	r24, r28
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 7dc:	e8 e6       	ldi	r30, 0x68	; 104
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	e4 91       	lpm	r30, Z
 7e2:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
 7e4:	9f ef       	ldi	r25, 0xFF	; 255
 7e6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <_Z6noToneh+0x1e>
 7ec:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
 7ee:	0e 94 c8 03 	call	0x790	; 0x790 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	8c 2f       	mov	r24, r28
 7f6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <digitalWrite>
}
 7fa:	cf 91       	pop	r28
 7fc:	08 95       	ret

000007fe <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	2f 93       	push	r18
 80a:	3f 93       	push	r19
 80c:	4f 93       	push	r20
 80e:	5f 93       	push	r21
 810:	6f 93       	push	r22
 812:	7f 93       	push	r23
 814:	8f 93       	push	r24
 816:	9f 93       	push	r25
 818:	af 93       	push	r26
 81a:	bf 93       	push	r27
 81c:	ef 93       	push	r30
 81e:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
 820:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <timer2_toggle_count>
 824:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <timer2_toggle_count+0x1>
 828:	a0 91 e5 01 	lds	r26, 0x01E5	; 0x8001e5 <timer2_toggle_count+0x2>
 82c:	b0 91 e6 01 	lds	r27, 0x01E6	; 0x8001e6 <timer2_toggle_count+0x3>
 830:	89 2b       	or	r24, r25
 832:	8a 2b       	or	r24, r26
 834:	8b 2b       	or	r24, r27
 836:	51 f1       	breq	.+84     	; 0x88c <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 838:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer2_pin_mask>
 83c:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <timer2_pin_port>
 840:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <timer2_pin_port+0x1>
 844:	90 81       	ld	r25, Z
 846:	89 27       	eor	r24, r25
 848:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
 84a:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <timer2_toggle_count>
 84e:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <timer2_toggle_count+0x1>
 852:	a0 91 e5 01 	lds	r26, 0x01E5	; 0x8001e5 <timer2_toggle_count+0x2>
 856:	b0 91 e6 01 	lds	r27, 0x01E6	; 0x8001e6 <timer2_toggle_count+0x3>
 85a:	18 16       	cp	r1, r24
 85c:	19 06       	cpc	r1, r25
 85e:	1a 06       	cpc	r1, r26
 860:	1b 06       	cpc	r1, r27
 862:	c4 f4       	brge	.+48     	; 0x894 <__vector_7+0x96>
      timer2_toggle_count--;
 864:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <timer2_toggle_count>
 868:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <timer2_toggle_count+0x1>
 86c:	a0 91 e5 01 	lds	r26, 0x01E5	; 0x8001e5 <timer2_toggle_count+0x2>
 870:	b0 91 e6 01 	lds	r27, 0x01E6	; 0x8001e6 <timer2_toggle_count+0x3>
 874:	01 97       	sbiw	r24, 0x01	; 1
 876:	a1 09       	sbc	r26, r1
 878:	b1 09       	sbc	r27, r1
 87a:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <timer2_toggle_count>
 87e:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <timer2_toggle_count+0x1>
 882:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <timer2_toggle_count+0x2>
 886:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <timer2_toggle_count+0x3>
 88a:	04 c0       	rjmp	.+8      	; 0x894 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
 88c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 890:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
 894:	ff 91       	pop	r31
 896:	ef 91       	pop	r30
 898:	bf 91       	pop	r27
 89a:	af 91       	pop	r26
 89c:	9f 91       	pop	r25
 89e:	8f 91       	pop	r24
 8a0:	7f 91       	pop	r23
 8a2:	6f 91       	pop	r22
 8a4:	5f 91       	pop	r21
 8a6:	4f 91       	pop	r20
 8a8:	3f 91       	pop	r19
 8aa:	2f 91       	pop	r18
 8ac:	0f 90       	pop	r0
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	0f 90       	pop	r0
 8b2:	1f 90       	pop	r1
 8b4:	18 95       	reti

000008b6 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
 8b6:	1f 92       	push	r1
 8b8:	0f 92       	push	r0
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	0f 92       	push	r0
 8be:	11 24       	eor	r1, r1
 8c0:	2f 93       	push	r18
 8c2:	3f 93       	push	r19
 8c4:	4f 93       	push	r20
 8c6:	5f 93       	push	r21
 8c8:	6f 93       	push	r22
 8ca:	7f 93       	push	r23
 8cc:	8f 93       	push	r24
 8ce:	9f 93       	push	r25
 8d0:	af 93       	push	r26
 8d2:	bf 93       	push	r27
 8d4:	ef 93       	push	r30
 8d6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
 8d8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <intFunc>
 8dc:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <intFunc+0x1>
 8e0:	89 2b       	or	r24, r25
 8e2:	29 f0       	breq	.+10     	; 0x8ee <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
 8e4:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <intFunc>
 8e8:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <intFunc+0x1>
 8ec:	09 95       	icall
}
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	9f 91       	pop	r25
 8f8:	8f 91       	pop	r24
 8fa:	7f 91       	pop	r23
 8fc:	6f 91       	pop	r22
 8fe:	5f 91       	pop	r21
 900:	4f 91       	pop	r20
 902:	3f 91       	pop	r19
 904:	2f 91       	pop	r18
 906:	0f 90       	pop	r0
 908:	0f be       	out	0x3f, r0	; 63
 90a:	0f 90       	pop	r0
 90c:	1f 90       	pop	r1
 90e:	18 95       	reti

00000910 <__vector_2>:

ISR(INT1_vect) {
 910:	1f 92       	push	r1
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	11 24       	eor	r1, r1
 91a:	2f 93       	push	r18
 91c:	3f 93       	push	r19
 91e:	4f 93       	push	r20
 920:	5f 93       	push	r21
 922:	6f 93       	push	r22
 924:	7f 93       	push	r23
 926:	8f 93       	push	r24
 928:	9f 93       	push	r25
 92a:	af 93       	push	r26
 92c:	bf 93       	push	r27
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
 932:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <intFunc+0x2>
 936:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <intFunc+0x3>
 93a:	89 2b       	or	r24, r25
 93c:	29 f0       	breq	.+10     	; 0x948 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
 93e:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <intFunc+0x2>
 942:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <intFunc+0x3>
 946:	09 95       	icall
}
 948:	ff 91       	pop	r31
 94a:	ef 91       	pop	r30
 94c:	bf 91       	pop	r27
 94e:	af 91       	pop	r26
 950:	9f 91       	pop	r25
 952:	8f 91       	pop	r24
 954:	7f 91       	pop	r23
 956:	6f 91       	pop	r22
 958:	5f 91       	pop	r21
 95a:	4f 91       	pop	r20
 95c:	3f 91       	pop	r19
 95e:	2f 91       	pop	r18
 960:	0f 90       	pop	r0
 962:	0f be       	out	0x3f, r0	; 63
 964:	0f 90       	pop	r0
 966:	1f 90       	pop	r1
 968:	18 95       	reti

0000096a <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 96a:	1f 92       	push	r1
 96c:	0f 92       	push	r0
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	0f 92       	push	r0
 972:	11 24       	eor	r1, r1
 974:	2f 93       	push	r18
 976:	3f 93       	push	r19
 978:	8f 93       	push	r24
 97a:	9f 93       	push	r25
 97c:	af 93       	push	r26
 97e:	bf 93       	push	r27
 980:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <timer0_millis>
 984:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <timer0_millis+0x1>
 988:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <timer0_millis+0x2>
 98c:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <timer0_millis+0x3>
 990:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <timer0_fract>
 994:	23 e0       	ldi	r18, 0x03	; 3
 996:	23 0f       	add	r18, r19
 998:	2d 37       	cpi	r18, 0x7D	; 125
 99a:	20 f4       	brcc	.+8      	; 0x9a4 <__vector_16+0x3a>
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	a1 1d       	adc	r26, r1
 9a0:	b1 1d       	adc	r27, r1
 9a2:	05 c0       	rjmp	.+10     	; 0x9ae <__vector_16+0x44>
 9a4:	26 e8       	ldi	r18, 0x86	; 134
 9a6:	23 0f       	add	r18, r19
 9a8:	02 96       	adiw	r24, 0x02	; 2
 9aa:	a1 1d       	adc	r26, r1
 9ac:	b1 1d       	adc	r27, r1
 9ae:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <timer0_fract>
 9b2:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <timer0_millis>
 9b6:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <timer0_millis+0x1>
 9ba:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <timer0_millis+0x2>
 9be:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <timer0_millis+0x3>
 9c2:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer0_overflow_count>
 9c6:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer0_overflow_count+0x1>
 9ca:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <timer0_overflow_count+0x2>
 9ce:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <timer0_overflow_count+0x3>
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	a1 1d       	adc	r26, r1
 9d6:	b1 1d       	adc	r27, r1
 9d8:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <timer0_overflow_count>
 9dc:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <timer0_overflow_count+0x1>
 9e0:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <timer0_overflow_count+0x2>
 9e4:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <timer0_overflow_count+0x3>
 9e8:	bf 91       	pop	r27
 9ea:	af 91       	pop	r26
 9ec:	9f 91       	pop	r25
 9ee:	8f 91       	pop	r24
 9f0:	3f 91       	pop	r19
 9f2:	2f 91       	pop	r18
 9f4:	0f 90       	pop	r0
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	0f 90       	pop	r0
 9fa:	1f 90       	pop	r1
 9fc:	18 95       	reti

000009fe <micros>:
 9fe:	3f b7       	in	r19, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer0_overflow_count>
 a06:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer0_overflow_count+0x1>
 a0a:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <timer0_overflow_count+0x2>
 a0e:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <timer0_overflow_count+0x3>
 a12:	26 b5       	in	r18, 0x26	; 38
 a14:	a8 9b       	sbis	0x15, 0	; 21
 a16:	05 c0       	rjmp	.+10     	; 0xa22 <micros+0x24>
 a18:	2f 3f       	cpi	r18, 0xFF	; 255
 a1a:	19 f0       	breq	.+6      	; 0xa22 <micros+0x24>
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	a1 1d       	adc	r26, r1
 a20:	b1 1d       	adc	r27, r1
 a22:	3f bf       	out	0x3f, r19	; 63
 a24:	ba 2f       	mov	r27, r26
 a26:	a9 2f       	mov	r26, r25
 a28:	98 2f       	mov	r25, r24
 a2a:	88 27       	eor	r24, r24
 a2c:	82 0f       	add	r24, r18
 a2e:	91 1d       	adc	r25, r1
 a30:	a1 1d       	adc	r26, r1
 a32:	b1 1d       	adc	r27, r1
 a34:	bc 01       	movw	r22, r24
 a36:	cd 01       	movw	r24, r26
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	66 0f       	add	r22, r22
 a42:	77 1f       	adc	r23, r23
 a44:	88 1f       	adc	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	08 95       	ret

00000a4a <delay>:
 a4a:	cf 92       	push	r12
 a4c:	df 92       	push	r13
 a4e:	ef 92       	push	r14
 a50:	ff 92       	push	r15
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
 a56:	6b 01       	movw	r12, r22
 a58:	7c 01       	movw	r14, r24
 a5a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <micros>
 a5e:	eb 01       	movw	r28, r22
 a60:	c1 14       	cp	r12, r1
 a62:	d1 04       	cpc	r13, r1
 a64:	e1 04       	cpc	r14, r1
 a66:	f1 04       	cpc	r15, r1
 a68:	99 f0       	breq	.+38     	; 0xa90 <delay+0x46>
 a6a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <micros>
 a6e:	6c 1b       	sub	r22, r28
 a70:	7d 0b       	sbc	r23, r29
 a72:	68 3e       	cpi	r22, 0xE8	; 232
 a74:	73 40       	sbci	r23, 0x03	; 3
 a76:	38 f0       	brcs	.+14     	; 0xa86 <delay+0x3c>
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	c8 1a       	sub	r12, r24
 a7c:	d1 08       	sbc	r13, r1
 a7e:	e1 08       	sbc	r14, r1
 a80:	f1 08       	sbc	r15, r1
 a82:	c8 51       	subi	r28, 0x18	; 24
 a84:	dc 4f       	sbci	r29, 0xFC	; 252
 a86:	c1 14       	cp	r12, r1
 a88:	d1 04       	cpc	r13, r1
 a8a:	e1 04       	cpc	r14, r1
 a8c:	f1 04       	cpc	r15, r1
 a8e:	69 f7       	brne	.-38     	; 0xa6a <delay+0x20>
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	ff 90       	pop	r15
 a96:	ef 90       	pop	r14
 a98:	df 90       	pop	r13
 a9a:	cf 90       	pop	r12
 a9c:	08 95       	ret

00000a9e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 a9e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 aa0:	84 b5       	in	r24, 0x24	; 36
 aa2:	82 60       	ori	r24, 0x02	; 2
 aa4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 aa6:	84 b5       	in	r24, 0x24	; 36
 aa8:	81 60       	ori	r24, 0x01	; 1
 aaa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 aac:	85 b5       	in	r24, 0x25	; 37
 aae:	82 60       	ori	r24, 0x02	; 2
 ab0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 ab2:	85 b5       	in	r24, 0x25	; 37
 ab4:	81 60       	ori	r24, 0x01	; 1
 ab6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 ab8:	ee e6       	ldi	r30, 0x6E	; 110
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	80 81       	ld	r24, Z
 abe:	81 60       	ori	r24, 0x01	; 1
 ac0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 ac2:	e1 e8       	ldi	r30, 0x81	; 129
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 ac8:	80 81       	ld	r24, Z
 aca:	82 60       	ori	r24, 0x02	; 2
 acc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 ace:	80 81       	ld	r24, Z
 ad0:	81 60       	ori	r24, 0x01	; 1
 ad2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 ad4:	e0 e8       	ldi	r30, 0x80	; 128
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	80 81       	ld	r24, Z
 ada:	81 60       	ori	r24, 0x01	; 1
 adc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 ade:	e1 eb       	ldi	r30, 0xB1	; 177
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
 ae4:	84 60       	ori	r24, 0x04	; 4
 ae6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 ae8:	e0 eb       	ldi	r30, 0xB0	; 176
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	80 81       	ld	r24, Z
 aee:	81 60       	ori	r24, 0x01	; 1
 af0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 af2:	ea e7       	ldi	r30, 0x7A	; 122
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	80 81       	ld	r24, Z
 af8:	84 60       	ori	r24, 0x04	; 4
 afa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 afc:	80 81       	ld	r24, Z
 afe:	82 60       	ori	r24, 0x02	; 2
 b00:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 b02:	80 81       	ld	r24, Z
 b04:	81 60       	ori	r24, 0x01	; 1
 b06:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 b08:	80 81       	ld	r24, Z
 b0a:	80 68       	ori	r24, 0x80	; 128
 b0c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 b0e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 b12:	08 95       	ret

00000b14 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 b14:	83 30       	cpi	r24, 0x03	; 3
 b16:	69 f0       	breq	.+26     	; 0xb32 <turnOffPWM+0x1e>
 b18:	28 f4       	brcc	.+10     	; 0xb24 <turnOffPWM+0x10>
 b1a:	81 30       	cpi	r24, 0x01	; 1
 b1c:	b1 f0       	breq	.+44     	; 0xb4a <turnOffPWM+0x36>
 b1e:	82 30       	cpi	r24, 0x02	; 2
 b20:	c1 f0       	breq	.+48     	; 0xb52 <turnOffPWM+0x3e>
 b22:	08 95       	ret
 b24:	86 30       	cpi	r24, 0x06	; 6
 b26:	c9 f0       	breq	.+50     	; 0xb5a <turnOffPWM+0x46>
 b28:	87 30       	cpi	r24, 0x07	; 7
 b2a:	e9 f0       	breq	.+58     	; 0xb66 <turnOffPWM+0x52>
 b2c:	84 30       	cpi	r24, 0x04	; 4
 b2e:	01 f5       	brne	.+64     	; 0xb70 <turnOffPWM+0x5c>
 b30:	06 c0       	rjmp	.+12     	; 0xb3e <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 b32:	e0 e8       	ldi	r30, 0x80	; 128
 b34:	f0 e0       	ldi	r31, 0x00	; 0
 b36:	80 81       	ld	r24, Z
 b38:	8f 77       	andi	r24, 0x7F	; 127
 b3a:	80 83       	st	Z, r24
 b3c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 b3e:	e0 e8       	ldi	r30, 0x80	; 128
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	80 81       	ld	r24, Z
 b44:	8f 7d       	andi	r24, 0xDF	; 223
 b46:	80 83       	st	Z, r24
 b48:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 b4a:	84 b5       	in	r24, 0x24	; 36
 b4c:	8f 77       	andi	r24, 0x7F	; 127
 b4e:	84 bd       	out	0x24, r24	; 36
 b50:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 b52:	84 b5       	in	r24, 0x24	; 36
 b54:	8f 7d       	andi	r24, 0xDF	; 223
 b56:	84 bd       	out	0x24, r24	; 36
 b58:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 b5a:	e0 eb       	ldi	r30, 0xB0	; 176
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	80 81       	ld	r24, Z
 b60:	8f 77       	andi	r24, 0x7F	; 127
 b62:	80 83       	st	Z, r24
 b64:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 b66:	e0 eb       	ldi	r30, 0xB0	; 176
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	80 81       	ld	r24, Z
 b6c:	8f 7d       	andi	r24, 0xDF	; 223
 b6e:	80 83       	st	Z, r24
 b70:	08 95       	ret

00000b72 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 b72:	cf 93       	push	r28
 b74:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	fc 01       	movw	r30, r24
 b7a:	e3 58       	subi	r30, 0x83	; 131
 b7c:	ff 4f       	sbci	r31, 0xFF	; 255
 b7e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 b80:	fc 01       	movw	r30, r24
 b82:	ef 56       	subi	r30, 0x6F	; 111
 b84:	ff 4f       	sbci	r31, 0xFF	; 255
 b86:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 b88:	88 23       	and	r24, r24
 b8a:	79 f1       	breq	.+94     	; 0xbea <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	88 0f       	add	r24, r24
 b90:	99 1f       	adc	r25, r25
 b92:	fc 01       	movw	r30, r24
 b94:	e1 55       	subi	r30, 0x51	; 81
 b96:	ff 4f       	sbci	r31, 0xFF	; 255
 b98:	a5 91       	lpm	r26, Z+
 b9a:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 b9c:	fc 01       	movw	r30, r24
 b9e:	eb 55       	subi	r30, 0x5B	; 91
 ba0:	ff 4f       	sbci	r31, 0xFF	; 255
 ba2:	c5 91       	lpm	r28, Z+
 ba4:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
 ba6:	61 11       	cpse	r22, r1
 ba8:	0c c0       	rjmp	.+24     	; 0xbc2 <pinMode+0x50>
		uint8_t oldSREG = SREG;
 baa:	9f b7       	in	r25, 0x3f	; 63
                cli();
 bac:	f8 94       	cli
		*reg &= ~bit;
 bae:	8c 91       	ld	r24, X
 bb0:	e2 2f       	mov	r30, r18
 bb2:	e0 95       	com	r30
 bb4:	8e 23       	and	r24, r30
 bb6:	8c 93       	st	X, r24
		*out &= ~bit;
 bb8:	28 81       	ld	r18, Y
 bba:	e2 23       	and	r30, r18
 bbc:	e8 83       	st	Y, r30
		SREG = oldSREG;
 bbe:	9f bf       	out	0x3f, r25	; 63
 bc0:	14 c0       	rjmp	.+40     	; 0xbea <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
 bc2:	62 30       	cpi	r22, 0x02	; 2
 bc4:	61 f4       	brne	.+24     	; 0xbde <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 bc6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 bc8:	f8 94       	cli
		*reg &= ~bit;
 bca:	3c 91       	ld	r19, X
 bcc:	82 2f       	mov	r24, r18
 bce:	80 95       	com	r24
 bd0:	83 23       	and	r24, r19
 bd2:	8c 93       	st	X, r24
		*out |= bit;
 bd4:	e8 81       	ld	r30, Y
 bd6:	e2 2b       	or	r30, r18
 bd8:	e8 83       	st	Y, r30
		SREG = oldSREG;
 bda:	9f bf       	out	0x3f, r25	; 63
 bdc:	06 c0       	rjmp	.+12     	; 0xbea <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 bde:	8f b7       	in	r24, 0x3f	; 63
                cli();
 be0:	f8 94       	cli
		*reg |= bit;
 be2:	ec 91       	ld	r30, X
 be4:	e2 2b       	or	r30, r18
 be6:	ec 93       	st	X, r30
		SREG = oldSREG;
 be8:	8f bf       	out	0x3f, r24	; 63
	}
}
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	08 95       	ret

00000bf0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 bf0:	1f 93       	push	r17
 bf2:	cf 93       	push	r28
 bf4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 bf6:	28 2f       	mov	r18, r24
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	f9 01       	movw	r30, r18
 bfc:	e7 59       	subi	r30, 0x97	; 151
 bfe:	ff 4f       	sbci	r31, 0xFF	; 255
 c00:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 c02:	f9 01       	movw	r30, r18
 c04:	e3 58       	subi	r30, 0x83	; 131
 c06:	ff 4f       	sbci	r31, 0xFF	; 255
 c08:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
 c0a:	f9 01       	movw	r30, r18
 c0c:	ef 56       	subi	r30, 0x6F	; 111
 c0e:	ff 4f       	sbci	r31, 0xFF	; 255
 c10:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 c12:	cc 23       	and	r28, r28
 c14:	d1 f0       	breq	.+52     	; 0xc4a <digitalWrite+0x5a>
 c16:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 c18:	81 11       	cpse	r24, r1
 c1a:	0e 94 8a 05 	call	0xb14	; 0xb14 <turnOffPWM>

	out = portOutputRegister(port);
 c1e:	ec 2f       	mov	r30, r28
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	ee 0f       	add	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	eb 55       	subi	r30, 0x5B	; 91
 c28:	ff 4f       	sbci	r31, 0xFF	; 255
 c2a:	a5 91       	lpm	r26, Z+
 c2c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 c2e:	8f b7       	in	r24, 0x3f	; 63
	cli();
 c30:	f8 94       	cli

	if (val == LOW) {
 c32:	d1 11       	cpse	r29, r1
 c34:	06 c0       	rjmp	.+12     	; 0xc42 <digitalWrite+0x52>
		*out &= ~bit;
 c36:	9c 91       	ld	r25, X
 c38:	e1 2f       	mov	r30, r17
 c3a:	e0 95       	com	r30
 c3c:	e9 23       	and	r30, r25
 c3e:	ec 93       	st	X, r30
 c40:	03 c0       	rjmp	.+6      	; 0xc48 <digitalWrite+0x58>
	} else {
		*out |= bit;
 c42:	ec 91       	ld	r30, X
 c44:	e1 2b       	or	r30, r17
 c46:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 c48:	8f bf       	out	0x3f, r24	; 63
}
 c4a:	df 91       	pop	r29
 c4c:	cf 91       	pop	r28
 c4e:	1f 91       	pop	r17
 c50:	08 95       	ret

00000c52 <setup>:

#include "ProjectMain.h"

void setup()
{
	pinMode(13,OUTPUT);
 c52:	61 e0       	ldi	r22, 0x01	; 1
 c54:	8d e0       	ldi	r24, 0x0D	; 13
 c56:	0e 94 b9 05 	call	0xb72	; 0xb72 <pinMode>
	Serial.begin(9600);
 c5a:	40 e8       	ldi	r20, 0x80	; 128
 c5c:	55 e2       	ldi	r21, 0x25	; 37
 c5e:	60 e0       	ldi	r22, 0x00	; 0
 c60:	70 e0       	ldi	r23, 0x00	; 0
 c62:	80 e3       	ldi	r24, 0x30	; 48
 c64:	91 e0       	ldi	r25, 0x01	; 1
 c66:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN14HardwareSerial5beginEm>
	Serial.print("Hello World!");
 c6a:	67 e1       	ldi	r22, 0x17	; 23
 c6c:	71 e0       	ldi	r23, 0x01	; 1
 c6e:	80 e3       	ldi	r24, 0x30	; 48
 c70:	91 e0       	ldi	r25, 0x01	; 1
 c72:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN5Print5printEPKc>
 c76:	08 95       	ret

00000c78 <loop>:
}

void loop()
{
	digitalWrite(13,LOW);
 c78:	60 e0       	ldi	r22, 0x00	; 0
 c7a:	8d e0       	ldi	r24, 0x0D	; 13
 c7c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <digitalWrite>
	delay(1000);	
 c80:	68 ee       	ldi	r22, 0xE8	; 232
 c82:	73 e0       	ldi	r23, 0x03	; 3
 c84:	80 e0       	ldi	r24, 0x00	; 0
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 94 25 05 	call	0xa4a	; 0xa4a <delay>
	digitalWrite(13,HIGH);
 c8c:	61 e0       	ldi	r22, 0x01	; 1
 c8e:	8d e0       	ldi	r24, 0x0D	; 13
 c90:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <digitalWrite>
	delay(1000);
 c94:	68 ee       	ldi	r22, 0xE8	; 232
 c96:	73 e0       	ldi	r23, 0x03	; 3
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 25 05 	call	0xa4a	; 0xa4a <delay>
	Serial.println("123456789..");	
 ca0:	64 e2       	ldi	r22, 0x24	; 36
 ca2:	71 e0       	ldi	r23, 0x01	; 1
 ca4:	80 e3       	ldi	r24, 0x30	; 48
 ca6:	91 e0       	ldi	r25, 0x01	; 1
 ca8:	0e 94 2c 03 	call	0x658	; 0x658 <_ZN5Print7printlnEPKc>
 cac:	08 95       	ret

00000cae <__udivmodsi4>:
 cae:	a1 e2       	ldi	r26, 0x21	; 33
 cb0:	1a 2e       	mov	r1, r26
 cb2:	aa 1b       	sub	r26, r26
 cb4:	bb 1b       	sub	r27, r27
 cb6:	fd 01       	movw	r30, r26
 cb8:	0d c0       	rjmp	.+26     	; 0xcd4 <__udivmodsi4_ep>

00000cba <__udivmodsi4_loop>:
 cba:	aa 1f       	adc	r26, r26
 cbc:	bb 1f       	adc	r27, r27
 cbe:	ee 1f       	adc	r30, r30
 cc0:	ff 1f       	adc	r31, r31
 cc2:	a2 17       	cp	r26, r18
 cc4:	b3 07       	cpc	r27, r19
 cc6:	e4 07       	cpc	r30, r20
 cc8:	f5 07       	cpc	r31, r21
 cca:	20 f0       	brcs	.+8      	; 0xcd4 <__udivmodsi4_ep>
 ccc:	a2 1b       	sub	r26, r18
 cce:	b3 0b       	sbc	r27, r19
 cd0:	e4 0b       	sbc	r30, r20
 cd2:	f5 0b       	sbc	r31, r21

00000cd4 <__udivmodsi4_ep>:
 cd4:	66 1f       	adc	r22, r22
 cd6:	77 1f       	adc	r23, r23
 cd8:	88 1f       	adc	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	1a 94       	dec	r1
 cde:	69 f7       	brne	.-38     	; 0xcba <__udivmodsi4_loop>
 ce0:	60 95       	com	r22
 ce2:	70 95       	com	r23
 ce4:	80 95       	com	r24
 ce6:	90 95       	com	r25
 ce8:	9b 01       	movw	r18, r22
 cea:	ac 01       	movw	r20, r24
 cec:	bd 01       	movw	r22, r26
 cee:	cf 01       	movw	r24, r30
 cf0:	08 95       	ret

00000cf2 <__tablejump2__>:
 cf2:	ee 0f       	add	r30, r30
 cf4:	ff 1f       	adc	r31, r31
 cf6:	05 90       	lpm	r0, Z+
 cf8:	f4 91       	lpm	r31, Z
 cfa:	e0 2d       	mov	r30, r0
 cfc:	09 94       	ijmp

00000cfe <_exit>:
 cfe:	f8 94       	cli

00000d00 <__stop_program>:
 d00:	ff cf       	rjmp	.-2      	; 0xd00 <__stop_program>
