
CPE301-FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000221a  000022ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000221a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040b  00800124  00800124  000022d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000710  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000188ea  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004023  00000000  00000000  0001b33e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000059a9  00000000  00000000  0001f361  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d8c  00000000  00000000  00024d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000050d0  00000000  00000000  00026a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cf41  00000000  00000000  0002bb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000918  00000000  00000000  00038aa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
       4:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_1>
       8:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_2>
       c:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_27>
      10:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_27>
      14:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_27>
      18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      1c:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_7>
      20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      40:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_16>
      44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      48:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_18>
      4c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_19>
      50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      64:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      68:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      6c:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_27>
      70:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_28>
      74:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_29>
      78:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      7c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      80:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      84:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      88:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      8c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      90:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      94:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      98:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      9c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      ac:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      b0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      b4:	88 06       	cpc	r8, r24
      b6:	8c 06       	cpc	r8, r28
      b8:	7c 06       	cpc	r7, r28
      ba:	82 06       	cpc	r8, r18
      bc:	b3 06       	cpc	r11, r19
      be:	90 06       	cpc	r9, r16
      c0:	96 06       	cpc	r9, r22
      c2:	9c 06       	cpc	r9, r28
      c4:	a2 06       	cpc	r10, r18
      c6:	b3 06       	cpc	r11, r19
      c8:	a8 06       	cpc	r10, r24
      ca:	ae 06       	cpc	r10, r30

000000cc <__trampolines_end>:
      cc:	02 00       	Address 0x000000cc is out of bounds.
.word	0xffff	; ????

000000cd <digital_pin_to_timer_PGM>:
      cd:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      dd:	00 00 00 00                                         ....

000000e1 <digital_pin_to_bit_mask_PGM>:
      e1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      f1:	04 08 10 20                                         ... 

000000f5 <digital_pin_to_port_PGM>:
      f5:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     105:	03 03 03 03                                         ....

00000109 <port_to_output_PGM>:
     109:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000113 <port_to_mode_PGM>:
     113:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000011e <__ctors_start>:
     11e:	eb 02       	muls	r30, r27
     120:	a3 03       	fmuls	r18, r19
     122:	24 07       	cpc	r18, r20
     124:	60 09       	sbc	r22, r0

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d8 e0       	ldi	r29, 0x08	; 8
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	ea e1       	ldi	r30, 0x1A	; 26
     13a:	f2 e2       	ldi	r31, 0x22	; 34
     13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
     13e:	05 90       	lpm	r0, Z+
     140:	0d 92       	st	X+, r0
     142:	a4 32       	cpi	r26, 0x24	; 36
     144:	b1 07       	cpc	r27, r17
     146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
     148:	25 e0       	ldi	r18, 0x05	; 5
     14a:	a4 e2       	ldi	r26, 0x24	; 36
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
     150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
     152:	af 32       	cpi	r26, 0x2F	; 47
     154:	b2 07       	cpc	r27, r18
     156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>

00000158 <__do_global_ctors>:
     158:	10 e0       	ldi	r17, 0x00	; 0
     15a:	c3 e9       	ldi	r28, 0x93	; 147
     15c:	d0 e0       	ldi	r29, 0x00	; 0
     15e:	04 c0       	rjmp	.+8      	; 0x168 <__do_global_ctors+0x10>
     160:	21 97       	sbiw	r28, 0x01	; 1
     162:	fe 01       	movw	r30, r28
     164:	0e 94 05 11 	call	0x220a	; 0x220a <__tablejump2__>
     168:	cf 38       	cpi	r28, 0x8F	; 143
     16a:	d1 07       	cpc	r29, r17
     16c:	c9 f7       	brne	.-14     	; 0x160 <__do_global_ctors+0x8>
     16e:	0e 94 af 03 	call	0x75e	; 0x75e <main>
     172:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <_exit>

00000176 <__bad_interrupt>:
     176:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017a <_ZN14HardwareSerial9availableEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
     17a:	fc 01       	movw	r30, r24
     17c:	24 85       	ldd	r18, Z+12	; 0x0c
     17e:	35 85       	ldd	r19, Z+13	; 0x0d
     180:	f9 01       	movw	r30, r18
     182:	e0 5c       	subi	r30, 0xC0	; 192
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	80 81       	ld	r24, Z
     188:	91 81       	ldd	r25, Z+1	; 0x01
     18a:	32 96       	adiw	r30, 0x02	; 2
     18c:	20 81       	ld	r18, Z
     18e:	31 81       	ldd	r19, Z+1	; 0x01
     190:	80 5c       	subi	r24, 0xC0	; 192
     192:	9f 4f       	sbci	r25, 0xFF	; 255
     194:	82 1b       	sub	r24, r18
     196:	93 0b       	sbc	r25, r19
     198:	8f 73       	andi	r24, 0x3F	; 63
     19a:	90 78       	andi	r25, 0x80	; 128
     19c:	99 23       	and	r25, r25
     19e:	24 f4       	brge	.+8      	; 0x1a8 <_ZN14HardwareSerial9availableEv+0x2e>
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	80 6c       	ori	r24, 0xC0	; 192
     1a4:	9f 6f       	ori	r25, 0xFF	; 255
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	08 95       	ret

000001aa <_ZN14HardwareSerial4peekEv>:
     1aa:	fc 01       	movw	r30, r24
     1ac:	84 85       	ldd	r24, Z+12	; 0x0c
     1ae:	95 85       	ldd	r25, Z+13	; 0x0d
     1b0:	fc 01       	movw	r30, r24
     1b2:	e0 5c       	subi	r30, 0xC0	; 192
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
     1b6:	40 81       	ld	r20, Z
     1b8:	51 81       	ldd	r21, Z+1	; 0x01
     1ba:	32 96       	adiw	r30, 0x02	; 2
     1bc:	20 81       	ld	r18, Z
     1be:	31 81       	ldd	r19, Z+1	; 0x01
     1c0:	42 17       	cp	r20, r18
     1c2:	53 07       	cpc	r21, r19
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <_ZN14HardwareSerial4peekEv+0x2c>
     1c6:	20 81       	ld	r18, Z
     1c8:	31 81       	ldd	r19, Z+1	; 0x01
     1ca:	fc 01       	movw	r30, r24
     1cc:	e2 0f       	add	r30, r18
     1ce:	f3 1f       	adc	r31, r19
     1d0:	80 81       	ld	r24, Z
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	08 95       	ret
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	08 95       	ret

000001dc <_ZN14HardwareSerial4readEv>:
     1dc:	fc 01       	movw	r30, r24
     1de:	84 85       	ldd	r24, Z+12	; 0x0c
     1e0:	95 85       	ldd	r25, Z+13	; 0x0d
     1e2:	fc 01       	movw	r30, r24
     1e4:	e0 5c       	subi	r30, 0xC0	; 192
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	40 81       	ld	r20, Z
     1ea:	51 81       	ldd	r21, Z+1	; 0x01
     1ec:	32 96       	adiw	r30, 0x02	; 2
     1ee:	20 81       	ld	r18, Z
     1f0:	31 81       	ldd	r19, Z+1	; 0x01
     1f2:	42 17       	cp	r20, r18
     1f4:	53 07       	cpc	r21, r19
     1f6:	81 f0       	breq	.+32     	; 0x218 <_ZN14HardwareSerial4readEv+0x3c>
     1f8:	20 81       	ld	r18, Z
     1fa:	31 81       	ldd	r19, Z+1	; 0x01
     1fc:	dc 01       	movw	r26, r24
     1fe:	a2 0f       	add	r26, r18
     200:	b3 1f       	adc	r27, r19
     202:	8c 91       	ld	r24, X
     204:	20 81       	ld	r18, Z
     206:	31 81       	ldd	r19, Z+1	; 0x01
     208:	2f 5f       	subi	r18, 0xFF	; 255
     20a:	3f 4f       	sbci	r19, 0xFF	; 255
     20c:	2f 73       	andi	r18, 0x3F	; 63
     20e:	33 27       	eor	r19, r19
     210:	31 83       	std	Z+1, r19	; 0x01
     212:	20 83       	st	Z, r18
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	08 95       	ret
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	9f ef       	ldi	r25, 0xFF	; 255
     21c:	08 95       	ret

0000021e <_ZN14HardwareSerial5flushEv>:
     21e:	fc 01       	movw	r30, r24
     220:	81 a1       	ldd	r24, Z+33	; 0x21
     222:	88 23       	and	r24, r24
     224:	29 f0       	breq	.+10     	; 0x230 <_ZN14HardwareSerial5flushEv+0x12>
     226:	a4 89       	ldd	r26, Z+20	; 0x14
     228:	b5 89       	ldd	r27, Z+21	; 0x15
     22a:	8c 91       	ld	r24, X
     22c:	86 ff       	sbrs	r24, 6
     22e:	fb cf       	rjmp	.-10     	; 0x226 <_ZN14HardwareSerial5flushEv+0x8>
     230:	11 a2       	std	Z+33, r1	; 0x21
     232:	08 95       	ret

00000234 <_ZN14HardwareSerial5writeEh>:
     234:	dc 01       	movw	r26, r24
     236:	1e 96       	adiw	r26, 0x0e	; 14
     238:	8d 91       	ld	r24, X+
     23a:	9c 91       	ld	r25, X
     23c:	1f 97       	sbiw	r26, 0x0f	; 15
     23e:	fc 01       	movw	r30, r24
     240:	e0 5c       	subi	r30, 0xC0	; 192
     242:	ff 4f       	sbci	r31, 0xFF	; 255
     244:	40 81       	ld	r20, Z
     246:	51 81       	ldd	r21, Z+1	; 0x01
     248:	4f 5f       	subi	r20, 0xFF	; 255
     24a:	5f 4f       	sbci	r21, 0xFF	; 255
     24c:	4f 73       	andi	r20, 0x3F	; 63
     24e:	55 27       	eor	r21, r21
     250:	32 96       	adiw	r30, 0x02	; 2
     252:	20 81       	ld	r18, Z
     254:	31 81       	ldd	r19, Z+1	; 0x01
     256:	42 17       	cp	r20, r18
     258:	53 07       	cpc	r21, r19
     25a:	d9 f3       	breq	.-10     	; 0x252 <_ZN14HardwareSerial5writeEh+0x1e>
     25c:	fc 01       	movw	r30, r24
     25e:	e0 5c       	subi	r30, 0xC0	; 192
     260:	ff 4f       	sbci	r31, 0xFF	; 255
     262:	20 81       	ld	r18, Z
     264:	31 81       	ldd	r19, Z+1	; 0x01
     266:	fc 01       	movw	r30, r24
     268:	e2 0f       	add	r30, r18
     26a:	f3 1f       	adc	r31, r19
     26c:	60 83       	st	Z, r22
     26e:	1e 96       	adiw	r26, 0x0e	; 14
     270:	ed 91       	ld	r30, X+
     272:	fc 91       	ld	r31, X
     274:	1f 97       	sbiw	r26, 0x0f	; 15
     276:	e0 5c       	subi	r30, 0xC0	; 192
     278:	ff 4f       	sbci	r31, 0xFF	; 255
     27a:	51 83       	std	Z+1, r21	; 0x01
     27c:	40 83       	st	Z, r20
     27e:	56 96       	adiw	r26, 0x16	; 22
     280:	ed 91       	ld	r30, X+
     282:	fc 91       	ld	r31, X
     284:	57 97       	sbiw	r26, 0x17	; 23
     286:	20 81       	ld	r18, Z
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	5f 96       	adiw	r26, 0x1f	; 31
     28e:	0c 90       	ld	r0, X
     290:	5f 97       	sbiw	r26, 0x1f	; 31
     292:	02 c0       	rjmp	.+4      	; 0x298 <_ZN14HardwareSerial5writeEh+0x64>
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	0a 94       	dec	r0
     29a:	e2 f7       	brpl	.-8      	; 0x294 <_ZN14HardwareSerial5writeEh+0x60>
     29c:	82 2b       	or	r24, r18
     29e:	80 83       	st	Z, r24
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	91 96       	adiw	r26, 0x21	; 33
     2a4:	8c 93       	st	X, r24
     2a6:	91 97       	sbiw	r26, 0x21	; 33
     2a8:	54 96       	adiw	r26, 0x14	; 20
     2aa:	ed 91       	ld	r30, X+
     2ac:	fc 91       	ld	r31, X
     2ae:	55 97       	sbiw	r26, 0x15	; 21
     2b0:	80 81       	ld	r24, Z
     2b2:	80 64       	ori	r24, 0x40	; 64
     2b4:	80 83       	st	Z, r24
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	08 95       	ret

000002bc <_Z11serialEventv>:
     2bc:	08 95       	ret

000002be <__vector_18>:
     2be:	1f 92       	push	r1
     2c0:	0f 92       	push	r0
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	0f 92       	push	r0
     2c6:	11 24       	eor	r1, r1
     2c8:	2f 93       	push	r18
     2ca:	3f 93       	push	r19
     2cc:	4f 93       	push	r20
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	af 93       	push	r26
     2d4:	bf 93       	push	r27
     2d6:	ef 93       	push	r30
     2d8:	ff 93       	push	r31
     2da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2de:	82 fd       	sbrc	r24, 2
     2e0:	1c c0       	rjmp	.+56     	; 0x31a <__vector_18+0x5c>
     2e2:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2e6:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <rx_buffer+0x40>
     2ea:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <rx_buffer+0x41>
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	8f 73       	andi	r24, 0x3F	; 63
     2f2:	99 27       	eor	r25, r25
     2f4:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <rx_buffer+0x42>
     2f8:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <rx_buffer+0x43>
     2fc:	82 17       	cp	r24, r18
     2fe:	93 07       	cpc	r25, r19
     300:	71 f0       	breq	.+28     	; 0x31e <__vector_18+0x60>
     302:	a4 e7       	ldi	r26, 0x74	; 116
     304:	b2 e0       	ldi	r27, 0x02	; 2
     306:	ed 91       	ld	r30, X+
     308:	fc 91       	ld	r31, X
     30a:	11 97       	sbiw	r26, 0x01	; 1
     30c:	ec 5c       	subi	r30, 0xCC	; 204
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	40 83       	st	Z, r20
     312:	11 96       	adiw	r26, 0x01	; 1
     314:	9c 93       	st	X, r25
     316:	8e 93       	st	-X, r24
     318:	02 c0       	rjmp	.+4      	; 0x31e <__vector_18+0x60>
     31a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     31e:	ff 91       	pop	r31
     320:	ef 91       	pop	r30
     322:	bf 91       	pop	r27
     324:	af 91       	pop	r26
     326:	9f 91       	pop	r25
     328:	8f 91       	pop	r24
     32a:	4f 91       	pop	r20
     32c:	3f 91       	pop	r19
     32e:	2f 91       	pop	r18
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <_Z12serialEvent1v>:
     33a:	08 95       	ret

0000033c <__vector_28>:
     33c:	1f 92       	push	r1
     33e:	0f 92       	push	r0
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	0f 92       	push	r0
     344:	11 24       	eor	r1, r1
     346:	2f 93       	push	r18
     348:	3f 93       	push	r19
     34a:	4f 93       	push	r20
     34c:	8f 93       	push	r24
     34e:	9f 93       	push	r25
     350:	af 93       	push	r26
     352:	bf 93       	push	r27
     354:	ef 93       	push	r30
     356:	ff 93       	push	r31
     358:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     35c:	82 fd       	sbrc	r24, 2
     35e:	1c c0       	rjmp	.+56     	; 0x398 <__vector_28+0x5c>
     360:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     364:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <rx_buffer1+0x40>
     368:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <rx_buffer1+0x41>
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	8f 73       	andi	r24, 0x3F	; 63
     370:	99 27       	eor	r25, r25
     372:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <rx_buffer1+0x42>
     376:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <rx_buffer1+0x43>
     37a:	82 17       	cp	r24, r18
     37c:	93 07       	cpc	r25, r19
     37e:	71 f0       	breq	.+28     	; 0x39c <__vector_28+0x60>
     380:	ac ee       	ldi	r26, 0xEC	; 236
     382:	b1 e0       	ldi	r27, 0x01	; 1
     384:	ed 91       	ld	r30, X+
     386:	fc 91       	ld	r31, X
     388:	11 97       	sbiw	r26, 0x01	; 1
     38a:	e4 55       	subi	r30, 0x54	; 84
     38c:	fe 4f       	sbci	r31, 0xFE	; 254
     38e:	40 83       	st	Z, r20
     390:	11 96       	adiw	r26, 0x01	; 1
     392:	9c 93       	st	X, r25
     394:	8e 93       	st	-X, r24
     396:	02 c0       	rjmp	.+4      	; 0x39c <__vector_28+0x60>
     398:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     39c:	ff 91       	pop	r31
     39e:	ef 91       	pop	r30
     3a0:	bf 91       	pop	r27
     3a2:	af 91       	pop	r26
     3a4:	9f 91       	pop	r25
     3a6:	8f 91       	pop	r24
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <_Z14serialEventRunv>:
     3b8:	86 e4       	ldi	r24, 0x46	; 70
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN14HardwareSerial9availableEv>
     3c0:	89 2b       	or	r24, r25
     3c2:	11 f0       	breq	.+4      	; 0x3c8 <_Z14serialEventRunv+0x10>
     3c4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z11serialEventv>
     3c8:	84 e2       	ldi	r24, 0x24	; 36
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN14HardwareSerial9availableEv>
     3d0:	89 2b       	or	r24, r25
     3d2:	11 f0       	breq	.+4      	; 0x3d8 <_Z14serialEventRunv+0x20>
     3d4:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z12serialEvent1v>
     3d8:	08 95       	ret

000003da <__vector_19>:
     3da:	1f 92       	push	r1
     3dc:	0f 92       	push	r0
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	0f 92       	push	r0
     3e2:	11 24       	eor	r1, r1
     3e4:	2f 93       	push	r18
     3e6:	3f 93       	push	r19
     3e8:	8f 93       	push	r24
     3ea:	9f 93       	push	r25
     3ec:	af 93       	push	r26
     3ee:	bf 93       	push	r27
     3f0:	ef 93       	push	r30
     3f2:	ff 93       	push	r31
     3f4:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <tx_buffer+0x40>
     3f8:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <tx_buffer+0x41>
     3fc:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <tx_buffer+0x42>
     400:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <tx_buffer+0x43>
     404:	28 17       	cp	r18, r24
     406:	39 07       	cpc	r19, r25
     408:	31 f4       	brne	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     40a:	e1 ec       	ldi	r30, 0xC1	; 193
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24
     414:	10 c0       	rjmp	.+32     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     416:	e2 e3       	ldi	r30, 0x32	; 50
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	a0 81       	ld	r26, Z
     41c:	b1 81       	ldd	r27, Z+1	; 0x01
     41e:	a0 51       	subi	r26, 0x10	; 16
     420:	be 4f       	sbci	r27, 0xFE	; 254
     422:	2c 91       	ld	r18, X
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	8f 73       	andi	r24, 0x3F	; 63
     42c:	99 27       	eor	r25, r25
     42e:	91 83       	std	Z+1, r25	; 0x01
     430:	80 83       	st	Z, r24
     432:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <__vector_29>:
     450:	1f 92       	push	r1
     452:	0f 92       	push	r0
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	0f 92       	push	r0
     458:	11 24       	eor	r1, r1
     45a:	2f 93       	push	r18
     45c:	3f 93       	push	r19
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31
     46a:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <tx_buffer1+0x40>
     46e:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <tx_buffer1+0x41>
     472:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tx_buffer1+0x42>
     476:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <tx_buffer1+0x43>
     47a:	28 17       	cp	r18, r24
     47c:	39 07       	cpc	r19, r25
     47e:	31 f4       	brne	.+12     	; 0x48c <__vector_29+0x3c>
     480:	e9 ec       	ldi	r30, 0xC9	; 201
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	8f 7d       	andi	r24, 0xDF	; 223
     488:	80 83       	st	Z, r24
     48a:	10 c0       	rjmp	.+32     	; 0x4ac <__vector_29+0x5c>
     48c:	ea ea       	ldi	r30, 0xAA	; 170
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	a0 81       	ld	r26, Z
     492:	b1 81       	ldd	r27, Z+1	; 0x01
     494:	a8 59       	subi	r26, 0x98	; 152
     496:	be 4f       	sbci	r27, 0xFE	; 254
     498:	2c 91       	ld	r18, X
     49a:	80 81       	ld	r24, Z
     49c:	91 81       	ldd	r25, Z+1	; 0x01
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	8f 73       	andi	r24, 0x3F	; 63
     4a2:	99 27       	eor	r25, r25
     4a4:	91 83       	std	Z+1, r25	; 0x01
     4a6:	80 83       	st	Z, r24
     4a8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <_ZN14HardwareSerial5beginEm>:
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
     4d8:	6a 01       	movw	r12, r20
     4da:	7b 01       	movw	r14, r22
     4dc:	41 15       	cp	r20, r1
     4de:	51 4e       	sbci	r21, 0xE1	; 225
     4e0:	61 05       	cpc	r22, r1
     4e2:	71 05       	cpc	r23, r1
     4e4:	09 f1       	breq	.+66     	; 0x528 <_ZN14HardwareSerial5beginEm+0x62>
     4e6:	ec 89       	ldd	r30, Y+20	; 0x14
     4e8:	fd 89       	ldd	r31, Y+21	; 0x15
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	08 a0       	ldd	r0, Y+32	; 0x20
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <_ZN14HardwareSerial5beginEm+0x30>
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	0a 94       	dec	r0
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <_ZN14HardwareSerial5beginEm+0x2c>
     4fa:	80 83       	st	Z, r24
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	79 e0       	ldi	r23, 0x09	; 9
     500:	8d e3       	ldi	r24, 0x3D	; 61
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a7 01       	movw	r20, r14
     506:	96 01       	movw	r18, r12
     508:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__udivmodsi4>
     50c:	89 01       	movw	r16, r18
     50e:	9a 01       	movw	r18, r20
     510:	01 50       	subi	r16, 0x01	; 1
     512:	11 09       	sbc	r17, r1
     514:	21 09       	sbc	r18, r1
     516:	31 09       	sbc	r19, r1
     518:	36 95       	lsr	r19
     51a:	27 95       	ror	r18
     51c:	17 95       	ror	r17
     51e:	07 95       	ror	r16
     520:	98 01       	movw	r18, r16
     522:	01 15       	cp	r16, r1
     524:	10 41       	sbci	r17, 0x10	; 16
     526:	a8 f0       	brcs	.+42     	; 0x552 <_ZN14HardwareSerial5beginEm+0x8c>
     528:	ec 89       	ldd	r30, Y+20	; 0x14
     52a:	fd 89       	ldd	r31, Y+21	; 0x15
     52c:	10 82       	st	Z, r1
     52e:	60 e8       	ldi	r22, 0x80	; 128
     530:	74 e8       	ldi	r23, 0x84	; 132
     532:	8e e1       	ldi	r24, 0x1E	; 30
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a7 01       	movw	r20, r14
     538:	96 01       	movw	r18, r12
     53a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__udivmodsi4>
     53e:	da 01       	movw	r26, r20
     540:	c9 01       	movw	r24, r18
     542:	01 97       	sbiw	r24, 0x01	; 1
     544:	a1 09       	sbc	r26, r1
     546:	b1 09       	sbc	r27, r1
     548:	b6 95       	lsr	r27
     54a:	a7 95       	ror	r26
     54c:	97 95       	ror	r25
     54e:	87 95       	ror	r24
     550:	9c 01       	movw	r18, r24
     552:	e8 89       	ldd	r30, Y+16	; 0x10
     554:	f9 89       	ldd	r31, Y+17	; 0x11
     556:	30 83       	st	Z, r19
     558:	ea 89       	ldd	r30, Y+18	; 0x12
     55a:	fb 89       	ldd	r31, Y+19	; 0x13
     55c:	20 83       	st	Z, r18
     55e:	19 a2       	std	Y+33, r1	; 0x21
     560:	ee 89       	ldd	r30, Y+22	; 0x16
     562:	ff 89       	ldd	r31, Y+23	; 0x17
     564:	40 81       	ld	r20, Z
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	9c 01       	movw	r18, r24
     56c:	0c 8c       	ldd	r0, Y+28	; 0x1c
     56e:	02 c0       	rjmp	.+4      	; 0x574 <_ZN14HardwareSerial5beginEm+0xae>
     570:	22 0f       	add	r18, r18
     572:	33 1f       	adc	r19, r19
     574:	0a 94       	dec	r0
     576:	e2 f7       	brpl	.-8      	; 0x570 <_ZN14HardwareSerial5beginEm+0xaa>
     578:	24 2b       	or	r18, r20
     57a:	20 83       	st	Z, r18
     57c:	ee 89       	ldd	r30, Y+22	; 0x16
     57e:	ff 89       	ldd	r31, Y+23	; 0x17
     580:	40 81       	ld	r20, Z
     582:	9c 01       	movw	r18, r24
     584:	0d 8c       	ldd	r0, Y+29	; 0x1d
     586:	02 c0       	rjmp	.+4      	; 0x58c <_ZN14HardwareSerial5beginEm+0xc6>
     588:	22 0f       	add	r18, r18
     58a:	33 1f       	adc	r19, r19
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <_ZN14HardwareSerial5beginEm+0xc2>
     590:	24 2b       	or	r18, r20
     592:	20 83       	st	Z, r18
     594:	ee 89       	ldd	r30, Y+22	; 0x16
     596:	ff 89       	ldd	r31, Y+23	; 0x17
     598:	40 81       	ld	r20, Z
     59a:	9c 01       	movw	r18, r24
     59c:	0e 8c       	ldd	r0, Y+30	; 0x1e
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <_ZN14HardwareSerial5beginEm+0xde>
     5a0:	22 0f       	add	r18, r18
     5a2:	33 1f       	adc	r19, r19
     5a4:	0a 94       	dec	r0
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <_ZN14HardwareSerial5beginEm+0xda>
     5a8:	24 2b       	or	r18, r20
     5aa:	20 83       	st	Z, r18
     5ac:	ee 89       	ldd	r30, Y+22	; 0x16
     5ae:	ff 89       	ldd	r31, Y+23	; 0x17
     5b0:	20 81       	ld	r18, Z
     5b2:	0f 8c       	ldd	r0, Y+31	; 0x1f
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <_ZN14HardwareSerial5beginEm+0xf4>
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <_ZN14HardwareSerial5beginEm+0xf0>
     5be:	80 95       	com	r24
     5c0:	82 23       	and	r24, r18
     5c2:	80 83       	st	Z, r24
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	ef 90       	pop	r14
     5d0:	df 90       	pop	r13
     5d2:	cf 90       	pop	r12
     5d4:	08 95       	ret

000005d6 <_GLOBAL__sub_I_rx_buffer>:
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     5de:	e6 e4       	ldi	r30, 0x46	; 70
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	13 82       	std	Z+3, r1	; 0x03
     5e4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     5e6:	0f 2e       	mov	r0, r31
     5e8:	f8 ee       	ldi	r31, 0xE8	; 232
     5ea:	cf 2e       	mov	r12, r31
     5ec:	f3 e0       	ldi	r31, 0x03	; 3
     5ee:	df 2e       	mov	r13, r31
     5f0:	e1 2c       	mov	r14, r1
     5f2:	f1 2c       	mov	r15, r1
     5f4:	f0 2d       	mov	r31, r0
     5f6:	c4 82       	std	Z+4, r12	; 0x04
     5f8:	d5 82       	std	Z+5, r13	; 0x05
     5fa:	e6 82       	std	Z+6, r14	; 0x06
     5fc:	f7 82       	std	Z+7, r15	; 0x07

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     5fe:	69 e0       	ldi	r22, 0x09	; 9
     600:	71 e0       	ldi	r23, 0x01	; 1
     602:	71 83       	std	Z+1, r23	; 0x01
     604:	60 83       	st	Z, r22
{
  _rx_buffer = rx_buffer;
     606:	84 e3       	ldi	r24, 0x34	; 52
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	95 87       	std	Z+13, r25	; 0x0d
     60c:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     60e:	80 ef       	ldi	r24, 0xF0	; 240
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	97 87       	std	Z+15, r25	; 0x0f
     614:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     616:	85 ec       	ldi	r24, 0xC5	; 197
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	91 8b       	std	Z+17, r25	; 0x11
     61c:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     61e:	84 ec       	ldi	r24, 0xC4	; 196
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	93 8b       	std	Z+19, r25	; 0x13
     624:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     626:	80 ec       	ldi	r24, 0xC0	; 192
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	95 8b       	std	Z+21, r25	; 0x15
     62c:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     62e:	81 ec       	ldi	r24, 0xC1	; 193
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	97 8b       	std	Z+23, r25	; 0x17
     634:	86 8b       	std	Z+22, r24	; 0x16
  _ucsrc = ucsrc;
     636:	82 ec       	ldi	r24, 0xC2	; 194
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	91 8f       	std	Z+25, r25	; 0x19
     63c:	80 8f       	std	Z+24, r24	; 0x18
  _udr = udr;
     63e:	86 ec       	ldi	r24, 0xC6	; 198
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	93 8f       	std	Z+27, r25	; 0x1b
     644:	82 8f       	std	Z+26, r24	; 0x1a
  _rxen = rxen;
     646:	44 e0       	ldi	r20, 0x04	; 4
     648:	44 8f       	std	Z+28, r20	; 0x1c
  _txen = txen;
     64a:	33 e0       	ldi	r19, 0x03	; 3
     64c:	35 8f       	std	Z+29, r19	; 0x1d
  _rxcie = rxcie;
     64e:	27 e0       	ldi	r18, 0x07	; 7
     650:	26 8f       	std	Z+30, r18	; 0x1e
  _udrie = udrie;
     652:	95 e0       	ldi	r25, 0x05	; 5
     654:	97 8f       	std	Z+31, r25	; 0x1f
  _u2x = u2x;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 a3       	std	Z+32, r24	; 0x20
     65a:	e4 e2       	ldi	r30, 0x24	; 36
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	13 82       	std	Z+3, r1	; 0x03
     660:	12 82       	std	Z+2, r1	; 0x02
     662:	c4 82       	std	Z+4, r12	; 0x04
     664:	d5 82       	std	Z+5, r13	; 0x05
     666:	e6 82       	std	Z+6, r14	; 0x06
     668:	f7 82       	std	Z+7, r15	; 0x07

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     66a:	71 83       	std	Z+1, r23	; 0x01
     66c:	60 83       	st	Z, r22
{
  _rx_buffer = rx_buffer;
     66e:	6c ea       	ldi	r22, 0xAC	; 172
     670:	71 e0       	ldi	r23, 0x01	; 1
     672:	75 87       	std	Z+13, r23	; 0x0d
     674:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
     676:	68 e6       	ldi	r22, 0x68	; 104
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	77 87       	std	Z+15, r23	; 0x0f
     67c:	66 87       	std	Z+14, r22	; 0x0e
  _ubrrh = ubrrh;
     67e:	6d ec       	ldi	r22, 0xCD	; 205
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	71 8b       	std	Z+17, r23	; 0x11
     684:	60 8b       	std	Z+16, r22	; 0x10
  _ubrrl = ubrrl;
     686:	6c ec       	ldi	r22, 0xCC	; 204
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	73 8b       	std	Z+19, r23	; 0x13
     68c:	62 8b       	std	Z+18, r22	; 0x12
  _ucsra = ucsra;
     68e:	68 ec       	ldi	r22, 0xC8	; 200
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	75 8b       	std	Z+21, r23	; 0x15
     694:	64 8b       	std	Z+20, r22	; 0x14
  _ucsrb = ucsrb;
     696:	69 ec       	ldi	r22, 0xC9	; 201
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	77 8b       	std	Z+23, r23	; 0x17
     69c:	66 8b       	std	Z+22, r22	; 0x16
  _ucsrc = ucsrc;
     69e:	6a ec       	ldi	r22, 0xCA	; 202
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	71 8f       	std	Z+25, r23	; 0x19
     6a4:	60 8f       	std	Z+24, r22	; 0x18
  _udr = udr;
     6a6:	6e ec       	ldi	r22, 0xCE	; 206
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	73 8f       	std	Z+27, r23	; 0x1b
     6ac:	62 8f       	std	Z+26, r22	; 0x1a
  _rxen = rxen;
     6ae:	44 8f       	std	Z+28, r20	; 0x1c
  _txen = txen;
     6b0:	35 8f       	std	Z+29, r19	; 0x1d
  _rxcie = rxcie;
     6b2:	26 8f       	std	Z+30, r18	; 0x1e
  _udrie = udrie;
     6b4:	97 8f       	std	Z+31, r25	; 0x1f
  _u2x = u2x;
     6b6:	80 a3       	std	Z+32, r24	; 0x20
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	08 95       	ret

000006c2 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}
     6c2:	8f 92       	push	r8
     6c4:	9f 92       	push	r9
     6c6:	af 92       	push	r10
     6c8:	bf 92       	push	r11
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	5c 01       	movw	r10, r24
     6dc:	7b 01       	movw	r14, r22
     6de:	4c 01       	movw	r8, r24
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	88 0e       	add	r8, r24
     6e4:	91 1c       	adc	r9, r1
     6e6:	65 01       	movw	r12, r10
     6e8:	e5 e0       	ldi	r30, 0x05	; 5
     6ea:	ce 0e       	add	r12, r30
     6ec:	d1 1c       	adc	r13, r1
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	10 e0       	ldi	r17, 0x00	; 0
     6f2:	f4 01       	movw	r30, r8
     6f4:	61 91       	ld	r22, Z+
     6f6:	4f 01       	movw	r8, r30
     6f8:	4a e0       	ldi	r20, 0x0A	; 10
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	c7 01       	movw	r24, r14
     6fe:	0e 94 75 04 	call	0x8ea	; 0x8ea <_ZN5Print5printEhi>
     702:	ec 01       	movw	r28, r24
     704:	6e e2       	ldi	r22, 0x2E	; 46
     706:	c7 01       	movw	r24, r14
     708:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN5Print5printEc>
     70c:	8c 0f       	add	r24, r28
     70e:	9d 1f       	adc	r25, r29
     710:	08 0f       	add	r16, r24
     712:	19 1f       	adc	r17, r25
     714:	8c 14       	cp	r8, r12
     716:	9d 04       	cpc	r9, r13
     718:	61 f7       	brne	.-40     	; 0x6f2 <_ZNK9IPAddress7printToER5Print+0x30>
     71a:	4a e0       	ldi	r20, 0x0A	; 10
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	f5 01       	movw	r30, r10
     720:	65 81       	ldd	r22, Z+5	; 0x05
     722:	c7 01       	movw	r24, r14
     724:	0e 94 75 04 	call	0x8ea	; 0x8ea <_ZN5Print5printEhi>
     728:	80 0f       	add	r24, r16
     72a:	91 1f       	adc	r25, r17
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	9f 90       	pop	r9
     742:	8f 90       	pop	r8
     744:	08 95       	ret

00000746 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     746:	e8 e7       	ldi	r30, 0x78	; 120
     748:	f2 e0       	ldi	r31, 0x02	; 2
     74a:	89 e1       	ldi	r24, 0x19	; 25
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	91 83       	std	Z+1, r25	; 0x01
     750:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
     752:	12 82       	std	Z+2, r1	; 0x02
    _address[1] = second_octet;
     754:	13 82       	std	Z+3, r1	; 0x03
    _address[2] = third_octet;
     756:	14 82       	std	Z+4, r1	; 0x04
    _address[3] = fourth_octet;
     758:	15 82       	std	Z+5, r1	; 0x05
     75a:	08 95       	ret

0000075c <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     75c:	08 95       	ret

0000075e <main>:

int main(void)
{
	init();
     75e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <init>

	initVariant();
     762:	0e 94 ae 03 	call	0x75c	; 0x75c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     766:	0e 94 92 10 	call	0x2124	; 0x2124 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     76a:	cc ed       	ldi	r28, 0xDC	; 220
     76c:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     76e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <loop>
		if (serialEventRun) serialEventRun();
     772:	20 97       	sbiw	r28, 0x00	; 0
     774:	e1 f3       	breq	.-8      	; 0x76e <main+0x10>
     776:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14serialEventRunv>
     77a:	f9 cf       	rjmp	.-14     	; 0x76e <main+0x10>

0000077c <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	41 15       	cp	r20, r1
     78e:	51 05       	cpc	r21, r1
     790:	b1 f0       	breq	.+44     	; 0x7be <_ZN5Print5writeEPKhj+0x42>
     792:	8c 01       	movw	r16, r24
     794:	e6 2e       	mov	r14, r22
     796:	f7 2e       	mov	r15, r23
     798:	ea 01       	movw	r28, r20
     79a:	c1 2c       	mov	r12, r1
     79c:	d1 2c       	mov	r13, r1
     79e:	d7 01       	movw	r26, r14
     7a0:	6d 91       	ld	r22, X+
     7a2:	7d 01       	movw	r14, r26
     7a4:	d8 01       	movw	r26, r16
     7a6:	ed 91       	ld	r30, X+
     7a8:	fc 91       	ld	r31, X
     7aa:	01 90       	ld	r0, Z+
     7ac:	f0 81       	ld	r31, Z
     7ae:	e0 2d       	mov	r30, r0
     7b0:	c8 01       	movw	r24, r16
     7b2:	09 95       	icall
     7b4:	c8 0e       	add	r12, r24
     7b6:	d9 1e       	adc	r13, r25
     7b8:	21 97       	sbiw	r28, 0x01	; 1
     7ba:	89 f7       	brne	.-30     	; 0x79e <_ZN5Print5writeEPKhj+0x22>
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <_ZN5Print5writeEPKhj+0x46>
     7be:	c1 2c       	mov	r12, r1
     7c0:	d1 2c       	mov	r13, r1
     7c2:	c6 01       	movw	r24, r12
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	08 95       	ret

000007d6 <_ZN5Print5printEc>:
     7d6:	dc 01       	movw	r26, r24
     7d8:	ed 91       	ld	r30, X+
     7da:	fc 91       	ld	r31, X
     7dc:	01 90       	ld	r0, Z+
     7de:	f0 81       	ld	r31, Z
     7e0:	e0 2d       	mov	r30, r0
     7e2:	09 95       	icall
     7e4:	08 95       	ret

000007e6 <_ZN5Print11printNumberEmh>:
     7e6:	4f 92       	push	r4
     7e8:	5f 92       	push	r5
     7ea:	6f 92       	push	r6
     7ec:	7f 92       	push	r7
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	a1 97       	sbiw	r28, 0x21	; 33
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	5c 01       	movw	r10, r24
     816:	6a 01       	movw	r12, r20
     818:	7b 01       	movw	r14, r22
     81a:	92 2e       	mov	r9, r18
     81c:	19 a2       	std	Y+33, r1	; 0x21
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	82 17       	cp	r24, r18
     822:	20 f0       	brcs	.+8      	; 0x82c <_ZN5Print11printNumberEmh+0x46>
     824:	0f 2e       	mov	r0, r31
     826:	fa e0       	ldi	r31, 0x0A	; 10
     828:	9f 2e       	mov	r9, r31
     82a:	f0 2d       	mov	r31, r0
     82c:	8e 01       	movw	r16, r28
     82e:	0f 5d       	subi	r16, 0xDF	; 223
     830:	1f 4f       	sbci	r17, 0xFF	; 255
     832:	49 2c       	mov	r4, r9
     834:	51 2c       	mov	r5, r1
     836:	61 2c       	mov	r6, r1
     838:	71 2c       	mov	r7, r1
     83a:	c7 01       	movw	r24, r14
     83c:	b6 01       	movw	r22, r12
     83e:	a3 01       	movw	r20, r6
     840:	92 01       	movw	r18, r4
     842:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__udivmodsi4>
     846:	8c 2d       	mov	r24, r12
     848:	92 9e       	mul	r9, r18
     84a:	80 19       	sub	r24, r0
     84c:	11 24       	eor	r1, r1
     84e:	01 50       	subi	r16, 0x01	; 1
     850:	11 09       	sbc	r17, r1
     852:	8a 30       	cpi	r24, 0x0A	; 10
     854:	10 f4       	brcc	.+4      	; 0x85a <_ZN5Print11printNumberEmh+0x74>
     856:	80 5d       	subi	r24, 0xD0	; 208
     858:	01 c0       	rjmp	.+2      	; 0x85c <_ZN5Print11printNumberEmh+0x76>
     85a:	89 5c       	subi	r24, 0xC9	; 201
     85c:	d8 01       	movw	r26, r16
     85e:	8c 93       	st	X, r24
     860:	c2 2e       	mov	r12, r18
     862:	d3 2e       	mov	r13, r19
     864:	e4 2e       	mov	r14, r20
     866:	f5 2e       	mov	r15, r21
     868:	c1 14       	cp	r12, r1
     86a:	d1 04       	cpc	r13, r1
     86c:	e1 04       	cpc	r14, r1
     86e:	f1 04       	cpc	r15, r1
     870:	21 f7       	brne	.-56     	; 0x83a <_ZN5Print11printNumberEmh+0x54>
     872:	01 15       	cp	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	91 f0       	breq	.+36     	; 0x89c <_ZN5Print11printNumberEmh+0xb6>
     878:	f8 01       	movw	r30, r16
     87a:	01 90       	ld	r0, Z+
     87c:	00 20       	and	r0, r0
     87e:	e9 f7       	brne	.-6      	; 0x87a <_ZN5Print11printNumberEmh+0x94>
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	af 01       	movw	r20, r30
     884:	40 1b       	sub	r20, r16
     886:	51 0b       	sbc	r21, r17
     888:	d5 01       	movw	r26, r10
     88a:	ed 91       	ld	r30, X+
     88c:	fc 91       	ld	r31, X
     88e:	02 80       	ldd	r0, Z+2	; 0x02
     890:	f3 81       	ldd	r31, Z+3	; 0x03
     892:	e0 2d       	mov	r30, r0
     894:	b8 01       	movw	r22, r16
     896:	c5 01       	movw	r24, r10
     898:	09 95       	icall
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <_ZN5Print11printNumberEmh+0xba>
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	a1 96       	adiw	r28, 0x21	; 33
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	bf 90       	pop	r11
     8be:	af 90       	pop	r10
     8c0:	9f 90       	pop	r9
     8c2:	7f 90       	pop	r7
     8c4:	6f 90       	pop	r6
     8c6:	5f 90       	pop	r5
     8c8:	4f 90       	pop	r4
     8ca:	08 95       	ret

000008cc <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     8cc:	21 15       	cp	r18, r1
     8ce:	31 05       	cpc	r19, r1
     8d0:	49 f4       	brne	.+18     	; 0x8e4 <_ZN5Print5printEmi+0x18>
     8d2:	dc 01       	movw	r26, r24
     8d4:	ed 91       	ld	r30, X+
     8d6:	fc 91       	ld	r31, X
     8d8:	01 90       	ld	r0, Z+
     8da:	f0 81       	ld	r31, Z
     8dc:	e0 2d       	mov	r30, r0
     8de:	64 2f       	mov	r22, r20
     8e0:	09 95       	icall
     8e2:	08 95       	ret
  else return printNumber(n, base);
     8e4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN5Print11printNumberEmh>
}
     8e8:	08 95       	ret

000008ea <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     8ea:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     8ec:	46 2f       	mov	r20, r22
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN5Print5printEmi>
}
     8f8:	08 95       	ret

000008fa <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	a1 f0       	breq	.+40     	; 0x926 <__stack+0x27>
     8fe:	28 f4       	brcc	.+10     	; 0x90a <__stack+0xb>
     900:	88 23       	and	r24, r24
     902:	41 f0       	breq	.+16     	; 0x914 <__stack+0x15>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	49 f0       	breq	.+18     	; 0x91a <__stack+0x1b>
     908:	08 95       	ret
     90a:	83 30       	cpi	r24, 0x03	; 3
     90c:	e9 f0       	breq	.+58     	; 0x948 <__stack+0x49>
     90e:	84 30       	cpi	r24, 0x04	; 4
     910:	f1 f0       	breq	.+60     	; 0x94e <__stack+0x4f>
     912:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     914:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     918:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     91a:	ef e6       	ldi	r30, 0x6F	; 111
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	8d 7f       	andi	r24, 0xFD	; 253
     922:	80 83       	st	Z, r24
      break;
     924:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     926:	e0 e7       	ldi	r30, 0x70	; 112
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8d 7f       	andi	r24, 0xFD	; 253
     92e:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     936:	e1 eb       	ldi	r30, 0xB1	; 177
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	88 7f       	andi	r24, 0xF8	; 248
     93e:	84 60       	ori	r24, 0x04	; 4
     940:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     942:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
      #endif
      break;
     946:	08 95       	ret

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
     948:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
      break;
     94c:	08 95       	ret
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
     94e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
     952:	08 95       	ret

00000954 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     954:	cf 93       	push	r28
     956:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     958:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     95c:	8c 13       	cpse	r24, r28
     95e:	08 c0       	rjmp	.+16     	; 0x970 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     960:	ec ec       	ldi	r30, 0xCC	; 204
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	e4 91       	lpm	r30, Z
     966:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
     968:	9f ef       	ldi	r25, 0xFF	; 255
     96a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
     96e:	01 c0       	rjmp	.+2      	; 0x972 <_Z6noToneh+0x1e>
     970:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
     972:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	8c 2f       	mov	r24, r28
     97a:	0e 94 f3 06 	call	0xde6	; 0xde6 <digitalWrite>
}
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     9a4:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <timer2_toggle_count>
     9a8:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <timer2_toggle_count+0x1>
     9ac:	a0 91 83 02 	lds	r26, 0x0283	; 0x800283 <timer2_toggle_count+0x2>
     9b0:	b0 91 84 02 	lds	r27, 0x0284	; 0x800284 <timer2_toggle_count+0x3>
     9b4:	89 2b       	or	r24, r25
     9b6:	8a 2b       	or	r24, r26
     9b8:	8b 2b       	or	r24, r27
     9ba:	51 f1       	breq	.+84     	; 0xa10 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     9bc:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <timer2_pin_mask>
     9c0:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <timer2_pin_port>
     9c4:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <timer2_pin_port+0x1>
     9c8:	90 81       	ld	r25, Z
     9ca:	89 27       	eor	r24, r25
     9cc:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     9ce:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <timer2_toggle_count>
     9d2:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <timer2_toggle_count+0x1>
     9d6:	a0 91 83 02 	lds	r26, 0x0283	; 0x800283 <timer2_toggle_count+0x2>
     9da:	b0 91 84 02 	lds	r27, 0x0284	; 0x800284 <timer2_toggle_count+0x3>
     9de:	18 16       	cp	r1, r24
     9e0:	19 06       	cpc	r1, r25
     9e2:	1a 06       	cpc	r1, r26
     9e4:	1b 06       	cpc	r1, r27
     9e6:	c4 f4       	brge	.+48     	; 0xa18 <__vector_7+0x96>
      timer2_toggle_count--;
     9e8:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <timer2_toggle_count>
     9ec:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <timer2_toggle_count+0x1>
     9f0:	a0 91 83 02 	lds	r26, 0x0283	; 0x800283 <timer2_toggle_count+0x2>
     9f4:	b0 91 84 02 	lds	r27, 0x0284	; 0x800284 <timer2_toggle_count+0x3>
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	a1 09       	sbc	r26, r1
     9fc:	b1 09       	sbc	r27, r1
     9fe:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <timer2_toggle_count>
     a02:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <timer2_toggle_count+0x1>
     a06:	a0 93 83 02 	sts	0x0283, r26	; 0x800283 <timer2_toggle_count+0x2>
     a0a:	b0 93 84 02 	sts	0x0284, r27	; 0x800284 <timer2_toggle_count+0x3>
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     a10:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a14:	0e 94 aa 04 	call	0x954	; 0x954 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f 90       	pop	r0
     a36:	1f 90       	pop	r1
     a38:	18 95       	reti

00000a3a <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     a3a:	1f 92       	push	r1
     a3c:	0f 92       	push	r0
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     a5c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <intFunc>
     a60:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <intFunc+0x1>
     a64:	89 2b       	or	r24, r25
     a66:	29 f0       	breq	.+10     	; 0xa72 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     a68:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <intFunc>
     a6c:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <intFunc+0x1>
     a70:	09 95       	icall
}
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	bf 91       	pop	r27
     a78:	af 91       	pop	r26
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	7f 91       	pop	r23
     a80:	6f 91       	pop	r22
     a82:	5f 91       	pop	r21
     a84:	4f 91       	pop	r20
     a86:	3f 91       	pop	r19
     a88:	2f 91       	pop	r18
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0f 90       	pop	r0
     a90:	1f 90       	pop	r1
     a92:	18 95       	reti

00000a94 <__vector_2>:

ISR(INT1_vect) {
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	2f 93       	push	r18
     aa0:	3f 93       	push	r19
     aa2:	4f 93       	push	r20
     aa4:	5f 93       	push	r21
     aa6:	6f 93       	push	r22
     aa8:	7f 93       	push	r23
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	af 93       	push	r26
     ab0:	bf 93       	push	r27
     ab2:	ef 93       	push	r30
     ab4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     ab6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <intFunc+0x2>
     aba:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <intFunc+0x3>
     abe:	89 2b       	or	r24, r25
     ac0:	29 f0       	breq	.+10     	; 0xacc <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     ac2:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <intFunc+0x2>
     ac6:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <intFunc+0x3>
     aca:	09 95       	icall
}
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	0f 92       	push	r0
     af6:	11 24       	eor	r1, r1
     af8:	2f 93       	push	r18
     afa:	3f 93       	push	r19
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <timer0_millis>
     b08:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <timer0_millis+0x1>
     b0c:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <timer0_millis+0x2>
     b10:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <timer0_millis+0x3>
     b14:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <timer0_fract>
     b18:	23 e0       	ldi	r18, 0x03	; 3
     b1a:	23 0f       	add	r18, r19
     b1c:	2d 37       	cpi	r18, 0x7D	; 125
     b1e:	20 f4       	brcc	.+8      	; 0xb28 <__vector_16+0x3a>
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	a1 1d       	adc	r26, r1
     b24:	b1 1d       	adc	r27, r1
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <__vector_16+0x44>
     b28:	26 e8       	ldi	r18, 0x86	; 134
     b2a:	23 0f       	add	r18, r19
     b2c:	02 96       	adiw	r24, 0x02	; 2
     b2e:	a1 1d       	adc	r26, r1
     b30:	b1 1d       	adc	r27, r1
     b32:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <timer0_fract>
     b36:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <timer0_millis>
     b3a:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <timer0_millis+0x1>
     b3e:	a0 93 8c 02 	sts	0x028C, r26	; 0x80028c <timer0_millis+0x2>
     b42:	b0 93 8d 02 	sts	0x028D, r27	; 0x80028d <timer0_millis+0x3>
     b46:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <timer0_overflow_count>
     b4a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <timer0_overflow_count+0x1>
     b4e:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <timer0_overflow_count+0x2>
     b52:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <timer0_overflow_count+0x3>
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	a1 1d       	adc	r26, r1
     b5a:	b1 1d       	adc	r27, r1
     b5c:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <timer0_overflow_count>
     b60:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <timer0_overflow_count+0x1>
     b64:	a0 93 90 02 	sts	0x0290, r26	; 0x800290 <timer0_overflow_count+0x2>
     b68:	b0 93 91 02 	sts	0x0291, r27	; 0x800291 <timer0_overflow_count+0x3>
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <millis>:
     b82:	2f b7       	in	r18, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <timer0_millis>
     b8a:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <timer0_millis+0x1>
     b8e:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <timer0_millis+0x2>
     b92:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <timer0_millis+0x3>
     b96:	2f bf       	out	0x3f, r18	; 63
     b98:	08 95       	ret

00000b9a <micros>:
     b9a:	3f b7       	in	r19, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <timer0_overflow_count>
     ba2:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <timer0_overflow_count+0x1>
     ba6:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <timer0_overflow_count+0x2>
     baa:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <timer0_overflow_count+0x3>
     bae:	26 b5       	in	r18, 0x26	; 38
     bb0:	a8 9b       	sbis	0x15, 0	; 21
     bb2:	05 c0       	rjmp	.+10     	; 0xbbe <micros+0x24>
     bb4:	2f 3f       	cpi	r18, 0xFF	; 255
     bb6:	19 f0       	breq	.+6      	; 0xbbe <micros+0x24>
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	a1 1d       	adc	r26, r1
     bbc:	b1 1d       	adc	r27, r1
     bbe:	3f bf       	out	0x3f, r19	; 63
     bc0:	ba 2f       	mov	r27, r26
     bc2:	a9 2f       	mov	r26, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	88 27       	eor	r24, r24
     bc8:	82 0f       	add	r24, r18
     bca:	91 1d       	adc	r25, r1
     bcc:	a1 1d       	adc	r26, r1
     bce:	b1 1d       	adc	r27, r1
     bd0:	bc 01       	movw	r22, r24
     bd2:	cd 01       	movw	r24, r26
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	88 1f       	adc	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	66 0f       	add	r22, r22
     bde:	77 1f       	adc	r23, r23
     be0:	88 1f       	adc	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	08 95       	ret

00000be6 <delay>:
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	6b 01       	movw	r12, r22
     bf4:	7c 01       	movw	r14, r24
     bf6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <micros>
     bfa:	eb 01       	movw	r28, r22
     bfc:	c1 14       	cp	r12, r1
     bfe:	d1 04       	cpc	r13, r1
     c00:	e1 04       	cpc	r14, r1
     c02:	f1 04       	cpc	r15, r1
     c04:	99 f0       	breq	.+38     	; 0xc2c <delay+0x46>
     c06:	0e 94 cd 05 	call	0xb9a	; 0xb9a <micros>
     c0a:	6c 1b       	sub	r22, r28
     c0c:	7d 0b       	sbc	r23, r29
     c0e:	68 3e       	cpi	r22, 0xE8	; 232
     c10:	73 40       	sbci	r23, 0x03	; 3
     c12:	38 f0       	brcs	.+14     	; 0xc22 <delay+0x3c>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	c8 1a       	sub	r12, r24
     c18:	d1 08       	sbc	r13, r1
     c1a:	e1 08       	sbc	r14, r1
     c1c:	f1 08       	sbc	r15, r1
     c1e:	c8 51       	subi	r28, 0x18	; 24
     c20:	dc 4f       	sbci	r29, 0xFC	; 252
     c22:	c1 14       	cp	r12, r1
     c24:	d1 04       	cpc	r13, r1
     c26:	e1 04       	cpc	r14, r1
     c28:	f1 04       	cpc	r15, r1
     c2a:	69 f7       	brne	.-38     	; 0xc06 <delay+0x20>
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	08 95       	ret

00000c3a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     c3a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     c3c:	84 b5       	in	r24, 0x24	; 36
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     c42:	84 b5       	in	r24, 0x24	; 36
     c44:	81 60       	ori	r24, 0x01	; 1
     c46:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     c48:	85 b5       	in	r24, 0x25	; 37
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     c4e:	85 b5       	in	r24, 0x25	; 37
     c50:	81 60       	ori	r24, 0x01	; 1
     c52:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     c54:	ee e6       	ldi	r30, 0x6E	; 110
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	81 60       	ori	r24, 0x01	; 1
     c5c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     c5e:	e1 e8       	ldi	r30, 0x81	; 129
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     c64:	80 81       	ld	r24, Z
     c66:	82 60       	ori	r24, 0x02	; 2
     c68:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     c6a:	80 81       	ld	r24, Z
     c6c:	81 60       	ori	r24, 0x01	; 1
     c6e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     c70:	e0 e8       	ldi	r30, 0x80	; 128
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	81 60       	ori	r24, 0x01	; 1
     c78:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     c7a:	e1 eb       	ldi	r30, 0xB1	; 177
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	84 60       	ori	r24, 0x04	; 4
     c82:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     c84:	e0 eb       	ldi	r30, 0xB0	; 176
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     c8e:	e1 e9       	ldi	r30, 0x91	; 145
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	82 60       	ori	r24, 0x02	; 2
     c96:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     c98:	80 81       	ld	r24, Z
     c9a:	81 60       	ori	r24, 0x01	; 1
     c9c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     c9e:	e0 e9       	ldi	r30, 0x90	; 144
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     ca8:	e1 ea       	ldi	r30, 0xA1	; 161
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     cb2:	80 81       	ld	r24, Z
     cb4:	81 60       	ori	r24, 0x01	; 1
     cb6:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     cb8:	e0 ea       	ldi	r30, 0xA0	; 160
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	81 60       	ori	r24, 0x01	; 1
     cc0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     cc2:	ea e7       	ldi	r30, 0x7A	; 122
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	84 60       	ori	r24, 0x04	; 4
     cca:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     ccc:	80 81       	ld	r24, Z
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     cd2:	80 81       	ld	r24, Z
     cd4:	81 60       	ori	r24, 0x01	; 1
     cd6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     cd8:	80 81       	ld	r24, Z
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     cde:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     ce2:	08 95       	ret

00000ce4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	ec 30       	cpi	r30, 0x0C	; 12
     cec:	f1 05       	cpc	r31, r1
     cee:	d8 f5       	brcc	.+118    	; 0xd66 <turnOffPWM+0x82>
     cf0:	e6 5a       	subi	r30, 0xA6	; 166
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	0c 94 05 11 	jmp	0x220a	; 0x220a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     cf8:	e0 e8       	ldi	r30, 0x80	; 128
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8f 77       	andi	r24, 0x7F	; 127
     d00:	80 83       	st	Z, r24
     d02:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     d04:	e0 e8       	ldi	r30, 0x80	; 128
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	80 83       	st	Z, r24
     d0e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     d10:	84 b5       	in	r24, 0x24	; 36
     d12:	8f 77       	andi	r24, 0x7F	; 127
     d14:	84 bd       	out	0x24, r24	; 36
     d16:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     d18:	84 b5       	in	r24, 0x24	; 36
     d1a:	8f 7d       	andi	r24, 0xDF	; 223
     d1c:	84 bd       	out	0x24, r24	; 36
     d1e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     d20:	e0 eb       	ldi	r30, 0xB0	; 176
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8f 77       	andi	r24, 0x7F	; 127
     d28:	80 83       	st	Z, r24
     d2a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     d2c:	e0 eb       	ldi	r30, 0xB0	; 176
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7d       	andi	r24, 0xDF	; 223
     d34:	80 83       	st	Z, r24
     d36:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     d38:	e0 e9       	ldi	r30, 0x90	; 144
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 77       	andi	r24, 0x7F	; 127
     d40:	80 83       	st	Z, r24
     d42:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     d44:	e0 e9       	ldi	r30, 0x90	; 144
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8f 7d       	andi	r24, 0xDF	; 223
     d4c:	80 83       	st	Z, r24
     d4e:	08 95       	ret
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     d50:	e0 ea       	ldi	r30, 0xA0	; 160
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8f 77       	andi	r24, 0x7F	; 127
     d58:	80 83       	st	Z, r24
     d5a:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     d5c:	e0 ea       	ldi	r30, 0xA0	; 160
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8f 7d       	andi	r24, 0xDF	; 223
     d64:	80 83       	st	Z, r24
     d66:	08 95       	ret

00000d68 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	fc 01       	movw	r30, r24
     d70:	ef 51       	subi	r30, 0x1F	; 31
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     d76:	fc 01       	movw	r30, r24
     d78:	eb 50       	subi	r30, 0x0B	; 11
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     d7e:	88 23       	and	r24, r24
     d80:	79 f1       	breq	.+94     	; 0xde0 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	fc 01       	movw	r30, r24
     d8a:	ed 5e       	subi	r30, 0xED	; 237
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	a5 91       	lpm	r26, Z+
     d90:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     d92:	fc 01       	movw	r30, r24
     d94:	e7 5f       	subi	r30, 0xF7	; 247
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	c5 91       	lpm	r28, Z+
     d9a:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     d9c:	61 11       	cpse	r22, r1
     d9e:	0c c0       	rjmp	.+24     	; 0xdb8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     da0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     da2:	f8 94       	cli
		*reg &= ~bit;
     da4:	8c 91       	ld	r24, X
     da6:	e2 2f       	mov	r30, r18
     da8:	e0 95       	com	r30
     daa:	8e 23       	and	r24, r30
     dac:	8c 93       	st	X, r24
		*out &= ~bit;
     dae:	28 81       	ld	r18, Y
     db0:	e2 23       	and	r30, r18
     db2:	e8 83       	st	Y, r30
		SREG = oldSREG;
     db4:	9f bf       	out	0x3f, r25	; 63
     db6:	14 c0       	rjmp	.+40     	; 0xde0 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     db8:	62 30       	cpi	r22, 0x02	; 2
     dba:	61 f4       	brne	.+24     	; 0xdd4 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     dbc:	9f b7       	in	r25, 0x3f	; 63
                cli();
     dbe:	f8 94       	cli
		*reg &= ~bit;
     dc0:	3c 91       	ld	r19, X
     dc2:	82 2f       	mov	r24, r18
     dc4:	80 95       	com	r24
     dc6:	83 23       	and	r24, r19
     dc8:	8c 93       	st	X, r24
		*out |= bit;
     dca:	e8 81       	ld	r30, Y
     dcc:	e2 2b       	or	r30, r18
     dce:	e8 83       	st	Y, r30
		SREG = oldSREG;
     dd0:	9f bf       	out	0x3f, r25	; 63
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     dd4:	8f b7       	in	r24, 0x3f	; 63
                cli();
     dd6:	f8 94       	cli
		*reg |= bit;
     dd8:	ec 91       	ld	r30, X
     dda:	e2 2b       	or	r30, r18
     ddc:	ec 93       	st	X, r30
		SREG = oldSREG;
     dde:	8f bf       	out	0x3f, r24	; 63
	}
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	f9 01       	movw	r30, r18
     df2:	e3 53       	subi	r30, 0x33	; 51
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     df8:	f9 01       	movw	r30, r18
     dfa:	ef 51       	subi	r30, 0x1F	; 31
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     e00:	f9 01       	movw	r30, r18
     e02:	eb 50       	subi	r30, 0x0B	; 11
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     e08:	cc 23       	and	r28, r28
     e0a:	d1 f0       	breq	.+52     	; 0xe40 <digitalWrite+0x5a>
     e0c:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e0e:	81 11       	cpse	r24, r1
     e10:	0e 94 72 06 	call	0xce4	; 0xce4 <turnOffPWM>

	out = portOutputRegister(port);
     e14:	ec 2f       	mov	r30, r28
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	e7 5f       	subi	r30, 0xF7	; 247
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	a5 91       	lpm	r26, Z+
     e22:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     e24:	8f b7       	in	r24, 0x3f	; 63
	cli();
     e26:	f8 94       	cli

	if (val == LOW) {
     e28:	d1 11       	cpse	r29, r1
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <digitalWrite+0x52>
		*out &= ~bit;
     e2c:	9c 91       	ld	r25, X
     e2e:	e1 2f       	mov	r30, r17
     e30:	e0 95       	com	r30
     e32:	e9 23       	and	r30, r25
     e34:	ec 93       	st	X, r30
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <digitalWrite+0x58>
	} else {
		*out |= bit;
     e38:	ec 91       	ld	r30, X
     e3a:	e1 2b       	or	r30, r17
     e3c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     e3e:	8f bf       	out	0x3f, r24	; 63
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	08 95       	ret

00000e48 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     e48:	e2 e9       	ldi	r30, 0x92	; 146
     e4a:	f2 e0       	ldi	r31, 0x02	; 2
     e4c:	15 82       	std	Z+5, r1	; 0x05
     e4e:	16 82       	std	Z+6, r1	; 0x06
     e50:	11 86       	std	Z+9, r1	; 0x09
     e52:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	84 87       	std	Z+12, r24	; 0x0c
     e5e:	95 87       	std	Z+13, r25	; 0x0d
     e60:	a6 87       	std	Z+14, r26	; 0x0e
     e62:	b7 87       	std	Z+15, r27	; 0x0f
     e64:	13 a2       	std	Z+35, r1	; 0x23
     e66:	15 a6       	std	Z+45, r1	; 0x2d
     e68:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     e6a:	8f e1       	ldi	r24, 0x1F	; 31
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	93 a7       	std	Z+43, r25	; 0x2b
     e70:	82 a7       	std	Z+42, r24	; 0x2a
     e72:	17 a6       	std	Z+47, r1	; 0x2f
     e74:	08 95       	ret

00000e76 <_ZL7spiSendh>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
     e76:	8e bd       	out	0x2e, r24	; 46
     e78:	00 00       	nop
     e7a:	0d b4       	in	r0, 0x2d	; 45
     e7c:	07 fe       	sbrs	r0, 7
     e7e:	fd cf       	rjmp	.-6      	; 0xe7a <_ZL7spiSendh+0x4>
     e80:	8e b5       	in	r24, 0x2e	; 46
     e82:	08 95       	ret

00000e84 <_ZL6spiRecv>:
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	8e bd       	out	0x2e, r24	; 46
     e88:	00 00       	nop
     e8a:	0d b4       	in	r0, 0x2d	; 45
     e8c:	07 fe       	sbrs	r0, 7
     e8e:	fd cf       	rjmp	.-6      	; 0xe8a <_ZL6spiRecv+0x6>
     e90:	8e b5       	in	r24, 0x2e	; 46
     e92:	08 95       	ret

00000e94 <_ZN7Sd2Card14chipSelectHighEv>:
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	fc 01       	movw	r30, r24
     e98:	84 81       	ldd	r24, Z+4	; 0x04
     e9a:	0e 94 f3 06 	call	0xde6	; 0xde6 <digitalWrite>
     e9e:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZL20chip_select_asserted>
     ea2:	88 23       	and	r24, r24
     ea4:	a1 f0       	breq	.+40     	; 0xece <_ZN7Sd2Card14chipSelectHighEv+0x3a>
     ea6:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <_ZL20chip_select_asserted>
     eaa:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <_ZN8SPIClass13interruptModeE>
     eae:	88 23       	and	r24, r24
     eb0:	71 f0       	breq	.+28     	; 0xece <_ZN7Sd2Card14chipSelectHighEv+0x3a>
     eb2:	9f b7       	in	r25, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <_ZN8SPIClass13interruptModeE>
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	29 f4       	brne	.+10     	; 0xec8 <_ZN7Sd2Card14chipSelectHighEv+0x34>
     ebe:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZN8SPIClass13interruptSaveE>
     ec2:	8d bb       	out	0x1d, r24	; 29
     ec4:	9f bf       	out	0x3f, r25	; 63
     ec6:	08 95       	ret
     ec8:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <_ZN8SPIClass13interruptSaveE>
     ecc:	8f bf       	out	0x3f, r24	; 63
     ece:	08 95       	ret

00000ed0 <_ZN7Sd2Card13chipSelectLowEv>:
     ed0:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <_ZL20chip_select_asserted>
     ed4:	21 11       	cpse	r18, r1
     ed6:	20 c0       	rjmp	.+64     	; 0xf18 <_ZN7Sd2Card13chipSelectLowEv+0x48>
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <_ZL20chip_select_asserted>
     ede:	ec ed       	ldi	r30, 0xDC	; 220
     ee0:	f2 e0       	ldi	r31, 0x02	; 2
     ee2:	30 81       	ld	r19, Z
     ee4:	21 81       	ldd	r18, Z+1	; 0x01
     ee6:	40 91 2d 05 	lds	r20, 0x052D	; 0x80052d <_ZN8SPIClass13interruptModeE>
     eea:	44 23       	and	r20, r20
     eec:	99 f0       	breq	.+38     	; 0xf14 <_ZN7Sd2Card13chipSelectLowEv+0x44>
     eee:	4f b7       	in	r20, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	50 91 2d 05 	lds	r21, 0x052D	; 0x80052d <_ZN8SPIClass13interruptModeE>
     ef6:	51 30       	cpi	r21, 0x01	; 1
     ef8:	59 f4       	brne	.+22     	; 0xf10 <_ZN7Sd2Card13chipSelectLowEv+0x40>
     efa:	5d b3       	in	r21, 0x1d	; 29
     efc:	50 93 2b 05 	sts	0x052B, r21	; 0x80052b <_ZN8SPIClass13interruptSaveE>
     f00:	6d b3       	in	r22, 0x1d	; 29
     f02:	50 91 2c 05 	lds	r21, 0x052C	; 0x80052c <_ZN8SPIClass13interruptMaskE>
     f06:	50 95       	com	r21
     f08:	56 23       	and	r21, r22
     f0a:	5d bb       	out	0x1d, r21	; 29
     f0c:	4f bf       	out	0x3f, r20	; 63
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <_ZN7Sd2Card13chipSelectLowEv+0x44>
     f10:	40 93 2b 05 	sts	0x052B, r20	; 0x80052b <_ZN8SPIClass13interruptSaveE>
     f14:	3c bd       	out	0x2c, r19	; 44
     f16:	2d bd       	out	0x2d, r18	; 45
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	fc 01       	movw	r30, r24
     f1c:	84 81       	ldd	r24, Z+4	; 0x04
     f1e:	0e 94 f3 06 	call	0xde6	; 0xde6 <digitalWrite>
     f22:	08 95       	ret

00000f24 <_ZN7Sd2Card7readEndEv>:
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	fc 01       	movw	r30, r24
     f2a:	26 81       	ldd	r18, Z+6	; 0x06
     f2c:	22 23       	and	r18, r18
     f2e:	d1 f0       	breq	.+52     	; 0xf64 <_ZN7Sd2Card7readEndEv+0x40>
     f30:	ec 01       	movw	r28, r24
     f32:	87 81       	ldd	r24, Z+7	; 0x07
     f34:	90 85       	ldd	r25, Z+8	; 0x08
     f36:	9c 01       	movw	r18, r24
     f38:	2f 5f       	subi	r18, 0xFF	; 255
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	30 87       	std	Z+8, r19	; 0x08
     f3e:	27 83       	std	Z+7, r18	; 0x07
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	92 40       	sbci	r25, 0x02	; 2
     f44:	58 f4       	brcc	.+22     	; 0xf5c <_ZN7Sd2Card7readEndEv+0x38>
     f46:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZL6spiRecv>
     f4a:	2f 81       	ldd	r18, Y+7	; 0x07
     f4c:	38 85       	ldd	r19, Y+8	; 0x08
     f4e:	c9 01       	movw	r24, r18
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	8f 83       	std	Y+7, r24	; 0x07
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	32 40       	sbci	r19, 0x02	; 2
     f5a:	a8 f3       	brcs	.-22     	; 0xf46 <_ZN7Sd2Card7readEndEv+0x22>
     f5c:	ce 01       	movw	r24, r28
     f5e:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN7Sd2Card14chipSelectHighEv>
     f62:	1e 82       	std	Y+6, r1	; 0x06
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <_ZN7Sd2Card11waitNotBusyEj>:
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	eb 01       	movw	r28, r22
     f74:	0e 94 c1 05 	call	0xb82	; 0xb82 <millis>
     f78:	8b 01       	movw	r16, r22
     f7a:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZL6spiRecv>
     f7e:	8f 3f       	cpi	r24, 0xFF	; 255
     f80:	49 f0       	breq	.+18     	; 0xf94 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
     f82:	0e 94 c1 05 	call	0xb82	; 0xb82 <millis>
     f86:	60 1b       	sub	r22, r16
     f88:	71 0b       	sbc	r23, r17
     f8a:	6c 17       	cp	r22, r28
     f8c:	7d 07       	cpc	r23, r29
     f8e:	a8 f3       	brcs	.-22     	; 0xf7a <_ZN7Sd2Card11waitNotBusyEj+0x10>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <_ZN7Sd2Card11cardCommandEhm>:
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	8c 01       	movw	r16, r24
     fb4:	b6 2e       	mov	r11, r22
     fb6:	69 01       	movw	r12, r18
     fb8:	7a 01       	movw	r14, r20
     fba:	0e 94 92 07 	call	0xf24	; 0xf24 <_ZN7Sd2Card7readEndEv>
     fbe:	c8 01       	movw	r24, r16
     fc0:	0e 94 68 07 	call	0xed0	; 0xed0 <_ZN7Sd2Card13chipSelectLowEv>
     fc4:	6c e2       	ldi	r22, 0x2C	; 44
     fc6:	71 e0       	ldi	r23, 0x01	; 1
     fc8:	c8 01       	movw	r24, r16
     fca:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN7Sd2Card11waitNotBusyEj>
     fce:	8b 2d       	mov	r24, r11
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZL7spiSendh>
     fd6:	c8 e1       	ldi	r28, 0x18	; 24
     fd8:	d0 e0       	ldi	r29, 0x00	; 0
     fda:	d7 01       	movw	r26, r14
     fdc:	c6 01       	movw	r24, r12
     fde:	0c 2e       	mov	r0, r28
     fe0:	04 c0       	rjmp	.+8      	; 0xfea <_ZN7Sd2Card11cardCommandEhm+0x4a>
     fe2:	b6 95       	lsr	r27
     fe4:	a7 95       	ror	r26
     fe6:	97 95       	ror	r25
     fe8:	87 95       	ror	r24
     fea:	0a 94       	dec	r0
     fec:	d2 f7       	brpl	.-12     	; 0xfe2 <_ZN7Sd2Card11cardCommandEhm+0x42>
     fee:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZL7spiSendh>
     ff2:	28 97       	sbiw	r28, 0x08	; 8
     ff4:	c8 3f       	cpi	r28, 0xF8	; 248
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	d8 07       	cpc	r29, r24
     ffa:	79 f7       	brne	.-34     	; 0xfda <_ZN7Sd2Card11cardCommandEhm+0x3a>
     ffc:	bb 20       	and	r11, r11
     ffe:	29 f0       	breq	.+10     	; 0x100a <_ZN7Sd2Card11cardCommandEhm+0x6a>
    1000:	e8 e0       	ldi	r30, 0x08	; 8
    1002:	be 12       	cpse	r11, r30
    1004:	04 c0       	rjmp	.+8      	; 0x100e <_ZN7Sd2Card11cardCommandEhm+0x6e>
    1006:	87 e8       	ldi	r24, 0x87	; 135
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <_ZN7Sd2Card11cardCommandEhm+0x70>
    100a:	85 e9       	ldi	r24, 0x95	; 149
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <_ZN7Sd2Card11cardCommandEhm+0x70>
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZL7spiSendh>
    1014:	c0 e0       	ldi	r28, 0x00	; 0
    1016:	01 c0       	rjmp	.+2      	; 0x101a <_ZN7Sd2Card11cardCommandEhm+0x7a>
    1018:	cf 5f       	subi	r28, 0xFF	; 255
    101a:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZL6spiRecv>
    101e:	f8 01       	movw	r30, r16
    1020:	82 87       	std	Z+10, r24	; 0x0a
    1022:	88 23       	and	r24, r24
    1024:	14 f4       	brge	.+4      	; 0x102a <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1026:	cf 3f       	cpi	r28, 0xFF	; 255
    1028:	b9 f7       	brne	.-18     	; 0x1018 <_ZN7Sd2Card11cardCommandEhm+0x78>
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	08 95       	ret

0000103e <_ZN7Sd2Card14waitStartBlockEv>:
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	ec 01       	movw	r28, r24
    1048:	0e 94 c1 05 	call	0xb82	; 0xb82 <millis>
    104c:	8b 01       	movw	r16, r22
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    1050:	0e 94 c1 05 	call	0xb82	; 0xb82 <millis>
    1054:	60 1b       	sub	r22, r16
    1056:	71 0b       	sbc	r23, r17
    1058:	6d 32       	cpi	r22, 0x2D	; 45
    105a:	71 40       	sbci	r23, 0x01	; 1
    105c:	18 f0       	brcs	.+6      	; 0x1064 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    105e:	8f e0       	ldi	r24, 0x0F	; 15
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <_ZN7Sd2Card14waitStartBlockEv+0x38>
    1064:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZL6spiRecv>
    1068:	8a 87       	std	Y+10, r24	; 0x0a
    106a:	8f 3f       	cpi	r24, 0xFF	; 255
    106c:	89 f3       	breq	.-30     	; 0x1050 <_ZN7Sd2Card14waitStartBlockEv+0x12>
    106e:	8e 3f       	cpi	r24, 0xFE	; 254
    1070:	39 f0       	breq	.+14     	; 0x1080 <_ZN7Sd2Card14waitStartBlockEv+0x42>
    1072:	8d e0       	ldi	r24, 0x0D	; 13
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	ce 01       	movw	r24, r28
    1078:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN7Sd2Card14chipSelectHighEv>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <_ZN7Sd2Card14waitStartBlockEv+0x44>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <_ZN7Sd2Card8readDataEmjjPh>:
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	69 01       	movw	r12, r18
    10a0:	01 15       	cp	r16, r1
    10a2:	11 05       	cpc	r17, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <_ZN7Sd2Card8readDataEmjjPh+0x1c>
    10a6:	6c c0       	rjmp	.+216    	; 0x1180 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    10a8:	c8 01       	movw	r24, r16
    10aa:	82 0f       	add	r24, r18
    10ac:	93 1f       	adc	r25, r19
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	92 40       	sbci	r25, 0x02	; 2
    10b2:	08 f0       	brcs	.+2      	; 0x10b6 <_ZN7Sd2Card8readDataEmjjPh+0x2a>
    10b4:	60 c0       	rjmp	.+192    	; 0x1176 <_ZN7Sd2Card8readDataEmjjPh+0xea>
    10b6:	8e 81       	ldd	r24, Y+6	; 0x06
    10b8:	88 23       	and	r24, r24
    10ba:	71 f0       	breq	.+28     	; 0x10d8 <_ZN7Sd2Card8readDataEmjjPh+0x4c>
    10bc:	88 81       	ld	r24, Y
    10be:	99 81       	ldd	r25, Y+1	; 0x01
    10c0:	aa 81       	ldd	r26, Y+2	; 0x02
    10c2:	bb 81       	ldd	r27, Y+3	; 0x03
    10c4:	84 17       	cp	r24, r20
    10c6:	95 07       	cpc	r25, r21
    10c8:	a6 07       	cpc	r26, r22
    10ca:	b7 07       	cpc	r27, r23
    10cc:	29 f4       	brne	.+10     	; 0x10d8 <_ZN7Sd2Card8readDataEmjjPh+0x4c>
    10ce:	8f 81       	ldd	r24, Y+7	; 0x07
    10d0:	98 85       	ldd	r25, Y+8	; 0x08
    10d2:	c8 16       	cp	r12, r24
    10d4:	d9 06       	cpc	r13, r25
    10d6:	20 f5       	brcc	.+72     	; 0x1120 <_ZN7Sd2Card8readDataEmjjPh+0x94>
    10d8:	48 83       	st	Y, r20
    10da:	59 83       	std	Y+1, r21	; 0x01
    10dc:	6a 83       	std	Y+2, r22	; 0x02
    10de:	7b 83       	std	Y+3, r23	; 0x03
    10e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	49 f0       	breq	.+18     	; 0x10f8 <_ZN7Sd2Card8readDataEmjjPh+0x6c>
    10e6:	03 2e       	mov	r0, r19
    10e8:	39 e0       	ldi	r19, 0x09	; 9
    10ea:	44 0f       	add	r20, r20
    10ec:	55 1f       	adc	r21, r21
    10ee:	66 1f       	adc	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	3a 95       	dec	r19
    10f4:	d1 f7       	brne	.-12     	; 0x10ea <_ZN7Sd2Card8readDataEmjjPh+0x5e>
    10f6:	30 2d       	mov	r19, r0
    10f8:	9a 01       	movw	r18, r20
    10fa:	ab 01       	movw	r20, r22
    10fc:	61 e1       	ldi	r22, 0x11	; 17
    10fe:	ce 01       	movw	r24, r28
    1100:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN7Sd2Card11cardCommandEhm>
    1104:	88 23       	and	r24, r24
    1106:	19 f0       	breq	.+6      	; 0x110e <_ZN7Sd2Card8readDataEmjjPh+0x82>
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	34 c0       	rjmp	.+104    	; 0x1176 <_ZN7Sd2Card8readDataEmjjPh+0xea>
    110e:	ce 01       	movw	r24, r28
    1110:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7Sd2Card14waitStartBlockEv>
    1114:	88 23       	and	r24, r24
    1116:	79 f1       	breq	.+94     	; 0x1176 <_ZN7Sd2Card8readDataEmjjPh+0xea>
    1118:	18 86       	std	Y+8, r1	; 0x08
    111a:	1f 82       	std	Y+7, r1	; 0x07
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	8e 83       	std	Y+6, r24	; 0x06
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	98 85       	ldd	r25, Y+8	; 0x08
    1124:	8c 15       	cp	r24, r12
    1126:	9d 05       	cpc	r25, r13
    1128:	50 f4       	brcc	.+20     	; 0x113e <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    112a:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZL6spiRecv>
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	98 85       	ldd	r25, Y+8	; 0x08
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	98 87       	std	Y+8, r25	; 0x08
    1136:	8f 83       	std	Y+7, r24	; 0x07
    1138:	8c 15       	cp	r24, r12
    113a:	9d 05       	cpc	r25, r13
    113c:	b0 f3       	brcs	.-20     	; 0x112a <_ZN7Sd2Card8readDataEmjjPh+0x9e>
    113e:	67 01       	movw	r12, r14
    1140:	e0 0e       	add	r14, r16
    1142:	f1 1e       	adc	r15, r17
    1144:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZL6spiRecv>
    1148:	f6 01       	movw	r30, r12
    114a:	81 93       	st	Z+, r24
    114c:	6f 01       	movw	r12, r30
    114e:	ee 15       	cp	r30, r14
    1150:	ff 05       	cpc	r31, r15
    1152:	c1 f7       	brne	.-16     	; 0x1144 <_ZN7Sd2Card8readDataEmjjPh+0xb8>
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	98 85       	ldd	r25, Y+8	; 0x08
    1158:	08 0f       	add	r16, r24
    115a:	19 1f       	adc	r17, r25
    115c:	18 87       	std	Y+8, r17	; 0x08
    115e:	0f 83       	std	Y+7, r16	; 0x07
    1160:	89 85       	ldd	r24, Y+9	; 0x09
    1162:	88 23       	and	r24, r24
    1164:	19 f0       	breq	.+6      	; 0x116c <_ZN7Sd2Card8readDataEmjjPh+0xe0>
    1166:	01 15       	cp	r16, r1
    1168:	12 40       	sbci	r17, 0x02	; 2
    116a:	60 f0       	brcs	.+24     	; 0x1184 <_ZN7Sd2Card8readDataEmjjPh+0xf8>
    116c:	ce 01       	movw	r24, r28
    116e:	0e 94 92 07 	call	0xf24	; 0xf24 <_ZN7Sd2Card7readEndEv>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <_ZN7Sd2Card8readDataEmjjPh+0xfa>
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN7Sd2Card14chipSelectHighEv>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <_ZN7Sd2Card8readDataEmjjPh+0xfa>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <_ZN7Sd2Card8readDataEmjjPh+0xfa>
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	08 95       	ret

00001198 <_ZN7Sd2Card9readBlockEmPh>:
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	79 01       	movw	r14, r18
    11a2:	00 e0       	ldi	r16, 0x00	; 0
    11a4:	12 e0       	ldi	r17, 0x02	; 2
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	0e 94 46 08 	call	0x108c	; 0x108c <_ZN7Sd2Card8readDataEmjjPh>
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	08 95       	ret

000011b8 <_ZN7Sd2Card9writeDataEhPKh>:
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	7c 01       	movw	r14, r24
    11c6:	86 2f       	mov	r24, r22
    11c8:	8a 01       	movw	r16, r20
    11ca:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZL7spiSendh>
    11ce:	e8 01       	movw	r28, r16
    11d0:	1e 5f       	subi	r17, 0xFE	; 254
    11d2:	89 91       	ld	r24, Y+
    11d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZL7spiSendh>
    11d8:	c0 17       	cp	r28, r16
    11da:	d1 07       	cpc	r29, r17
    11dc:	d1 f7       	brne	.-12     	; 0x11d2 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZL7spiSendh>
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZL7spiSendh>
    11ea:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZL6spiRecv>
    11ee:	f7 01       	movw	r30, r14
    11f0:	82 87       	std	Z+10, r24	; 0x0a
    11f2:	98 2f       	mov	r25, r24
    11f4:	9f 71       	andi	r25, 0x1F	; 31
    11f6:	95 30       	cpi	r25, 0x05	; 5
    11f8:	39 f0       	breq	.+14     	; 0x1208 <_ZN7Sd2Card9writeDataEhPKh+0x50>
    11fa:	81 e1       	ldi	r24, 0x11	; 17
    11fc:	85 83       	std	Z+5, r24	; 0x05
    11fe:	c7 01       	movw	r24, r14
    1200:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN7Sd2Card14chipSelectHighEv>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	01 c0       	rjmp	.+2      	; 0x120a <_ZN7Sd2Card9writeDataEhPKh+0x52>
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	08 95       	ret

00001218 <_ZN7Sd2Card10writeBlockEmPKh>:
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	ec 01       	movw	r28, r24
    1222:	89 01       	movw	r16, r18
    1224:	41 15       	cp	r20, r1
    1226:	51 05       	cpc	r21, r1
    1228:	61 05       	cpc	r22, r1
    122a:	71 05       	cpc	r23, r1
    122c:	19 f4       	brne	.+6      	; 0x1234 <_ZN7Sd2Card10writeBlockEmPKh+0x1c>
    122e:	82 e1       	ldi	r24, 0x12	; 18
    1230:	8d 83       	std	Y+5, r24	; 0x05
    1232:	3d c0       	rjmp	.+122    	; 0x12ae <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    1234:	8b 85       	ldd	r24, Y+11	; 0x0b
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	49 f0       	breq	.+18     	; 0x124c <_ZN7Sd2Card10writeBlockEmPKh+0x34>
    123a:	03 2e       	mov	r0, r19
    123c:	39 e0       	ldi	r19, 0x09	; 9
    123e:	44 0f       	add	r20, r20
    1240:	55 1f       	adc	r21, r21
    1242:	66 1f       	adc	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	3a 95       	dec	r19
    1248:	d1 f7       	brne	.-12     	; 0x123e <_ZN7Sd2Card10writeBlockEmPKh+0x26>
    124a:	30 2d       	mov	r19, r0
    124c:	9a 01       	movw	r18, r20
    124e:	ab 01       	movw	r20, r22
    1250:	68 e1       	ldi	r22, 0x18	; 24
    1252:	ce 01       	movw	r24, r28
    1254:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN7Sd2Card11cardCommandEhm>
    1258:	88 23       	and	r24, r24
    125a:	19 f0       	breq	.+6      	; 0x1262 <_ZN7Sd2Card10writeBlockEmPKh+0x4a>
    125c:	84 e0       	ldi	r24, 0x04	; 4
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	26 c0       	rjmp	.+76     	; 0x12ae <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    1262:	a8 01       	movw	r20, r16
    1264:	6e ef       	ldi	r22, 0xFE	; 254
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_ZN7Sd2Card9writeDataEhPKh>
    126c:	88 23       	and	r24, r24
    126e:	f9 f0       	breq	.+62     	; 0x12ae <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    1270:	68 e5       	ldi	r22, 0x58	; 88
    1272:	72 e0       	ldi	r23, 0x02	; 2
    1274:	ce 01       	movw	r24, r28
    1276:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN7Sd2Card11waitNotBusyEj>
    127a:	81 11       	cpse	r24, r1
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <_ZN7Sd2Card10writeBlockEmPKh+0x6c>
    127e:	85 e1       	ldi	r24, 0x15	; 21
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	15 c0       	rjmp	.+42     	; 0x12ae <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	6d e0       	ldi	r22, 0x0D	; 13
    128c:	ce 01       	movw	r24, r28
    128e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN7Sd2Card11cardCommandEhm>
    1292:	81 11       	cpse	r24, r1
    1294:	04 c0       	rjmp	.+8      	; 0x129e <_ZN7Sd2Card10writeBlockEmPKh+0x86>
    1296:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZL6spiRecv>
    129a:	88 23       	and	r24, r24
    129c:	19 f0       	breq	.+6      	; 0x12a4 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    129e:	84 e1       	ldi	r24, 0x14	; 20
    12a0:	8d 83       	std	Y+5, r24	; 0x05
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    12a4:	ce 01       	movw	r24, r28
    12a6:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN7Sd2Card14chipSelectHighEv>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <_ZN7Sd2Card10writeBlockEmPKh+0x9e>
    12ae:	ce 01       	movw	r24, r28
    12b0:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN7Sd2Card14chipSelectHighEv>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	08 95       	ret

000012c0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    12c0:	ec ed       	ldi	r30, 0xDC	; 220
    12c2:	f2 e0       	ldi	r31, 0x02	; 2
    12c4:	80 e5       	ldi	r24, 0x50	; 80
    12c6:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    12c8:	11 82       	std	Z+1, r1	; 0x01
    12ca:	08 95       	ret

000012cc <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	ec 01       	movw	r28, r24
    12d2:	9c 01       	movw	r18, r24
    12d4:	2a 5f       	subi	r18, 0xFA	; 250
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	41 e0       	ldi	r20, 0x01	; 1
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN8SdVolume15allocContiguousEmPm>
    12e8:	88 23       	and	r24, r24
    12ea:	b1 f0       	breq	.+44     	; 0x1318 <_ZN6SdFile10addClusterEv+0x4c>
    12ec:	8f 89       	ldd	r24, Y+23	; 0x17
    12ee:	98 8d       	ldd	r25, Y+24	; 0x18
    12f0:	a9 8d       	ldd	r26, Y+25	; 0x19
    12f2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    12f4:	89 2b       	or	r24, r25
    12f6:	8a 2b       	or	r24, r26
    12f8:	8b 2b       	or	r24, r27
    12fa:	69 f4       	brne	.+26     	; 0x1316 <_ZN6SdFile10addClusterEv+0x4a>
    12fc:	8e 81       	ldd	r24, Y+6	; 0x06
    12fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1300:	a8 85       	ldd	r26, Y+8	; 0x08
    1302:	b9 85       	ldd	r27, Y+9	; 0x09
    1304:	8f 8b       	std	Y+23, r24	; 0x17
    1306:	98 8f       	std	Y+24, r25	; 0x18
    1308:	a9 8f       	std	Y+25, r26	; 0x19
    130a:	ba 8f       	std	Y+26, r27	; 0x1a
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	80 68       	ori	r24, 0x80	; 128
    1310:	8c 83       	std	Y+4, r24	; 0x04
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <_ZN6SdFile10addClusterEv+0x4c>
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <_ZN6SdFile13cacheDirEntryEh>:
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	ec 01       	movw	r28, r24
    1324:	46 2f       	mov	r20, r22
    1326:	6e 85       	ldd	r22, Y+14	; 0x0e
    1328:	7f 85       	ldd	r23, Y+15	; 0x0f
    132a:	88 89       	ldd	r24, Y+16	; 0x10
    132c:	99 89       	ldd	r25, Y+17	; 0x11
    132e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <_ZN8SdVolume13cacheRawBlockEmh>
    1332:	88 23       	and	r24, r24
    1334:	41 f0       	breq	.+16     	; 0x1346 <_ZN6SdFile13cacheDirEntryEh+0x28>
    1336:	8a 89       	ldd	r24, Y+18	; 0x12
    1338:	20 e2       	ldi	r18, 0x20	; 32
    133a:	82 9f       	mul	r24, r18
    133c:	c0 01       	movw	r24, r0
    133e:	11 24       	eor	r1, r1
    1340:	89 51       	subi	r24, 0x19	; 25
    1342:	9d 4f       	sbci	r25, 0xFD	; 253
    1344:	02 c0       	rjmp	.+4      	; 0x134a <_ZN6SdFile13cacheDirEntryEh+0x2c>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <_ZN6SdFile7seekSetEm>:
    1350:	8f 92       	push	r8
    1352:	9f 92       	push	r9
    1354:	af 92       	push	r10
    1356:	bf 92       	push	r11
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	ec 01       	movw	r28, r24
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	88 23       	and	r24, r24
    136e:	09 f4       	brne	.+2      	; 0x1372 <_ZN6SdFile7seekSetEm+0x22>
    1370:	7f c0       	rjmp	.+254    	; 0x1470 <_ZN6SdFile7seekSetEm+0x120>
    1372:	0b 89       	ldd	r16, Y+19	; 0x13
    1374:	1c 89       	ldd	r17, Y+20	; 0x14
    1376:	2d 89       	ldd	r18, Y+21	; 0x15
    1378:	3e 89       	ldd	r19, Y+22	; 0x16
    137a:	04 17       	cp	r16, r20
    137c:	15 07       	cpc	r17, r21
    137e:	26 07       	cpc	r18, r22
    1380:	37 07       	cpc	r19, r23
    1382:	08 f4       	brcc	.+2      	; 0x1386 <_ZN6SdFile7seekSetEm+0x36>
    1384:	74 c0       	rjmp	.+232    	; 0x146e <_ZN6SdFile7seekSetEm+0x11e>
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	31 f4       	brne	.+12     	; 0x1396 <_ZN6SdFile7seekSetEm+0x46>
    138a:	4a 87       	std	Y+10, r20	; 0x0a
    138c:	5b 87       	std	Y+11, r21	; 0x0b
    138e:	6c 87       	std	Y+12, r22	; 0x0c
    1390:	7d 87       	std	Y+13, r23	; 0x0d
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	6d c0       	rjmp	.+218    	; 0x1470 <_ZN6SdFile7seekSetEm+0x120>
    1396:	41 15       	cp	r20, r1
    1398:	51 05       	cpc	r21, r1
    139a:	61 05       	cpc	r22, r1
    139c:	71 05       	cpc	r23, r1
    139e:	51 f4       	brne	.+20     	; 0x13b4 <_ZN6SdFile7seekSetEm+0x64>
    13a0:	1e 82       	std	Y+6, r1	; 0x06
    13a2:	1f 82       	std	Y+7, r1	; 0x07
    13a4:	18 86       	std	Y+8, r1	; 0x08
    13a6:	19 86       	std	Y+9, r1	; 0x09
    13a8:	1a 86       	std	Y+10, r1	; 0x0a
    13aa:	1b 86       	std	Y+11, r1	; 0x0b
    13ac:	1c 86       	std	Y+12, r1	; 0x0c
    13ae:	1d 86       	std	Y+13, r1	; 0x0d
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	5e c0       	rjmp	.+188    	; 0x1470 <_ZN6SdFile7seekSetEm+0x120>
    13b4:	8a 84       	ldd	r8, Y+10	; 0x0a
    13b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    13b8:	ac 84       	ldd	r10, Y+12	; 0x0c
    13ba:	bd 84       	ldd	r11, Y+13	; 0x0d
    13bc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    13be:	fc 8d       	ldd	r31, Y+28	; 0x1c
    13c0:	85 85       	ldd	r24, Z+13	; 0x0d
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	09 96       	adiw	r24, 0x09	; 9
    13c6:	95 01       	movw	r18, r10
    13c8:	84 01       	movw	r16, r8
    13ca:	01 50       	subi	r16, 0x01	; 1
    13cc:	11 09       	sbc	r17, r1
    13ce:	21 09       	sbc	r18, r1
    13d0:	31 09       	sbc	r19, r1
    13d2:	08 2e       	mov	r0, r24
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <_ZN6SdFile7seekSetEm+0x8e>
    13d6:	36 95       	lsr	r19
    13d8:	27 95       	ror	r18
    13da:	17 95       	ror	r17
    13dc:	07 95       	ror	r16
    13de:	0a 94       	dec	r0
    13e0:	d2 f7       	brpl	.-12     	; 0x13d6 <_ZN6SdFile7seekSetEm+0x86>
    13e2:	6a 01       	movw	r12, r20
    13e4:	7b 01       	movw	r14, r22
    13e6:	e1 e0       	ldi	r30, 0x01	; 1
    13e8:	ce 1a       	sub	r12, r30
    13ea:	d1 08       	sbc	r13, r1
    13ec:	e1 08       	sbc	r14, r1
    13ee:	f1 08       	sbc	r15, r1
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <_ZN6SdFile7seekSetEm+0xaa>
    13f2:	f6 94       	lsr	r15
    13f4:	e7 94       	ror	r14
    13f6:	d7 94       	ror	r13
    13f8:	c7 94       	ror	r12
    13fa:	8a 95       	dec	r24
    13fc:	d2 f7       	brpl	.-12     	; 0x13f2 <_ZN6SdFile7seekSetEm+0xa2>
    13fe:	c0 16       	cp	r12, r16
    1400:	d1 06       	cpc	r13, r17
    1402:	e2 06       	cpc	r14, r18
    1404:	f3 06       	cpc	r15, r19
    1406:	20 f0       	brcs	.+8      	; 0x1410 <_ZN6SdFile7seekSetEm+0xc0>
    1408:	89 28       	or	r8, r9
    140a:	8a 28       	or	r8, r10
    140c:	8b 28       	or	r8, r11
    140e:	49 f4       	brne	.+18     	; 0x1422 <_ZN6SdFile7seekSetEm+0xd2>
    1410:	8f 89       	ldd	r24, Y+23	; 0x17
    1412:	98 8d       	ldd	r25, Y+24	; 0x18
    1414:	a9 8d       	ldd	r26, Y+25	; 0x19
    1416:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1418:	8e 83       	std	Y+6, r24	; 0x06
    141a:	9f 83       	std	Y+7, r25	; 0x07
    141c:	a8 87       	std	Y+8, r26	; 0x08
    141e:	b9 87       	std	Y+9, r27	; 0x09
    1420:	16 c0       	rjmp	.+44     	; 0x144e <_ZN6SdFile7seekSetEm+0xfe>
    1422:	c0 1a       	sub	r12, r16
    1424:	d1 0a       	sbc	r13, r17
    1426:	e2 0a       	sbc	r14, r18
    1428:	f3 0a       	sbc	r15, r19
    142a:	11 c0       	rjmp	.+34     	; 0x144e <_ZN6SdFile7seekSetEm+0xfe>
    142c:	4e 81       	ldd	r20, Y+6	; 0x06
    142e:	5f 81       	ldd	r21, Y+7	; 0x07
    1430:	68 85       	ldd	r22, Y+8	; 0x08
    1432:	79 85       	ldd	r23, Y+9	; 0x09
    1434:	98 01       	movw	r18, r16
    1436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZNK8SdVolume6fatGetEmPm>
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	c9 1a       	sub	r12, r25
    1442:	d1 08       	sbc	r13, r1
    1444:	e1 08       	sbc	r14, r1
    1446:	f1 08       	sbc	r15, r1
    1448:	81 11       	cpse	r24, r1
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <_ZN6SdFile7seekSetEm+0x108>
    144c:	11 c0       	rjmp	.+34     	; 0x1470 <_ZN6SdFile7seekSetEm+0x120>
    144e:	4a 01       	movw	r8, r20
    1450:	5b 01       	movw	r10, r22
    1452:	8e 01       	movw	r16, r28
    1454:	0a 5f       	subi	r16, 0xFA	; 250
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	c1 14       	cp	r12, r1
    145a:	d1 04       	cpc	r13, r1
    145c:	e1 04       	cpc	r14, r1
    145e:	f1 04       	cpc	r15, r1
    1460:	29 f7       	brne	.-54     	; 0x142c <_ZN6SdFile7seekSetEm+0xdc>
    1462:	8a 86       	std	Y+10, r8	; 0x0a
    1464:	9b 86       	std	Y+11, r9	; 0x0b
    1466:	ac 86       	std	Y+12, r10	; 0x0c
    1468:	bd 86       	std	Y+13, r11	; 0x0d
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <_ZN6SdFile7seekSetEm+0x120>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	df 90       	pop	r13
    147e:	cf 90       	pop	r12
    1480:	bf 90       	pop	r11
    1482:	af 90       	pop	r10
    1484:	9f 90       	pop	r9
    1486:	8f 90       	pop	r8
    1488:	08 95       	ret

0000148a <_ZN6SdFile4syncEv>:
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	fc 01       	movw	r30, r24
    1494:	85 81       	ldd	r24, Z+5	; 0x05
    1496:	88 23       	and	r24, r24
    1498:	d1 f1       	breq	.+116    	; 0x150e <_ZN6SdFile4syncEv+0x84>
    149a:	ef 01       	movw	r28, r30
    149c:	84 81       	ldd	r24, Z+4	; 0x04
    149e:	88 23       	and	r24, r24
    14a0:	94 f5       	brge	.+100    	; 0x1506 <_ZN6SdFile4syncEv+0x7c>
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	cf 01       	movw	r24, r30
    14a6:	0e 94 8f 09 	call	0x131e	; 0x131e <_ZN6SdFile13cacheDirEntryEh>
    14aa:	8c 01       	movw	r16, r24
    14ac:	89 2b       	or	r24, r25
    14ae:	71 f1       	breq	.+92     	; 0x150c <_ZN6SdFile4syncEv+0x82>
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	48 f4       	brcc	.+18     	; 0x14c8 <_ZN6SdFile4syncEv+0x3e>
    14b6:	8b 89       	ldd	r24, Y+19	; 0x13
    14b8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ba:	ad 89       	ldd	r26, Y+21	; 0x15
    14bc:	be 89       	ldd	r27, Y+22	; 0x16
    14be:	f8 01       	movw	r30, r16
    14c0:	84 8f       	std	Z+28, r24	; 0x1c
    14c2:	95 8f       	std	Z+29, r25	; 0x1d
    14c4:	a6 8f       	std	Z+30, r26	; 0x1e
    14c6:	b7 8f       	std	Z+31, r27	; 0x1f
    14c8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ca:	98 8d       	ldd	r25, Y+24	; 0x18
    14cc:	f8 01       	movw	r30, r16
    14ce:	93 8f       	std	Z+27, r25	; 0x1b
    14d0:	82 8f       	std	Z+26, r24	; 0x1a
    14d2:	8f 89       	ldd	r24, Y+23	; 0x17
    14d4:	98 8d       	ldd	r25, Y+24	; 0x18
    14d6:	a9 8d       	ldd	r26, Y+25	; 0x19
    14d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    14da:	b5 8b       	std	Z+21, r27	; 0x15
    14dc:	a4 8b       	std	Z+20, r26	; 0x14
    14de:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <_ZN6SdFile9dateTime_E>
    14e2:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <_ZN6SdFile9dateTime_E+0x1>
    14e6:	30 97       	sbiw	r30, 0x00	; 0
    14e8:	59 f0       	breq	.+22     	; 0x1500 <_ZN6SdFile4syncEv+0x76>
    14ea:	b8 01       	movw	r22, r16
    14ec:	6a 5e       	subi	r22, 0xEA	; 234
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	c8 01       	movw	r24, r16
    14f2:	48 96       	adiw	r24, 0x18	; 24
    14f4:	09 95       	icall
    14f6:	f8 01       	movw	r30, r16
    14f8:	80 8d       	ldd	r24, Z+24	; 0x18
    14fa:	91 8d       	ldd	r25, Z+25	; 0x19
    14fc:	93 8b       	std	Z+19, r25	; 0x13
    14fe:	82 8b       	std	Z+18, r24	; 0x12
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	8f 77       	andi	r24, 0x7F	; 127
    1504:	8c 83       	std	Y+4, r24	; 0x04
    1506:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_ZN8SdVolume10cacheFlushEv>
    150a:	01 c0       	rjmp	.+2      	; 0x150e <_ZN6SdFile4syncEv+0x84>
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    1518:	2f 92       	push	r2
    151a:	3f 92       	push	r3
    151c:	4f 92       	push	r4
    151e:	5f 92       	push	r5
    1520:	6f 92       	push	r6
    1522:	7f 92       	push	r7
    1524:	8f 92       	push	r8
    1526:	9f 92       	push	r9
    1528:	af 92       	push	r10
    152a:	bf 92       	push	r11
    152c:	cf 92       	push	r12
    152e:	df 92       	push	r13
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 d0       	rcall	.+0      	; 0x153e <_ZN6SdFile5writeEPKvj+0x26>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <_ZN6SdFile5writeEPKvj+0x28>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <_ZN6SdFile5writeEPKvj+0x2a>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	8c 01       	movw	r16, r24
    1548:	1b 01       	movw	r2, r22
    154a:	5e 83       	std	Y+6, r21	; 0x06
    154c:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    154e:	dc 01       	movw	r26, r24
    1550:	15 96       	adiw	r26, 0x05	; 5
    1552:	8c 91       	ld	r24, X
    1554:	15 97       	sbiw	r26, 0x05	; 5
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	09 f0       	breq	.+2      	; 0x155c <_ZN6SdFile5writeEPKvj+0x44>
    155a:	7d c1       	rjmp	.+762    	; 0x1856 <_ZN6SdFile5writeEPKvj+0x33e>
    155c:	14 96       	adiw	r26, 0x04	; 4
    155e:	8c 91       	ld	r24, X
    1560:	14 97       	sbiw	r26, 0x04	; 4
    1562:	81 ff       	sbrs	r24, 1
    1564:	78 c1       	rjmp	.+752    	; 0x1856 <_ZN6SdFile5writeEPKvj+0x33e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1566:	82 ff       	sbrs	r24, 2
    1568:	18 c0       	rjmp	.+48     	; 0x159a <_ZN6SdFile5writeEPKvj+0x82>
    156a:	53 96       	adiw	r26, 0x13	; 19
    156c:	4d 91       	ld	r20, X+
    156e:	5d 91       	ld	r21, X+
    1570:	6d 91       	ld	r22, X+
    1572:	7c 91       	ld	r23, X
    1574:	56 97       	sbiw	r26, 0x16	; 22
    1576:	1a 96       	adiw	r26, 0x0a	; 10
    1578:	8d 91       	ld	r24, X+
    157a:	9d 91       	ld	r25, X+
    157c:	0d 90       	ld	r0, X+
    157e:	bc 91       	ld	r27, X
    1580:	a0 2d       	mov	r26, r0
    1582:	84 17       	cp	r24, r20
    1584:	95 07       	cpc	r25, r21
    1586:	a6 07       	cpc	r26, r22
    1588:	b7 07       	cpc	r27, r23
    158a:	09 f4       	brne	.+2      	; 0x158e <_ZN6SdFile5writeEPKvj+0x76>
    158c:	74 c1       	rjmp	.+744    	; 0x1876 <_ZN6SdFile5writeEPKvj+0x35e>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    158e:	c8 01       	movw	r24, r16
    1590:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    1594:	88 23       	and	r24, r24
    1596:	09 f4       	brne	.+2      	; 0x159a <_ZN6SdFile5writeEPKvj+0x82>
    1598:	5e c1       	rjmp	.+700    	; 0x1856 <_ZN6SdFile5writeEPKvj+0x33e>
  }

  while (nToWrite > 0) {
    159a:	ed 81       	ldd	r30, Y+5	; 0x05
    159c:	fe 81       	ldd	r31, Y+6	; 0x06
    159e:	ef 2b       	or	r30, r31
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <_ZN6SdFile5writeEPKvj+0x8c>
    15a2:	2d c1       	rjmp	.+602    	; 0x17fe <_ZN6SdFile5writeEPKvj+0x2e6>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    15a4:	cd 80       	ldd	r12, Y+5	; 0x05
    15a6:	de 80       	ldd	r13, Y+6	; 0x06
    15a8:	a1 2c       	mov	r10, r1
    15aa:	68 94       	set
    15ac:	bb 24       	eor	r11, r11
    15ae:	b1 f8       	bld	r11, 1
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    15b0:	d8 01       	movw	r26, r16
    15b2:	1a 96       	adiw	r26, 0x0a	; 10
    15b4:	4d 91       	ld	r20, X+
    15b6:	5d 91       	ld	r21, X+
    15b8:	6d 91       	ld	r22, X+
    15ba:	7c 91       	ld	r23, X
    15bc:	1d 97       	sbiw	r26, 0x0d	; 13
    15be:	5b 96       	adiw	r26, 0x1b	; 27
    15c0:	ed 91       	ld	r30, X+
    15c2:	fc 91       	ld	r31, X
    15c4:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    15c6:	2a 01       	movw	r4, r20
    15c8:	3b 01       	movw	r6, r22
    15ca:	03 2e       	mov	r0, r19
    15cc:	39 e0       	ldi	r19, 0x09	; 9
    15ce:	76 94       	lsr	r7
    15d0:	67 94       	ror	r6
    15d2:	57 94       	ror	r5
    15d4:	47 94       	ror	r4
    15d6:	3a 95       	dec	r19
    15d8:	d1 f7       	brne	.-12     	; 0x15ce <_ZN6SdFile5writeEPKvj+0xb6>
    15da:	30 2d       	mov	r19, r0
    15dc:	94 81       	ldd	r25, Z+4	; 0x04
    15de:	91 50       	subi	r25, 0x01	; 1
    15e0:	94 21       	and	r25, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    15e2:	4a 01       	movw	r8, r20
    15e4:	b1 e0       	ldi	r27, 0x01	; 1
    15e6:	9b 22       	and	r9, r27
    if (blockOfCluster == 0 && blockOffset == 0) {
    15e8:	91 11       	cpse	r25, r1
    15ea:	56 c0       	rjmp	.+172    	; 0x1698 <_ZN6SdFile5writeEPKvj+0x180>
    15ec:	81 14       	cp	r8, r1
    15ee:	91 04       	cpc	r9, r1
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <_ZN6SdFile5writeEPKvj+0xdc>
    15f2:	74 c1       	rjmp	.+744    	; 0x18dc <_ZN6SdFile5writeEPKvj+0x3c4>
      // start of new cluster
      if (curCluster_ == 0) {
    15f4:	d8 01       	movw	r26, r16
    15f6:	16 96       	adiw	r26, 0x06	; 6
    15f8:	4d 91       	ld	r20, X+
    15fa:	5d 91       	ld	r21, X+
    15fc:	6d 91       	ld	r22, X+
    15fe:	7c 91       	ld	r23, X
    1600:	19 97       	sbiw	r26, 0x09	; 9
    1602:	41 15       	cp	r20, r1
    1604:	51 05       	cpc	r21, r1
    1606:	61 05       	cpc	r22, r1
    1608:	71 05       	cpc	r23, r1
    160a:	b1 f4       	brne	.+44     	; 0x1638 <_ZN6SdFile5writeEPKvj+0x120>
        if (firstCluster_ == 0) {
    160c:	57 96       	adiw	r26, 0x17	; 23
    160e:	8d 91       	ld	r24, X+
    1610:	9d 91       	ld	r25, X+
    1612:	0d 90       	ld	r0, X+
    1614:	bc 91       	ld	r27, X
    1616:	a0 2d       	mov	r26, r0
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	a1 05       	cpc	r26, r1
    161c:	b1 05       	cpc	r27, r1
    161e:	31 f4       	brne	.+12     	; 0x162c <_ZN6SdFile5writeEPKvj+0x114>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
    1620:	c8 01       	movw	r24, r16
    1622:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN6SdFile10addClusterEv>
    1626:	81 11       	cpse	r24, r1
    1628:	2c c1       	rjmp	.+600    	; 0x1882 <_ZN6SdFile5writeEPKvj+0x36a>
    162a:	15 c1       	rjmp	.+554    	; 0x1856 <_ZN6SdFile5writeEPKvj+0x33e>
        } else {
          curCluster_ = firstCluster_;
    162c:	f8 01       	movw	r30, r16
    162e:	86 83       	std	Z+6, r24	; 0x06
    1630:	97 83       	std	Z+7, r25	; 0x07
    1632:	a0 87       	std	Z+8, r26	; 0x08
    1634:	b1 87       	std	Z+9, r27	; 0x09
    1636:	25 c1       	rjmp	.+586    	; 0x1882 <_ZN6SdFile5writeEPKvj+0x36a>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1638:	9e 01       	movw	r18, r28
    163a:	2f 5f       	subi	r18, 0xFF	; 255
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	cf 01       	movw	r24, r30
    1640:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZNK8SdVolume6fatGetEmPm>
    1644:	81 11       	cpse	r24, r1
    1646:	02 c0       	rjmp	.+4      	; 0x164c <_ZN6SdFile5writeEPKvj+0x134>
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	72 c1       	rjmp	.+740    	; 0x1930 <_ZN6SdFile5writeEPKvj+0x418>
        if (vol_->isEOC(next)) {
    164c:	49 81       	ldd	r20, Y+1	; 0x01
    164e:	5a 81       	ldd	r21, Y+2	; 0x02
    1650:	6b 81       	ldd	r22, Y+3	; 0x03
    1652:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1654:	d8 01       	movw	r26, r16
    1656:	5b 96       	adiw	r26, 0x1b	; 27
    1658:	ed 91       	ld	r30, X+
    165a:	fc 91       	ld	r31, X
    165c:	5c 97       	sbiw	r26, 0x1c	; 28
    165e:	87 89       	ldd	r24, Z+23	; 0x17
    1660:	80 31       	cpi	r24, 0x10	; 16
    1662:	29 f0       	breq	.+10     	; 0x166e <_ZN6SdFile5writeEPKvj+0x156>
    1664:	88 ef       	ldi	r24, 0xF8	; 248
    1666:	9f ef       	ldi	r25, 0xFF	; 255
    1668:	af ef       	ldi	r26, 0xFF	; 255
    166a:	bf e0       	ldi	r27, 0x0F	; 15
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <_ZN6SdFile5writeEPKvj+0x15e>
    166e:	88 ef       	ldi	r24, 0xF8	; 248
    1670:	9f ef       	ldi	r25, 0xFF	; 255
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	48 17       	cp	r20, r24
    1678:	59 07       	cpc	r21, r25
    167a:	6a 07       	cpc	r22, r26
    167c:	7b 07       	cpc	r23, r27
    167e:	30 f0       	brcs	.+12     	; 0x168c <_ZN6SdFile5writeEPKvj+0x174>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1680:	c8 01       	movw	r24, r16
    1682:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN6SdFile10addClusterEv>
    1686:	81 11       	cpse	r24, r1
    1688:	fc c0       	rjmp	.+504    	; 0x1882 <_ZN6SdFile5writeEPKvj+0x36a>
    168a:	e5 c0       	rjmp	.+458    	; 0x1856 <_ZN6SdFile5writeEPKvj+0x33e>
        } else {
          curCluster_ = next;
    168c:	f8 01       	movw	r30, r16
    168e:	46 83       	std	Z+6, r20	; 0x06
    1690:	57 83       	std	Z+7, r21	; 0x07
    1692:	60 87       	std	Z+8, r22	; 0x08
    1694:	71 87       	std	Z+9, r23	; 0x09
    1696:	f5 c0       	rjmp	.+490    	; 0x1882 <_ZN6SdFile5writeEPKvj+0x36a>
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1698:	95 01       	movw	r18, r10
    169a:	28 19       	sub	r18, r8
    169c:	39 09       	sbc	r19, r9
    169e:	76 01       	movw	r14, r12
    16a0:	2c 15       	cp	r18, r12
    16a2:	3d 05       	cpc	r19, r13
    16a4:	08 f4       	brcc	.+2      	; 0x16a8 <_ZN6SdFile5writeEPKvj+0x190>
    16a6:	79 01       	movw	r14, r18
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    16a8:	d8 01       	movw	r26, r16
    16aa:	16 96       	adiw	r26, 0x06	; 6
    16ac:	4d 90       	ld	r4, X+
    16ae:	5d 90       	ld	r5, X+
    16b0:	6d 90       	ld	r6, X+
    16b2:	7c 90       	ld	r7, X
    16b4:	19 97       	sbiw	r26, 0x09	; 9
    16b6:	b2 e0       	ldi	r27, 0x02	; 2
    16b8:	4b 1a       	sub	r4, r27
    16ba:	51 08       	sbc	r5, r1
    16bc:	61 08       	sbc	r6, r1
    16be:	71 08       	sbc	r7, r1
    16c0:	05 84       	ldd	r0, Z+13	; 0x0d
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <_ZN6SdFile5writeEPKvj+0x1b4>
    16c4:	44 0c       	add	r4, r4
    16c6:	55 1c       	adc	r5, r5
    16c8:	66 1c       	adc	r6, r6
    16ca:	77 1c       	adc	r7, r7
    16cc:	0a 94       	dec	r0
    16ce:	d2 f7       	brpl	.-12     	; 0x16c4 <_ZN6SdFile5writeEPKvj+0x1ac>
    16d0:	46 85       	ldd	r20, Z+14	; 0x0e
    16d2:	57 85       	ldd	r21, Z+15	; 0x0f
    16d4:	60 89       	ldd	r22, Z+16	; 0x10
    16d6:	71 89       	ldd	r23, Z+17	; 0x11
    16d8:	44 0e       	add	r4, r20
    16da:	55 1e       	adc	r5, r21
    16dc:	66 1e       	adc	r6, r22
    16de:	77 1e       	adc	r7, r23

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    16e0:	49 0e       	add	r4, r25
    16e2:	51 1c       	adc	r5, r1
    16e4:	61 1c       	adc	r6, r1
    16e6:	71 1c       	adc	r7, r1
    if (n == 512) {
    16e8:	e1 14       	cp	r14, r1
    16ea:	e2 e0       	ldi	r30, 0x02	; 2
    16ec:	fe 06       	cpc	r15, r30
    16ee:	41 f5       	brne	.+80     	; 0x1740 <_ZN6SdFile5writeEPKvj+0x228>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    16f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    16f4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    16f8:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    16fc:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1700:	84 15       	cp	r24, r4
    1702:	95 05       	cpc	r25, r5
    1704:	a6 05       	cpc	r26, r6
    1706:	b7 05       	cpc	r27, r7
    1708:	59 f4       	brne	.+22     	; 0x1720 <_ZN6SdFile5writeEPKvj+0x208>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	9f ef       	ldi	r25, 0xFF	; 255
    170e:	dc 01       	movw	r26, r24
    1710:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1714:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1718:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    171c:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1720:	91 01       	movw	r18, r2
    1722:	b3 01       	movw	r22, r6
    1724:	a2 01       	movw	r20, r4
    1726:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN8SdVolume7sdCard_E>
    172a:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <_ZN8SdVolume7sdCard_E+0x1>
    172e:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1732:	88 23       	and	r24, r24
    1734:	09 f4       	brne	.+2      	; 0x1738 <_ZN6SdFile5writeEPKvj+0x220>
    1736:	8f c0       	rjmp	.+286    	; 0x1856 <_ZN6SdFile5writeEPKvj+0x33e>
      src += 512;
    1738:	9e ef       	ldi	r25, 0xFE	; 254
    173a:	39 1a       	sub	r3, r25
    173c:	75 01       	movw	r14, r10
    173e:	4c c0       	rjmp	.+152    	; 0x17d8 <_ZN6SdFile5writeEPKvj+0x2c0>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1740:	81 14       	cp	r8, r1
    1742:	91 04       	cpc	r9, r1
    1744:	29 f5       	brne	.+74     	; 0x1790 <_ZN6SdFile5writeEPKvj+0x278>
    1746:	d8 01       	movw	r26, r16
    1748:	1a 96       	adiw	r26, 0x0a	; 10
    174a:	4d 91       	ld	r20, X+
    174c:	5d 91       	ld	r21, X+
    174e:	6d 91       	ld	r22, X+
    1750:	7c 91       	ld	r23, X
    1752:	1d 97       	sbiw	r26, 0x0d	; 13
    1754:	53 96       	adiw	r26, 0x13	; 19
    1756:	8d 91       	ld	r24, X+
    1758:	9d 91       	ld	r25, X+
    175a:	0d 90       	ld	r0, X+
    175c:	bc 91       	ld	r27, X
    175e:	a0 2d       	mov	r26, r0
    1760:	48 17       	cp	r20, r24
    1762:	59 07       	cpc	r21, r25
    1764:	6a 07       	cpc	r22, r26
    1766:	7b 07       	cpc	r23, r27
    1768:	98 f0       	brcs	.+38     	; 0x1790 <_ZN6SdFile5writeEPKvj+0x278>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    176a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_ZN8SdVolume10cacheFlushEv>
    176e:	88 23       	and	r24, r24
    1770:	09 f4       	brne	.+2      	; 0x1774 <_ZN6SdFile5writeEPKvj+0x25c>
    1772:	71 c0       	rjmp	.+226    	; 0x1856 <_ZN6SdFile5writeEPKvj+0x33e>
        SdVolume::cacheBlockNumber_ = block;
    1774:	40 92 01 01 	sts	0x0101, r4	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1778:	50 92 02 01 	sts	0x0102, r5	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    177c:	60 92 03 01 	sts	0x0103, r6	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1780:	70 92 04 01 	sts	0x0104, r7	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1784:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <_ZN8SdVolume11cacheDirty_E>
    1788:	81 60       	ori	r24, 0x01	; 1
    178a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <_ZN8SdVolume11cacheDirty_E>
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <_ZN6SdFile5writeEPKvj+0x288>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	c3 01       	movw	r24, r6
    1794:	b2 01       	movw	r22, r4
    1796:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <_ZN8SdVolume13cacheRawBlockEmh>
    179a:	88 23       	and	r24, r24
    179c:	09 f4       	brne	.+2      	; 0x17a0 <_ZN6SdFile5writeEPKvj+0x288>
    179e:	5b c0       	rjmp	.+182    	; 0x1856 <_ZN6SdFile5writeEPKvj+0x33e>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    17a0:	c4 01       	movw	r24, r8
    17a2:	89 51       	subi	r24, 0x19	; 25
    17a4:	9d 4f       	sbci	r25, 0xFD	; 253
      uint8_t* end = dst + n;
    17a6:	ac 01       	movw	r20, r24
    17a8:	4e 0d       	add	r20, r14
    17aa:	5f 1d       	adc	r21, r15
      while (dst != end) *dst++ = *src++;
    17ac:	84 17       	cp	r24, r20
    17ae:	95 07       	cpc	r25, r21
    17b0:	99 f0       	breq	.+38     	; 0x17d8 <_ZN6SdFile5writeEPKvj+0x2c0>
    17b2:	f1 01       	movw	r30, r2
    17b4:	dc 01       	movw	r26, r24
    17b6:	91 01       	movw	r18, r2
    17b8:	2e 0d       	add	r18, r14
    17ba:	3f 1d       	adc	r19, r15
    17bc:	61 91       	ld	r22, Z+
    17be:	6d 93       	st	X+, r22
    17c0:	e2 17       	cp	r30, r18
    17c2:	f3 07       	cpc	r31, r19
    17c4:	d9 f7       	brne	.-10     	; 0x17bc <_ZN6SdFile5writeEPKvj+0x2a4>
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	e1 e0       	ldi	r30, 0x01	; 1
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	e8 1b       	sub	r30, r24
    17ce:	f9 0b       	sbc	r31, r25
    17d0:	4e 0f       	add	r20, r30
    17d2:	5f 1f       	adc	r21, r31
    17d4:	24 0e       	add	r2, r20
    17d6:	35 1e       	adc	r3, r21
    }
    nToWrite -= n;
    17d8:	ce 18       	sub	r12, r14
    17da:	df 08       	sbc	r13, r15
    curPosition_ += n;
    17dc:	f8 01       	movw	r30, r16
    17de:	82 85       	ldd	r24, Z+10	; 0x0a
    17e0:	93 85       	ldd	r25, Z+11	; 0x0b
    17e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    17e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    17e6:	8e 0d       	add	r24, r14
    17e8:	9f 1d       	adc	r25, r15
    17ea:	a1 1d       	adc	r26, r1
    17ec:	b1 1d       	adc	r27, r1
    17ee:	82 87       	std	Z+10, r24	; 0x0a
    17f0:	93 87       	std	Z+11, r25	; 0x0b
    17f2:	a4 87       	std	Z+12, r26	; 0x0c
    17f4:	b5 87       	std	Z+13, r27	; 0x0d
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    17f6:	c1 14       	cp	r12, r1
    17f8:	d1 04       	cpc	r13, r1
    17fa:	09 f0       	breq	.+2      	; 0x17fe <_ZN6SdFile5writeEPKvj+0x2e6>
    17fc:	d9 ce       	rjmp	.-590    	; 0x15b0 <_ZN6SdFile5writeEPKvj+0x98>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    17fe:	f8 01       	movw	r30, r16
    1800:	82 85       	ldd	r24, Z+10	; 0x0a
    1802:	93 85       	ldd	r25, Z+11	; 0x0b
    1804:	a4 85       	ldd	r26, Z+12	; 0x0c
    1806:	b5 85       	ldd	r27, Z+13	; 0x0d
    1808:	43 89       	ldd	r20, Z+19	; 0x13
    180a:	54 89       	ldd	r21, Z+20	; 0x14
    180c:	65 89       	ldd	r22, Z+21	; 0x15
    180e:	76 89       	ldd	r23, Z+22	; 0x16
    1810:	48 17       	cp	r20, r24
    1812:	59 07       	cpc	r21, r25
    1814:	6a 07       	cpc	r22, r26
    1816:	7b 07       	cpc	r23, r27
    1818:	40 f4       	brcc	.+16     	; 0x182a <_ZN6SdFile5writeEPKvj+0x312>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    181a:	83 8b       	std	Z+19, r24	; 0x13
    181c:	94 8b       	std	Z+20, r25	; 0x14
    181e:	a5 8b       	std	Z+21, r26	; 0x15
    1820:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    1822:	84 81       	ldd	r24, Z+4	; 0x04
    1824:	80 68       	ori	r24, 0x80	; 128
    1826:	84 83       	std	Z+4, r24	; 0x04
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <_ZN6SdFile5writeEPKvj+0x32c>
  } else if (dateTime_ && nbyte) {
    182a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <_ZN6SdFile9dateTime_E>
    182e:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <_ZN6SdFile9dateTime_E+0x1>
    1832:	89 2b       	or	r24, r25
    1834:	39 f0       	breq	.+14     	; 0x1844 <_ZN6SdFile5writeEPKvj+0x32c>
    1836:	2d 81       	ldd	r18, Y+5	; 0x05
    1838:	3e 81       	ldd	r19, Y+6	; 0x06
    183a:	23 2b       	or	r18, r19
    183c:	19 f0       	breq	.+6      	; 0x1844 <_ZN6SdFile5writeEPKvj+0x32c>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    183e:	84 81       	ldd	r24, Z+4	; 0x04
    1840:	80 68       	ori	r24, 0x80	; 128
    1842:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    1844:	f8 01       	movw	r30, r16
    1846:	84 81       	ldd	r24, Z+4	; 0x04
    1848:	83 ff       	sbrs	r24, 3
    184a:	0f c0       	rjmp	.+30     	; 0x186a <_ZN6SdFile5writeEPKvj+0x352>
    if (!sync()) goto writeErrorReturn;
    184c:	c8 01       	movw	r24, r16
    184e:	0e 94 45 0a 	call	0x148a	; 0x148a <_ZN6SdFile4syncEv>
    1852:	81 11       	cpse	r24, r1
    1854:	0d c0       	rjmp	.+26     	; 0x1870 <_ZN6SdFile5writeEPKvj+0x358>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	d8 01       	movw	r26, r16
    185c:	13 96       	adiw	r26, 0x03	; 3
    185e:	9c 93       	st	X, r25
    1860:	8e 93       	st	-X, r24
    1862:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	63 c0       	rjmp	.+198    	; 0x1930 <_ZN6SdFile5writeEPKvj+0x418>
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
  }
  return nbyte;
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	60 c0       	rjmp	.+192    	; 0x1930 <_ZN6SdFile5writeEPKvj+0x418>
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	5d c0       	rjmp	.+186    	; 0x1930 <_ZN6SdFile5writeEPKvj+0x418>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1876:	ed 81       	ldd	r30, Y+5	; 0x05
    1878:	fe 81       	ldd	r31, Y+6	; 0x06
    187a:	ef 2b       	or	r30, r31
    187c:	09 f0       	breq	.+2      	; 0x1880 <_ZN6SdFile5writeEPKvj+0x368>
    187e:	92 ce       	rjmp	.-732    	; 0x15a4 <_ZN6SdFile5writeEPKvj+0x8c>
    1880:	e1 cf       	rjmp	.-62     	; 0x1844 <_ZN6SdFile5writeEPKvj+0x32c>
    1882:	76 01       	movw	r14, r12
    1884:	f1 e0       	ldi	r31, 0x01	; 1
    1886:	cf 16       	cp	r12, r31
    1888:	f2 e0       	ldi	r31, 0x02	; 2
    188a:	df 06       	cpc	r13, r31
    188c:	08 f0       	brcs	.+2      	; 0x1890 <_ZN6SdFile5writeEPKvj+0x378>
    188e:	75 01       	movw	r14, r10

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1890:	d8 01       	movw	r26, r16
    1892:	5b 96       	adiw	r26, 0x1b	; 27
    1894:	ed 91       	ld	r30, X+
    1896:	fc 91       	ld	r31, X
    1898:	5c 97       	sbiw	r26, 0x1c	; 28
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    189a:	16 96       	adiw	r26, 0x06	; 6
    189c:	4d 90       	ld	r4, X+
    189e:	5d 90       	ld	r5, X+
    18a0:	6d 90       	ld	r6, X+
    18a2:	7c 90       	ld	r7, X
    18a4:	19 97       	sbiw	r26, 0x09	; 9
    18a6:	b2 e0       	ldi	r27, 0x02	; 2
    18a8:	4b 1a       	sub	r4, r27
    18aa:	51 08       	sbc	r5, r1
    18ac:	61 08       	sbc	r6, r1
    18ae:	71 08       	sbc	r7, r1
    18b0:	05 84       	ldd	r0, Z+13	; 0x0d
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <_ZN6SdFile5writeEPKvj+0x3a4>
    18b4:	44 0c       	add	r4, r4
    18b6:	55 1c       	adc	r5, r5
    18b8:	66 1c       	adc	r6, r6
    18ba:	77 1c       	adc	r7, r7
    18bc:	0a 94       	dec	r0
    18be:	d2 f7       	brpl	.-12     	; 0x18b4 <_ZN6SdFile5writeEPKvj+0x39c>
    18c0:	86 85       	ldd	r24, Z+14	; 0x0e
    18c2:	97 85       	ldd	r25, Z+15	; 0x0f
    18c4:	a0 89       	ldd	r26, Z+16	; 0x10
    18c6:	b1 89       	ldd	r27, Z+17	; 0x11
    18c8:	48 0e       	add	r4, r24
    18ca:	59 1e       	adc	r5, r25
    18cc:	6a 1e       	adc	r6, r26
    18ce:	7b 1e       	adc	r7, r27
    if (n == 512) {
    18d0:	e1 14       	cp	r14, r1
    18d2:	e2 e0       	ldi	r30, 0x02	; 2
    18d4:	fe 06       	cpc	r15, r30
    18d6:	09 f0       	breq	.+2      	; 0x18da <_ZN6SdFile5writeEPKvj+0x3c2>
    18d8:	36 cf       	rjmp	.-404    	; 0x1746 <_ZN6SdFile5writeEPKvj+0x22e>
    18da:	0a cf       	rjmp	.-492    	; 0x16f0 <_ZN6SdFile5writeEPKvj+0x1d8>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    18dc:	c5 01       	movw	r24, r10
    18de:	88 19       	sub	r24, r8
    18e0:	99 09       	sbc	r25, r9
    18e2:	76 01       	movw	r14, r12
    18e4:	8c 15       	cp	r24, r12
    18e6:	9d 05       	cpc	r25, r13
    18e8:	08 f4       	brcc	.+2      	; 0x18ec <_ZN6SdFile5writeEPKvj+0x3d4>
    18ea:	7c 01       	movw	r14, r24
    18ec:	d8 01       	movw	r26, r16
    18ee:	16 96       	adiw	r26, 0x06	; 6
    18f0:	4d 90       	ld	r4, X+
    18f2:	5d 90       	ld	r5, X+
    18f4:	6d 90       	ld	r6, X+
    18f6:	7c 90       	ld	r7, X
    18f8:	19 97       	sbiw	r26, 0x09	; 9
    18fa:	b2 e0       	ldi	r27, 0x02	; 2
    18fc:	4b 1a       	sub	r4, r27
    18fe:	51 08       	sbc	r5, r1
    1900:	61 08       	sbc	r6, r1
    1902:	71 08       	sbc	r7, r1
    1904:	05 84       	ldd	r0, Z+13	; 0x0d
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <_ZN6SdFile5writeEPKvj+0x3f8>
    1908:	44 0c       	add	r4, r4
    190a:	55 1c       	adc	r5, r5
    190c:	66 1c       	adc	r6, r6
    190e:	77 1c       	adc	r7, r7
    1910:	0a 94       	dec	r0
    1912:	d2 f7       	brpl	.-12     	; 0x1908 <_ZN6SdFile5writeEPKvj+0x3f0>
    1914:	86 85       	ldd	r24, Z+14	; 0x0e
    1916:	97 85       	ldd	r25, Z+15	; 0x0f
    1918:	a0 89       	ldd	r26, Z+16	; 0x10
    191a:	b1 89       	ldd	r27, Z+17	; 0x11
    191c:	48 0e       	add	r4, r24
    191e:	59 1e       	adc	r5, r25
    1920:	6a 1e       	adc	r6, r26
    1922:	7b 1e       	adc	r7, r27
    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
    1924:	e1 14       	cp	r14, r1
    1926:	e2 e0       	ldi	r30, 0x02	; 2
    1928:	fe 06       	cpc	r15, r30
    192a:	09 f0       	breq	.+2      	; 0x192e <_ZN6SdFile5writeEPKvj+0x416>
    192c:	31 cf       	rjmp	.-414    	; 0x1790 <_ZN6SdFile5writeEPKvj+0x278>
    192e:	e0 ce       	rjmp	.-576    	; 0x16f0 <_ZN6SdFile5writeEPKvj+0x1d8>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1930:	26 96       	adiw	r28, 0x06	; 6
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	9f 90       	pop	r9
    1952:	8f 90       	pop	r8
    1954:	7f 90       	pop	r7
    1956:	6f 90       	pop	r6
    1958:	5f 90       	pop	r5
    195a:	4f 90       	pop	r4
    195c:	3f 90       	pop	r3
    195e:	2f 90       	pop	r2
    1960:	08 95       	ret

00001962 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	1f 92       	push	r1
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	be 01       	movw	r22, r28
    1974:	6f 5f       	subi	r22, 0xFF	; 255
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN6SdFile5writeEPKvj>
}
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <_ZN8SdVolume10cacheFlushEv>:
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    1984:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <_ZN8SdVolume11cacheDirty_E>
    1988:	88 23       	and	r24, r24
    198a:	a9 f1       	breq	.+106    	; 0x19f6 <_ZN8SdVolume10cacheFlushEv+0x72>
    198c:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1990:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1994:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1998:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    199c:	27 ee       	ldi	r18, 0xE7	; 231
    199e:	32 e0       	ldi	r19, 0x02	; 2
    19a0:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN8SdVolume7sdCard_E>
    19a4:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <_ZN8SdVolume7sdCard_E+0x1>
    19a8:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN7Sd2Card10writeBlockEmPKh>
    19ac:	88 23       	and	r24, r24
    19ae:	21 f1       	breq	.+72     	; 0x19f8 <_ZN8SdVolume10cacheFlushEv+0x74>
    19b0:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <_ZN8SdVolume17cacheMirrorBlock_E>
    19b4:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    19b8:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    19bc:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    19c0:	41 15       	cp	r20, r1
    19c2:	51 05       	cpc	r21, r1
    19c4:	61 05       	cpc	r22, r1
    19c6:	71 05       	cpc	r23, r1
    19c8:	91 f0       	breq	.+36     	; 0x19ee <_ZN8SdVolume10cacheFlushEv+0x6a>
    19ca:	27 ee       	ldi	r18, 0xE7	; 231
    19cc:	32 e0       	ldi	r19, 0x02	; 2
    19ce:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN8SdVolume7sdCard_E>
    19d2:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <_ZN8SdVolume7sdCard_E+0x1>
    19d6:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN7Sd2Card10writeBlockEmPKh>
    19da:	88 23       	and	r24, r24
    19dc:	69 f0       	breq	.+26     	; 0x19f8 <_ZN8SdVolume10cacheFlushEv+0x74>
    19de:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN8SdVolume17cacheMirrorBlock_E>
    19e2:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    19e6:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    19ea:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    19ee:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN8SdVolume11cacheDirty_E>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	08 95       	ret
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	08 95       	ret

000019fa <_ZN8SdVolume13cacheRawBlockEmh>:
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	cf 93       	push	r28
    1a04:	6b 01       	movw	r12, r22
    1a06:	7c 01       	movw	r14, r24
    1a08:	c4 2f       	mov	r28, r20
    1a0a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1a0e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1a12:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1a16:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1a1a:	8c 15       	cp	r24, r12
    1a1c:	9d 05       	cpc	r25, r13
    1a1e:	ae 05       	cpc	r26, r14
    1a20:	bf 05       	cpc	r27, r15
    1a22:	c1 f0       	breq	.+48     	; 0x1a54 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    1a24:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_ZN8SdVolume10cacheFlushEv>
    1a28:	88 23       	and	r24, r24
    1a2a:	d1 f0       	breq	.+52     	; 0x1a60 <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    1a2c:	27 ee       	ldi	r18, 0xE7	; 231
    1a2e:	32 e0       	ldi	r19, 0x02	; 2
    1a30:	b7 01       	movw	r22, r14
    1a32:	a6 01       	movw	r20, r12
    1a34:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN8SdVolume7sdCard_E>
    1a38:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <_ZN8SdVolume7sdCard_E+0x1>
    1a3c:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7Sd2Card9readBlockEmPh>
    1a40:	88 23       	and	r24, r24
    1a42:	71 f0       	breq	.+28     	; 0x1a60 <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    1a44:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1a48:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1a4c:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1a50:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1a54:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <_ZN8SdVolume11cacheDirty_E>
    1a58:	c8 2b       	or	r28, r24
    1a5a:	c0 93 e4 02 	sts	0x02E4, r28	; 0x8002e4 <_ZN8SdVolume11cacheDirty_E>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	cf 91       	pop	r28
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	08 95       	ret

00001a6c <_ZNK8SdVolume6fatGetEmPm>:
    1a6c:	8f 92       	push	r8
    1a6e:	9f 92       	push	r9
    1a70:	af 92       	push	r10
    1a72:	bf 92       	push	r11
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	e9 01       	movw	r28, r18
    1a86:	fc 01       	movw	r30, r24
    1a88:	01 85       	ldd	r16, Z+9	; 0x09
    1a8a:	12 85       	ldd	r17, Z+10	; 0x0a
    1a8c:	23 85       	ldd	r18, Z+11	; 0x0b
    1a8e:	34 85       	ldd	r19, Z+12	; 0x0c
    1a90:	0f 5f       	subi	r16, 0xFF	; 255
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	2f 4f       	sbci	r18, 0xFF	; 255
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	04 17       	cp	r16, r20
    1a9a:	15 07       	cpc	r17, r21
    1a9c:	26 07       	cpc	r18, r22
    1a9e:	37 07       	cpc	r19, r23
    1aa0:	08 f4       	brcc	.+2      	; 0x1aa4 <_ZNK8SdVolume6fatGetEmPm+0x38>
    1aa2:	77 c0       	rjmp	.+238    	; 0x1b92 <_ZNK8SdVolume6fatGetEmPm+0x126>
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	6a 01       	movw	r12, r20
    1aa8:	7b 01       	movw	r14, r22
    1aaa:	ec 01       	movw	r28, r24
    1aac:	83 89       	ldd	r24, Z+19	; 0x13
    1aae:	94 89       	ldd	r25, Z+20	; 0x14
    1ab0:	a5 89       	ldd	r26, Z+21	; 0x15
    1ab2:	b6 89       	ldd	r27, Z+22	; 0x16
    1ab4:	27 89       	ldd	r18, Z+23	; 0x17
    1ab6:	20 31       	cpi	r18, 0x10	; 16
    1ab8:	d1 f4       	brne	.+52     	; 0x1aee <_ZNK8SdVolume6fatGetEmPm+0x82>
    1aba:	45 2f       	mov	r20, r21
    1abc:	56 2f       	mov	r21, r22
    1abe:	67 2f       	mov	r22, r23
    1ac0:	77 27       	eor	r23, r23
    1ac2:	4a 01       	movw	r8, r20
    1ac4:	5b 01       	movw	r10, r22
    1ac6:	88 0e       	add	r8, r24
    1ac8:	99 1e       	adc	r9, r25
    1aca:	aa 1e       	adc	r10, r26
    1acc:	bb 1e       	adc	r11, r27
    1ace:	c5 01       	movw	r24, r10
    1ad0:	b4 01       	movw	r22, r8
    1ad2:	80 90 01 01 	lds	r8, 0x0101	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1ad6:	90 90 02 01 	lds	r9, 0x0102	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1ada:	a0 90 03 01 	lds	r10, 0x0103	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1ade:	b0 90 04 01 	lds	r11, 0x0104	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1ae2:	68 15       	cp	r22, r8
    1ae4:	79 05       	cpc	r23, r9
    1ae6:	8a 05       	cpc	r24, r10
    1ae8:	9b 05       	cpc	r25, r11
    1aea:	f1 f4       	brne	.+60     	; 0x1b28 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    1aec:	25 c0       	rjmp	.+74     	; 0x1b38 <_ZNK8SdVolume6fatGetEmPm+0xcc>
    1aee:	68 94       	set
    1af0:	16 f8       	bld	r1, 6
    1af2:	76 95       	lsr	r23
    1af4:	67 95       	ror	r22
    1af6:	57 95       	ror	r21
    1af8:	47 95       	ror	r20
    1afa:	16 94       	lsr	r1
    1afc:	d1 f7       	brne	.-12     	; 0x1af2 <_ZNK8SdVolume6fatGetEmPm+0x86>
    1afe:	4a 01       	movw	r8, r20
    1b00:	5b 01       	movw	r10, r22
    1b02:	88 0e       	add	r8, r24
    1b04:	99 1e       	adc	r9, r25
    1b06:	aa 1e       	adc	r10, r26
    1b08:	bb 1e       	adc	r11, r27
    1b0a:	c5 01       	movw	r24, r10
    1b0c:	b4 01       	movw	r22, r8
    1b0e:	80 90 01 01 	lds	r8, 0x0101	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1b12:	90 90 02 01 	lds	r9, 0x0102	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1b16:	a0 90 03 01 	lds	r10, 0x0103	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1b1a:	b0 90 04 01 	lds	r11, 0x0104	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1b1e:	68 15       	cp	r22, r8
    1b20:	79 05       	cpc	r23, r9
    1b22:	8a 05       	cpc	r24, r10
    1b24:	9b 05       	cpc	r25, r11
    1b26:	e1 f0       	breq	.+56     	; 0x1b60 <_ZNK8SdVolume6fatGetEmPm+0xf4>
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <_ZN8SdVolume13cacheRawBlockEmh>
    1b2e:	88 23       	and	r24, r24
    1b30:	89 f1       	breq	.+98     	; 0x1b94 <_ZNK8SdVolume6fatGetEmPm+0x128>
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	80 31       	cpi	r24, 0x10	; 16
    1b36:	a1 f4       	brne	.+40     	; 0x1b60 <_ZNK8SdVolume6fatGetEmPm+0xf4>
    1b38:	dd 24       	eor	r13, r13
    1b3a:	ee 24       	eor	r14, r14
    1b3c:	ff 24       	eor	r15, r15
    1b3e:	c6 01       	movw	r24, r12
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	fc 01       	movw	r30, r24
    1b46:	e9 51       	subi	r30, 0x19	; 25
    1b48:	fd 4f       	sbci	r31, 0xFD	; 253
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
    1b4e:	a0 e0       	ldi	r26, 0x00	; 0
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 83       	st	Z, r24
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	a2 83       	std	Z+2, r26	; 0x02
    1b5a:	b3 83       	std	Z+3, r27	; 0x03
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	1a c0       	rjmp	.+52     	; 0x1b94 <_ZNK8SdVolume6fatGetEmPm+0x128>
    1b60:	e8 94       	clt
    1b62:	c7 f8       	bld	r12, 7
    1b64:	dd 24       	eor	r13, r13
    1b66:	ee 24       	eor	r14, r14
    1b68:	ff 24       	eor	r15, r15
    1b6a:	c6 01       	movw	r24, r12
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	fc 01       	movw	r30, r24
    1b76:	e9 51       	subi	r30, 0x19	; 25
    1b78:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
    1b7e:	a2 81       	ldd	r26, Z+2	; 0x02
    1b80:	b3 81       	ldd	r27, Z+3	; 0x03
    1b82:	bf 70       	andi	r27, 0x0F	; 15
    1b84:	f8 01       	movw	r30, r16
    1b86:	80 83       	st	Z, r24
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	a2 83       	std	Z+2, r26	; 0x02
    1b8c:	b3 83       	std	Z+3, r27	; 0x03
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <_ZNK8SdVolume6fatGetEmPm+0x128>
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	df 90       	pop	r13
    1ba2:	cf 90       	pop	r12
    1ba4:	bf 90       	pop	r11
    1ba6:	af 90       	pop	r10
    1ba8:	9f 90       	pop	r9
    1baa:	8f 90       	pop	r8
    1bac:	08 95       	ret

00001bae <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    1bae:	4f 92       	push	r4
    1bb0:	5f 92       	push	r5
    1bb2:	6f 92       	push	r6
    1bb4:	7f 92       	push	r7
    1bb6:	8f 92       	push	r8
    1bb8:	9f 92       	push	r9
    1bba:	af 92       	push	r10
    1bbc:	bf 92       	push	r11
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	ec 01       	movw	r28, r24
    1bd0:	6a 01       	movw	r12, r20
    1bd2:	7b 01       	movw	r14, r22
    1bd4:	28 01       	movw	r4, r16
    1bd6:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    1bd8:	42 30       	cpi	r20, 0x02	; 2
    1bda:	51 05       	cpc	r21, r1
    1bdc:	61 05       	cpc	r22, r1
    1bde:	71 05       	cpc	r23, r1
    1be0:	08 f4       	brcc	.+2      	; 0x1be4 <_ZN8SdVolume6fatPutEmm+0x36>
    1be2:	8b c0       	rjmp	.+278    	; 0x1cfa <_ZN8SdVolume6fatPutEmm+0x14c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bea:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	a1 1d       	adc	r26, r1
    1bf0:	b1 1d       	adc	r27, r1
    1bf2:	84 17       	cp	r24, r20
    1bf4:	95 07       	cpc	r25, r21
    1bf6:	a6 07       	cpc	r26, r22
    1bf8:	b7 07       	cpc	r27, r23
    1bfa:	08 f4       	brcc	.+2      	; 0x1bfe <_ZN8SdVolume6fatPutEmm+0x50>
    1bfc:	80 c0       	rjmp	.+256    	; 0x1cfe <_ZN8SdVolume6fatPutEmm+0x150>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	ad 89       	ldd	r26, Y+21	; 0x15
    1c04:	be 89       	ldd	r27, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1c06:	2f 89       	ldd	r18, Y+23	; 0x17
    1c08:	20 31       	cpi	r18, 0x10	; 16
    1c0a:	c1 f4       	brne	.+48     	; 0x1c3c <_ZN8SdVolume6fatPutEmm+0x8e>
    1c0c:	85 2e       	mov	r8, r21
    1c0e:	96 2e       	mov	r9, r22
    1c10:	a7 2e       	mov	r10, r23
    1c12:	bb 24       	eor	r11, r11
    1c14:	88 0e       	add	r8, r24
    1c16:	99 1e       	adc	r9, r25
    1c18:	aa 1e       	adc	r10, r26
    1c1a:	bb 1e       	adc	r11, r27

  if (lba != cacheBlockNumber_) {
    1c1c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1c20:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1c24:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1c28:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1c2c:	88 16       	cp	r8, r24
    1c2e:	99 06       	cpc	r9, r25
    1c30:	aa 06       	cpc	r10, r26
    1c32:	bb 06       	cpc	r11, r27
    1c34:	f1 f4       	brne	.+60     	; 0x1c72 <_ZN8SdVolume6fatPutEmm+0xc4>
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1c36:	4c 01       	movw	r8, r24
    1c38:	5d 01       	movw	r10, r26
    1c3a:	26 c0       	rjmp	.+76     	; 0x1c88 <_ZN8SdVolume6fatPutEmm+0xda>
    1c3c:	4a 01       	movw	r8, r20
    1c3e:	5b 01       	movw	r10, r22
    1c40:	68 94       	set
    1c42:	16 f8       	bld	r1, 6
    1c44:	b6 94       	lsr	r11
    1c46:	a7 94       	ror	r10
    1c48:	97 94       	ror	r9
    1c4a:	87 94       	ror	r8
    1c4c:	16 94       	lsr	r1
    1c4e:	d1 f7       	brne	.-12     	; 0x1c44 <_ZN8SdVolume6fatPutEmm+0x96>
    1c50:	88 0e       	add	r8, r24
    1c52:	99 1e       	adc	r9, r25
    1c54:	aa 1e       	adc	r10, r26
    1c56:	bb 1e       	adc	r11, r27

  if (lba != cacheBlockNumber_) {
    1c58:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZN8SdVolume17cacheBlockNumber_E>
    1c5c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1c60:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1c64:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1c68:	88 16       	cp	r8, r24
    1c6a:	99 06       	cpc	r9, r25
    1c6c:	aa 06       	cpc	r10, r26
    1c6e:	bb 06       	cpc	r11, r27
    1c70:	b9 f0       	breq	.+46     	; 0x1ca0 <_ZN8SdVolume6fatPutEmm+0xf2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	c5 01       	movw	r24, r10
    1c76:	b4 01       	movw	r22, r8
    1c78:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <_ZN8SdVolume13cacheRawBlockEmh>
    1c7c:	88 23       	and	r24, r24
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <_ZN8SdVolume6fatPutEmm+0xd4>
    1c80:	41 c0       	rjmp	.+130    	; 0x1d04 <_ZN8SdVolume6fatPutEmm+0x156>
  }
  // store entry
  if (fatType_ == 16) {
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	80 31       	cpi	r24, 0x10	; 16
    1c86:	71 f4       	brne	.+28     	; 0x1ca4 <_ZN8SdVolume6fatPutEmm+0xf6>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    1c88:	dd 24       	eor	r13, r13
    1c8a:	ee 24       	eor	r14, r14
    1c8c:	ff 24       	eor	r15, r15
    1c8e:	c6 01       	movw	r24, r12
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	fc 01       	movw	r30, r24
    1c96:	e9 51       	subi	r30, 0x19	; 25
    1c98:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9a:	51 82       	std	Z+1, r5	; 0x01
    1c9c:	40 82       	st	Z, r4
    1c9e:	13 c0       	rjmp	.+38     	; 0x1cc6 <_ZN8SdVolume6fatPutEmm+0x118>
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1ca0:	4c 01       	movw	r8, r24
    1ca2:	5d 01       	movw	r10, r26
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    1ca4:	e8 94       	clt
    1ca6:	c7 f8       	bld	r12, 7
    1ca8:	dd 24       	eor	r13, r13
    1caa:	ee 24       	eor	r14, r14
    1cac:	ff 24       	eor	r15, r15
    1cae:	c6 01       	movw	r24, r12
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	fc 01       	movw	r30, r24
    1cba:	e9 51       	subi	r30, 0x19	; 25
    1cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cbe:	40 82       	st	Z, r4
    1cc0:	51 82       	std	Z+1, r5	; 0x01
    1cc2:	62 82       	std	Z+2, r6	; 0x02
    1cc4:	73 82       	std	Z+3, r7	; 0x03
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1cc6:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <_ZN8SdVolume11cacheDirty_E>
    1cca:	81 60       	ori	r24, 0x01	; 1
    1ccc:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    1cd0:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	b0 f0       	brcs	.+44     	; 0x1d02 <_ZN8SdVolume6fatPutEmm+0x154>
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	af 81       	ldd	r26, Y+7	; 0x07
    1cdc:	b8 85       	ldd	r27, Y+8	; 0x08
    1cde:	88 0e       	add	r8, r24
    1ce0:	99 1e       	adc	r9, r25
    1ce2:	aa 1e       	adc	r10, r26
    1ce4:	bb 1e       	adc	r11, r27
    1ce6:	80 92 e0 02 	sts	0x02E0, r8	; 0x8002e0 <_ZN8SdVolume17cacheMirrorBlock_E>
    1cea:	90 92 e1 02 	sts	0x02E1, r9	; 0x8002e1 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    1cee:	a0 92 e2 02 	sts	0x02E2, r10	; 0x8002e2 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    1cf2:	b0 92 e3 02 	sts	0x02E3, r11	; 0x8002e3 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	05 c0       	rjmp	.+10     	; 0x1d04 <_ZN8SdVolume6fatPutEmm+0x156>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <_ZN8SdVolume6fatPutEmm+0x156>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <_ZN8SdVolume6fatPutEmm+0x156>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
}
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	df 90       	pop	r13
    1d12:	cf 90       	pop	r12
    1d14:	bf 90       	pop	r11
    1d16:	af 90       	pop	r10
    1d18:	9f 90       	pop	r9
    1d1a:	8f 90       	pop	r8
    1d1c:	7f 90       	pop	r7
    1d1e:	6f 90       	pop	r6
    1d20:	5f 90       	pop	r5
    1d22:	4f 90       	pop	r4
    1d24:	08 95       	ret

00001d26 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    1d26:	2f 92       	push	r2
    1d28:	3f 92       	push	r3
    1d2a:	4f 92       	push	r4
    1d2c:	5f 92       	push	r5
    1d2e:	6f 92       	push	r6
    1d30:	7f 92       	push	r7
    1d32:	8f 92       	push	r8
    1d34:	9f 92       	push	r9
    1d36:	af 92       	push	r10
    1d38:	bf 92       	push	r11
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	2f 97       	sbiw	r28, 0x0f	; 15
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	1c 01       	movw	r2, r24
    1d5c:	f9 01       	movw	r30, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    1d5e:	80 80       	ld	r8, Z
    1d60:	91 80       	ldd	r9, Z+1	; 0x01
    1d62:	a2 80       	ldd	r10, Z+2	; 0x02
    1d64:	b3 80       	ldd	r11, Z+3	; 0x03
    1d66:	81 14       	cp	r8, r1
    1d68:	91 04       	cpc	r9, r1
    1d6a:	a1 04       	cpc	r10, r1
    1d6c:	b1 04       	cpc	r11, r1
    1d6e:	39 f0       	breq	.+14     	; 0x1d7e <_ZN8SdVolume15allocContiguousEmPm+0x58>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    1d70:	2f ef       	ldi	r18, 0xFF	; 255
    1d72:	82 1a       	sub	r8, r18
    1d74:	92 0a       	sbc	r9, r18
    1d76:	a2 0a       	sbc	r10, r18
    1d78:	b2 0a       	sbc	r11, r18

    // don't save new start location
    setStart = false;
    1d7a:	1d 86       	std	Y+13, r1	; 0x0d
    1d7c:	0d c0       	rjmp	.+26     	; 0x1d98 <_ZN8SdVolume15allocContiguousEmPm+0x72>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    1d7e:	dc 01       	movw	r26, r24
    1d80:	8d 90       	ld	r8, X+
    1d82:	9d 90       	ld	r9, X+
    1d84:	ad 90       	ld	r10, X+
    1d86:	bc 90       	ld	r11, X

    // save next search start if one cluster
    setStart = 1 == count;
    1d88:	b1 e0       	ldi	r27, 0x01	; 1
    1d8a:	bd 87       	std	Y+13, r27	; 0x0d
    1d8c:	41 30       	cpi	r20, 0x01	; 1
    1d8e:	51 05       	cpc	r21, r1
    1d90:	61 05       	cpc	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <_ZN8SdVolume15allocContiguousEmPm+0x72>
    1d96:	1d 86       	std	Y+13, r1	; 0x0d
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    1d98:	d1 01       	movw	r26, r2
    1d9a:	19 96       	adiw	r26, 0x09	; 9
    1d9c:	0d 91       	ld	r16, X+
    1d9e:	1d 91       	ld	r17, X+
    1da0:	2d 91       	ld	r18, X+
    1da2:	3c 91       	ld	r19, X
    1da4:	1c 97       	sbiw	r26, 0x0c	; 12
    1da6:	d9 01       	movw	r26, r18
    1da8:	c8 01       	movw	r24, r16
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	a1 1d       	adc	r26, r1
    1dae:	b1 1d       	adc	r27, r1
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	af 83       	std	Y+7, r26	; 0x07
    1db6:	b8 87       	std	Y+8, r27	; 0x08

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1db8:	01 2b       	or	r16, r17
    1dba:	02 2b       	or	r16, r18
    1dbc:	03 2b       	or	r16, r19
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <_ZN8SdVolume15allocContiguousEmPm+0x9c>
    1dc0:	5f c0       	rjmp	.+190    	; 0x1e80 <_ZN8SdVolume15allocContiguousEmPm+0x15a>
    1dc2:	ff 87       	std	Y+15, r31	; 0x0f
    1dc4:	ee 87       	std	Y+14, r30	; 0x0e
    1dc6:	49 87       	std	Y+9, r20	; 0x09
    1dc8:	5a 87       	std	Y+10, r21	; 0x0a
    1dca:	6b 87       	std	Y+11, r22	; 0x0b
    1dcc:	7c 87       	std	Y+12, r23	; 0x0c
    1dce:	75 01       	movw	r14, r10
    1dd0:	64 01       	movw	r12, r8
    1dd2:	41 2c       	mov	r4, r1
    1dd4:	51 2c       	mov	r5, r1
    1dd6:	32 01       	movw	r6, r4

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    1dd8:	12 e0       	ldi	r17, 0x02	; 2
    1dda:	00 e0       	ldi	r16, 0x00	; 0
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    1ddc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dde:	3e 81       	ldd	r19, Y+6	; 0x06
    1de0:	4f 81       	ldd	r20, Y+7	; 0x07
    1de2:	58 85       	ldd	r21, Y+8	; 0x08
    1de4:	2c 15       	cp	r18, r12
    1de6:	3d 05       	cpc	r19, r13
    1de8:	4e 05       	cpc	r20, r14
    1dea:	5f 05       	cpc	r21, r15
    1dec:	40 f4       	brcc	.+16     	; 0x1dfe <_ZN8SdVolume15allocContiguousEmPm+0xd8>
      bgnCluster = endCluster = 2;
    1dee:	c1 2e       	mov	r12, r17
    1df0:	d0 2e       	mov	r13, r16
    1df2:	e1 2c       	mov	r14, r1
    1df4:	f1 2c       	mov	r15, r1
    1df6:	81 2e       	mov	r8, r17
    1df8:	90 2e       	mov	r9, r16
    1dfa:	a1 2c       	mov	r10, r1
    1dfc:	b1 2c       	mov	r11, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    1dfe:	9e 01       	movw	r18, r28
    1e00:	2f 5f       	subi	r18, 0xFF	; 255
    1e02:	3f 4f       	sbci	r19, 0xFF	; 255
    1e04:	b7 01       	movw	r22, r14
    1e06:	a6 01       	movw	r20, r12
    1e08:	c1 01       	movw	r24, r2
    1e0a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZNK8SdVolume6fatGetEmPm>
    1e0e:	88 23       	and	r24, r24
    1e10:	b9 f1       	breq	.+110    	; 0x1e80 <_ZN8SdVolume15allocContiguousEmPm+0x15a>

    if (f != 0) {
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	ab 81       	ldd	r26, Y+3	; 0x03
    1e18:	bc 81       	ldd	r27, Y+4	; 0x04
    1e1a:	89 2b       	or	r24, r25
    1e1c:	8a 2b       	or	r24, r26
    1e1e:	8b 2b       	or	r24, r27
    1e20:	41 f0       	breq	.+16     	; 0x1e32 <_ZN8SdVolume15allocContiguousEmPm+0x10c>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    1e22:	46 01       	movw	r8, r12
    1e24:	57 01       	movw	r10, r14
    1e26:	3f ef       	ldi	r19, 0xFF	; 255
    1e28:	83 1a       	sub	r8, r19
    1e2a:	93 0a       	sbc	r9, r19
    1e2c:	a3 0a       	sbc	r10, r19
    1e2e:	b3 0a       	sbc	r11, r19
    1e30:	12 c0       	rjmp	.+36     	; 0x1e56 <_ZN8SdVolume15allocContiguousEmPm+0x130>
    1e32:	d7 01       	movw	r26, r14
    1e34:	c6 01       	movw	r24, r12
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	b1 1d       	adc	r27, r1
    } else if ((endCluster - bgnCluster + 1) == count) {
    1e3c:	88 19       	sub	r24, r8
    1e3e:	99 09       	sbc	r25, r9
    1e40:	aa 09       	sbc	r26, r10
    1e42:	bb 09       	sbc	r27, r11
    1e44:	29 85       	ldd	r18, Y+9	; 0x09
    1e46:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e48:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e4a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e4c:	82 17       	cp	r24, r18
    1e4e:	93 07       	cpc	r25, r19
    1e50:	a4 07       	cpc	r26, r20
    1e52:	b5 07       	cpc	r27, r21
    1e54:	b9 f0       	breq	.+46     	; 0x1e84 <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	43 1a       	sub	r4, r19
    1e5a:	53 0a       	sbc	r5, r19
    1e5c:	63 0a       	sbc	r6, r19
    1e5e:	73 0a       	sbc	r7, r19
    1e60:	4f ef       	ldi	r20, 0xFF	; 255
    1e62:	c4 1a       	sub	r12, r20
    1e64:	d4 0a       	sbc	r13, r20
    1e66:	e4 0a       	sbc	r14, r20
    1e68:	f4 0a       	sbc	r15, r20
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1e6a:	f1 01       	movw	r30, r2
    1e6c:	81 85       	ldd	r24, Z+9	; 0x09
    1e6e:	92 85       	ldd	r25, Z+10	; 0x0a
    1e70:	a3 85       	ldd	r26, Z+11	; 0x0b
    1e72:	b4 85       	ldd	r27, Z+12	; 0x0c
    1e74:	48 16       	cp	r4, r24
    1e76:	59 06       	cpc	r5, r25
    1e78:	6a 06       	cpc	r6, r26
    1e7a:	7b 06       	cpc	r7, r27
    1e7c:	08 f4       	brcc	.+2      	; 0x1e80 <_ZN8SdVolume15allocContiguousEmPm+0x15a>
    1e7e:	ae cf       	rjmp	.-164    	; 0x1ddc <_ZN8SdVolume15allocContiguousEmPm+0xb6>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	53 c0       	rjmp	.+166    	; 0x1f2a <_ZN8SdVolume15allocContiguousEmPm+0x204>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    1e84:	0f ef       	ldi	r16, 0xFF	; 255
    1e86:	1f ef       	ldi	r17, 0xFF	; 255
    1e88:	2f ef       	ldi	r18, 0xFF	; 255
    1e8a:	3f e0       	ldi	r19, 0x0F	; 15
    1e8c:	b7 01       	movw	r22, r14
    1e8e:	a6 01       	movw	r20, r12
    1e90:	c1 01       	movw	r24, r2
    1e92:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1e96:	81 11       	cpse	r24, r1
    1e98:	12 c0       	rjmp	.+36     	; 0x1ebe <_ZN8SdVolume15allocContiguousEmPm+0x198>
    1e9a:	47 c0       	rjmp	.+142    	; 0x1f2a <_ZN8SdVolume15allocContiguousEmPm+0x204>
    1e9c:	97 01       	movw	r18, r14
    1e9e:	86 01       	movw	r16, r12

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1ea0:	68 01       	movw	r12, r16
    1ea2:	79 01       	movw	r14, r18
    1ea4:	f1 e0       	ldi	r31, 0x01	; 1
    1ea6:	cf 1a       	sub	r12, r31
    1ea8:	d1 08       	sbc	r13, r1
    1eaa:	e1 08       	sbc	r14, r1
    1eac:	f1 08       	sbc	r15, r1
    1eae:	b7 01       	movw	r22, r14
    1eb0:	a6 01       	movw	r20, r12
    1eb2:	c1 01       	movw	r24, r2
    1eb4:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN8SdVolume6fatPutEmm>
    1eb8:	81 11       	cpse	r24, r1
    1eba:	07 c0       	rjmp	.+14     	; 0x1eca <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    1ebc:	36 c0       	rjmp	.+108    	; 0x1f2a <_ZN8SdVolume15allocContiguousEmPm+0x204>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1ebe:	8c 14       	cp	r8, r12
    1ec0:	9d 04       	cpc	r9, r13
    1ec2:	ae 04       	cpc	r10, r14
    1ec4:	bf 04       	cpc	r11, r15
    1ec6:	50 f3       	brcs	.-44     	; 0x1e9c <_ZN8SdVolume15allocContiguousEmPm+0x176>
    1ec8:	07 c0       	rjmp	.+14     	; 0x1ed8 <_ZN8SdVolume15allocContiguousEmPm+0x1b2>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
    1eca:	97 01       	movw	r18, r14
    1ecc:	86 01       	movw	r16, r12
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1ece:	8c 14       	cp	r8, r12
    1ed0:	9d 04       	cpc	r9, r13
    1ed2:	ae 04       	cpc	r10, r14
    1ed4:	bf 04       	cpc	r11, r15
    1ed6:	20 f3       	brcs	.-56     	; 0x1ea0 <_ZN8SdVolume15allocContiguousEmPm+0x17a>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    1ed8:	ae 85       	ldd	r26, Y+14	; 0x0e
    1eda:	bf 85       	ldd	r27, Y+15	; 0x0f
    1edc:	4d 91       	ld	r20, X+
    1ede:	5d 91       	ld	r21, X+
    1ee0:	6d 91       	ld	r22, X+
    1ee2:	7c 91       	ld	r23, X
    1ee4:	41 15       	cp	r20, r1
    1ee6:	51 05       	cpc	r21, r1
    1ee8:	61 05       	cpc	r22, r1
    1eea:	71 05       	cpc	r23, r1
    1eec:	39 f0       	breq	.+14     	; 0x1efc <_ZN8SdVolume15allocContiguousEmPm+0x1d6>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    1eee:	95 01       	movw	r18, r10
    1ef0:	84 01       	movw	r16, r8
    1ef2:	c1 01       	movw	r24, r2
    1ef4:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN8SdVolume6fatPutEmm>
    1ef8:	88 23       	and	r24, r24
    1efa:	b9 f0       	breq	.+46     	; 0x1f2a <_ZN8SdVolume15allocContiguousEmPm+0x204>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    1efc:	ee 85       	ldd	r30, Y+14	; 0x0e
    1efe:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f00:	80 82       	st	Z, r8
    1f02:	91 82       	std	Z+1, r9	; 0x01
    1f04:	a2 82       	std	Z+2, r10	; 0x02
    1f06:	b3 82       	std	Z+3, r11	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    1f08:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f0a:	ff 23       	and	r31, r31
    1f0c:	69 f0       	breq	.+26     	; 0x1f28 <_ZN8SdVolume15allocContiguousEmPm+0x202>
    1f0e:	2f ef       	ldi	r18, 0xFF	; 255
    1f10:	82 1a       	sub	r8, r18
    1f12:	92 0a       	sbc	r9, r18
    1f14:	a2 0a       	sbc	r10, r18
    1f16:	b2 0a       	sbc	r11, r18
    1f18:	d1 01       	movw	r26, r2
    1f1a:	8d 92       	st	X+, r8
    1f1c:	9d 92       	st	X+, r9
    1f1e:	ad 92       	st	X+, r10
    1f20:	bc 92       	st	X, r11
    1f22:	13 97       	sbiw	r26, 0x03	; 3

  return true;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <_ZN8SdVolume15allocContiguousEmPm+0x204>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
}
    1f2a:	2f 96       	adiw	r28, 0x0f	; 15
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	ff 90       	pop	r15
    1f40:	ef 90       	pop	r14
    1f42:	df 90       	pop	r13
    1f44:	cf 90       	pop	r12
    1f46:	bf 90       	pop	r11
    1f48:	af 90       	pop	r10
    1f4a:	9f 90       	pop	r9
    1f4c:	8f 90       	pop	r8
    1f4e:	7f 90       	pop	r7
    1f50:	6f 90       	pop	r6
    1f52:	5f 90       	pop	r5
    1f54:	4f 90       	pop	r4
    1f56:	3f 90       	pop	r3
    1f58:	2f 90       	pop	r2
    1f5a:	08 95       	ret

00001f5c <__vector_27>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    1f5c:	1f 92       	push	r1
    1f5e:	0f 92       	push	r0
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	0f 92       	push	r0
    1f64:	11 24       	eor	r1, r1
    1f66:	2f 93       	push	r18
    1f68:	3f 93       	push	r19
    1f6a:	4f 93       	push	r20
    1f6c:	5f 93       	push	r21
    1f6e:	6f 93       	push	r22
    1f70:	7f 93       	push	r23
    1f72:	8f 93       	push	r24
    1f74:	9f 93       	push	r25
    1f76:	af 93       	push	r26
    1f78:	bf 93       	push	r27
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	ef 93       	push	r30
    1f80:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    1f82:	a0 91 29 05 	lds	r26, 0x0529	; 0x800529 <_ZN14SoftwareSerial13active_objectE>
    1f86:	b0 91 2a 05 	lds	r27, 0x052A	; 0x80052a <_ZN14SoftwareSerial13active_objectE+0x1>
    1f8a:	10 97       	sbiw	r26, 0x00	; 0
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <__vector_27+0x34>
    1f8e:	81 c0       	rjmp	.+258    	; 0x2092 <__vector_27+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1f90:	5e 96       	adiw	r26, 0x1e	; 30
    1f92:	8c 91       	ld	r24, X
    1f94:	5e 97       	sbiw	r26, 0x1e	; 30
    1f96:	81 ff       	sbrs	r24, 1
    1f98:	0d c0       	rjmp	.+26     	; 0x1fb4 <__vector_27+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1f9a:	1e 96       	adiw	r26, 0x0e	; 14
    1f9c:	ed 91       	ld	r30, X+
    1f9e:	fc 91       	ld	r31, X
    1fa0:	1f 97       	sbiw	r26, 0x0f	; 15
    1fa2:	90 81       	ld	r25, Z
    1fa4:	1d 96       	adiw	r26, 0x0d	; 13
    1fa6:	8c 91       	ld	r24, X
    1fa8:	1d 97       	sbiw	r26, 0x0d	; 13
    1faa:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	71 f4       	brne	.+28     	; 0x1fcc <__vector_27+0x70>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	0c c0       	rjmp	.+24     	; 0x1fcc <__vector_27+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1fb4:	1e 96       	adiw	r26, 0x0e	; 14
    1fb6:	ed 91       	ld	r30, X+
    1fb8:	fc 91       	ld	r31, X
    1fba:	1f 97       	sbiw	r26, 0x0f	; 15
    1fbc:	90 81       	ld	r25, Z
    1fbe:	1d 96       	adiw	r26, 0x0d	; 13
    1fc0:	8c 91       	ld	r24, X
    1fc2:	1d 97       	sbiw	r26, 0x0d	; 13
    1fc4:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <__vector_27+0x70>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <__vector_27+0x76>
    1fd0:	60 c0       	rjmp	.+192    	; 0x2092 <__vector_27+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1fd2:	53 96       	adiw	r26, 0x13	; 19
    1fd4:	ed 91       	ld	r30, X+
    1fd6:	fc 91       	ld	r31, X
    1fd8:	54 97       	sbiw	r26, 0x14	; 20
    1fda:	90 81       	ld	r25, Z
    1fdc:	55 96       	adiw	r26, 0x15	; 21
    1fde:	8c 91       	ld	r24, X
    1fe0:	55 97       	sbiw	r26, 0x15	; 21
    1fe2:	80 95       	com	r24
    1fe4:	89 23       	and	r24, r25
    1fe6:	80 83       	st	Z, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1fe8:	56 96       	adiw	r26, 0x16	; 22
    1fea:	8d 91       	ld	r24, X+
    1fec:	9c 91       	ld	r25, X
    1fee:	57 97       	sbiw	r26, 0x17	; 23
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <__vector_27+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    1ff4:	58 96       	adiw	r26, 0x18	; 24
    1ff6:	6d 91       	ld	r22, X+
    1ff8:	7c 91       	ld	r23, X
    1ffa:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1ffc:	1e 96       	adiw	r26, 0x0e	; 14
    1ffe:	cd 91       	ld	r28, X+
    2000:	dc 91       	ld	r29, X
    2002:	1f 97       	sbiw	r26, 0x0f	; 15
    2004:	1d 96       	adiw	r26, 0x0d	; 13
    2006:	5c 91       	ld	r21, X
    2008:	1d 97       	sbiw	r26, 0x0d	; 13
    200a:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	fb 01       	movw	r30, r22
    2010:	31 97       	sbiw	r30, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <__vector_27+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    2014:	84 2f       	mov	r24, r20
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	95 95       	asr	r25
    201a:	87 95       	ror	r24
    201c:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    201e:	28 81       	ld	r18, Y
    2020:	25 23       	and	r18, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    2022:	09 f0       	breq	.+2      	; 0x2026 <__vector_27+0xca>
        d |= 0x80;
    2024:	40 68       	ori	r20, 0x80	; 128
    2026:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    2028:	91 f7       	brne	.-28     	; 0x200e <__vector_27+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    202a:	5e 96       	adiw	r26, 0x1e	; 30
    202c:	8c 91       	ld	r24, X
    202e:	5e 97       	sbiw	r26, 0x1e	; 30
    2030:	81 fd       	sbrc	r24, 1
      d = ~d;
    2032:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    2034:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	8f 73       	andi	r24, 0x3F	; 63
    203e:	90 78       	andi	r25, 0x80	; 128
    2040:	99 23       	and	r25, r25
    2042:	24 f4       	brge	.+8      	; 0x204c <__vector_27+0xf0>
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	80 6c       	ori	r24, 0xC0	; 192
    2048:	9f 6f       	ori	r25, 0xFF	; 255
    204a:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
    204c:	20 91 e7 04 	lds	r18, 0x04E7	; 0x8004e7 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2050:	28 17       	cp	r18, r24
    2052:	49 f0       	breq	.+18     	; 0x2066 <__vector_27+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    2054:	e0 91 e8 04 	lds	r30, 0x04E8	; 0x8004e8 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	e7 51       	subi	r30, 0x17	; 23
    205c:	fb 4f       	sbci	r31, 0xFB	; 251
    205e:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
    2060:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2064:	07 c0       	rjmp	.+14     	; 0x2074 <__vector_27+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    2066:	5e 96       	adiw	r26, 0x1e	; 30
    2068:	8c 91       	ld	r24, X
    206a:	5e 97       	sbiw	r26, 0x1e	; 30
    206c:	81 60       	ori	r24, 0x01	; 1
    206e:	5e 96       	adiw	r26, 0x1e	; 30
    2070:	8c 93       	st	X, r24
    2072:	5e 97       	sbiw	r26, 0x1e	; 30
    2074:	5a 96       	adiw	r26, 0x1a	; 26
    2076:	8d 91       	ld	r24, X+
    2078:	9c 91       	ld	r25, X
    207a:	5b 97       	sbiw	r26, 0x1b	; 27
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <__vector_27+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2080:	53 96       	adiw	r26, 0x13	; 19
    2082:	ed 91       	ld	r30, X+
    2084:	fc 91       	ld	r31, X
    2086:	54 97       	sbiw	r26, 0x14	; 20
    2088:	90 81       	ld	r25, Z
    208a:	55 96       	adiw	r26, 0x15	; 21
    208c:	8c 91       	ld	r24, X
    208e:	89 2b       	or	r24, r25
    2090:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    2092:	ff 91       	pop	r31
    2094:	ef 91       	pop	r30
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	bf 91       	pop	r27
    209c:	af 91       	pop	r26
    209e:	9f 91       	pop	r25
    20a0:	8f 91       	pop	r24
    20a2:	7f 91       	pop	r23
    20a4:	6f 91       	pop	r22
    20a6:	5f 91       	pop	r21
    20a8:	4f 91       	pop	r20
    20aa:	3f 91       	pop	r19
    20ac:	2f 91       	pop	r18
    20ae:	0f 90       	pop	r0
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	0f 90       	pop	r0
    20b4:	1f 90       	pop	r1
    20b6:	18 95       	reti

000020b8 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    20b8:	cf 93       	push	r28
  uint8_t sreg = SREG;
    20ba:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    20bc:	f8 94       	cli
  if (!initialized) {
    20be:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN8SPIClass11initializedE>
    20c2:	81 11       	cpse	r24, r1
    20c4:	27 c0       	rjmp	.+78     	; 0x2114 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    20c6:	ef ef       	ldi	r30, 0xFF	; 255
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    20cc:	eb ee       	ldi	r30, 0xEB	; 235
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    20d2:	e8 2f       	mov	r30, r24
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	ed 5e       	subi	r30, 0xED	; 237
    20dc:	fe 4f       	sbci	r31, 0xFE	; 254
    20de:	a5 91       	lpm	r26, Z+
    20e0:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    20e2:	ec 91       	ld	r30, X
    20e4:	e9 23       	and	r30, r25
    20e6:	21 f4       	brne	.+8      	; 0x20f0 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	8a e0       	ldi	r24, 0x0A	; 10
    20ec:	0e 94 f3 06 	call	0xde6	; 0xde6 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	8a e0       	ldi	r24, 0x0A	; 10
    20f4:	0e 94 b4 06 	call	0xd68	; 0xd68 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    20f8:	8c b5       	in	r24, 0x2c	; 44
    20fa:	80 61       	ori	r24, 0x10	; 16
    20fc:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    20fe:	8c b5       	in	r24, 0x2c	; 44
    2100:	80 64       	ori	r24, 0x40	; 64
    2102:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	8d e0       	ldi	r24, 0x0D	; 13
    2108:	0e 94 b4 06 	call	0xd68	; 0xd68 <pinMode>
    pinMode(MOSI, OUTPUT);
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	8b e0       	ldi	r24, 0x0B	; 11
    2110:	0e 94 b4 06 	call	0xd68	; 0xd68 <pinMode>
  }
  initialized++; // reference count
    2114:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN8SPIClass11initializedE>
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <_ZN8SPIClass11initializedE>
  SREG = sreg;
    211e:	cf bf       	out	0x3f, r28	; 63
}
    2120:	cf 91       	pop	r28
    2122:	08 95       	ret

00002124 <setup>:
// automatically.  This avoids the annoying "stuck pixel" look when
// quitting LED display programs on the host computer.
static const unsigned long serialTimeout = 15000; // 15 seconds

void setup()
{
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	00 d0       	rcall	.+0      	; 0x212a <setup+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <setup+0x8>
    212c:	00 d0       	rcall	.+0      	; 0x212e <setup+0xa>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
	startTime,
	lastByteTime,
	lastAckTime,
	t;

	LED_DDR  |=  LED_PIN; // Enable output for LED
    2132:	25 9a       	sbi	0x04, 5	; 4
	LED_PORT &= ~LED_PIN; // LED off
    2134:	2d 98       	cbi	0x05, 5	; 5

	Serial.begin(115200); // Teensy/32u4 disregards baud rate; is OK!
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	52 ec       	ldi	r21, 0xC2	; 194
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	86 e4       	ldi	r24, 0x46	; 70
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_ZN14HardwareSerial5beginEm>

	SPI.begin();
    2146:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <_ZN8SPIClass5beginEv>

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setBitOrder(uint8_t bitOrder) {
    if (bitOrder == LSBFIRST) SPCR |= _BV(DORD);
    else SPCR &= ~(_BV(DORD));
    214a:	8c b5       	in	r24, 0x2c	; 44
    214c:	8f 7d       	andi	r24, 0xDF	; 223
    214e:	8c bd       	out	0x2c, r24	; 44
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setDataMode(uint8_t dataMode) {
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
    2150:	8c b5       	in	r24, 0x2c	; 44
    2152:	83 7f       	andi	r24, 0xF3	; 243
    2154:	8c bd       	out	0x2c, r24	; 44
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
    2156:	8c b5       	in	r24, 0x2c	; 44
    2158:	8c 7f       	andi	r24, 0xFC	; 252
    215a:	81 60       	ori	r24, 0x01	; 1
    215c:	8c bd       	out	0x2c, r24	; 44
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
    215e:	8d b5       	in	r24, 0x2d	; 45
    2160:	8e 7f       	andi	r24, 0xFE	; 254
    2162:	8d bd       	out	0x2d, r24	; 45
	// wiring between the Arduino and LEDs is correct.  Not knowing the
	// actual number of LEDs connected, this sets all of them (well, up
	// to the first 25,000, so as not to be TOO time consuming) to red,
	// green, blue, then off.  Once you're confident everything is working
	// end-to-end, it's OK to comment this out and reprogram the Arduino.
	uint8_t testcolor[] = { 0, 0, 0, 255, 0, 0 };
    2164:	19 82       	std	Y+1, r1	; 0x01
    2166:	1a 82       	std	Y+2, r1	; 0x02
    2168:	1b 82       	std	Y+3, r1	; 0x03
    216a:	8f ef       	ldi	r24, 0xFF	; 255
    216c:	8c 83       	std	Y+4, r24	; 0x04
    216e:	1d 82       	std	Y+5, r1	; 0x05
    2170:	1e 82       	std	Y+6, r1	; 0x06
	for(char n=3; n>=0; n--) {
    2172:	03 e0       	ldi	r16, 0x03	; 3
    2174:	0f 2e       	mov	r0, r31
    2176:	f8 ea       	ldi	r31, 0xA8	; 168
    2178:	ef 2e       	mov	r14, r31
    217a:	f0 2d       	mov	r31, r0
    217c:	0f 2e       	mov	r0, r31
    217e:	f1 e6       	ldi	r31, 0x61	; 97
    2180:	ff 2e       	mov	r15, r31
    2182:	f0 2d       	mov	r31, r0
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	2e 2d       	mov	r18, r14
    2188:	3f 2d       	mov	r19, r15
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	4c 0f       	add	r20, r28
    2190:	5d 1f       	adc	r21, r29
    2192:	40 0f       	add	r20, r16
    2194:	51 1d       	adc	r21, r1
    2196:	0b c0       	rjmp	.+22     	; 0x21ae <setup+0x8a>
		for(c=0; c<25000; c++) {
			for(i=0; i<3; i++) {
				for(SPDR = testcolor[n + i]; !(SPSR & _BV(SPIF)); );
    2198:	91 91       	ld	r25, Z+
    219a:	9e bd       	out	0x2e, r25	; 46
    219c:	0d b4       	in	r0, 0x2d	; 45
    219e:	07 fe       	sbrs	r0, 7
    21a0:	fd cf       	rjmp	.-6      	; 0x219c <setup+0x78>
	// green, blue, then off.  Once you're confident everything is working
	// end-to-end, it's OK to comment this out and reprogram the Arduino.
	uint8_t testcolor[] = { 0, 0, 0, 255, 0, 0 };
	for(char n=3; n>=0; n--) {
		for(c=0; c<25000; c++) {
			for(i=0; i<3; i++) {
    21a2:	8f 5f       	subi	r24, 0xFF	; 255
    21a4:	83 30       	cpi	r24, 0x03	; 3
    21a6:	c1 f7       	brne	.-16     	; 0x2198 <setup+0x74>
    21a8:	21 50       	subi	r18, 0x01	; 1
    21aa:	31 09       	sbc	r19, r1
	// to the first 25,000, so as not to be TOO time consuming) to red,
	// green, blue, then off.  Once you're confident everything is working
	// end-to-end, it's OK to comment this out and reprogram the Arduino.
	uint8_t testcolor[] = { 0, 0, 0, 255, 0, 0 };
	for(char n=3; n>=0; n--) {
		for(c=0; c<25000; c++) {
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <setup+0x90>
    21ae:	fa 01       	movw	r30, r20
	// actual number of LEDs connected, this sets all of them (well, up
	// to the first 25,000, so as not to be TOO time consuming) to red,
	// green, blue, then off.  Once you're confident everything is working
	// end-to-end, it's OK to comment this out and reprogram the Arduino.
	uint8_t testcolor[] = { 0, 0, 0, 255, 0, 0 };
	for(char n=3; n>=0; n--) {
    21b0:	81 2f       	mov	r24, r17
    21b2:	f2 cf       	rjmp	.-28     	; 0x2198 <setup+0x74>
		for(c=0; c<25000; c++) {
			for(i=0; i<3; i++) {
				for(SPDR = testcolor[n + i]; !(SPSR & _BV(SPIF)); );
			}
		}
		delay(1); // One millisecond pause = latch
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <delay>
	// actual number of LEDs connected, this sets all of them (well, up
	// to the first 25,000, so as not to be TOO time consuming) to red,
	// green, blue, then off.  Once you're confident everything is working
	// end-to-end, it's OK to comment this out and reprogram the Arduino.
	uint8_t testcolor[] = { 0, 0, 0, 255, 0, 0 };
	for(char n=3; n>=0; n--) {
    21c0:	01 50       	subi	r16, 0x01	; 1
			for(i=0; i<3; i++) {
				for(SPDR = testcolor[n + i]; !(SPSR & _BV(SPIF)); );
			}
		}
		delay(1); // One millisecond pause = latch
	}
    21c2:	e1 cf       	rjmp	.-62     	; 0x2186 <setup+0x62>

000021c4 <loop>:
		} // end switch
	} // end for(;;)
}

void loop()
{
    21c4:	08 95       	ret

000021c6 <__udivmodsi4>:
    21c6:	a1 e2       	ldi	r26, 0x21	; 33
    21c8:	1a 2e       	mov	r1, r26
    21ca:	aa 1b       	sub	r26, r26
    21cc:	bb 1b       	sub	r27, r27
    21ce:	fd 01       	movw	r30, r26
    21d0:	0d c0       	rjmp	.+26     	; 0x21ec <__udivmodsi4_ep>

000021d2 <__udivmodsi4_loop>:
    21d2:	aa 1f       	adc	r26, r26
    21d4:	bb 1f       	adc	r27, r27
    21d6:	ee 1f       	adc	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	a2 17       	cp	r26, r18
    21dc:	b3 07       	cpc	r27, r19
    21de:	e4 07       	cpc	r30, r20
    21e0:	f5 07       	cpc	r31, r21
    21e2:	20 f0       	brcs	.+8      	; 0x21ec <__udivmodsi4_ep>
    21e4:	a2 1b       	sub	r26, r18
    21e6:	b3 0b       	sbc	r27, r19
    21e8:	e4 0b       	sbc	r30, r20
    21ea:	f5 0b       	sbc	r31, r21

000021ec <__udivmodsi4_ep>:
    21ec:	66 1f       	adc	r22, r22
    21ee:	77 1f       	adc	r23, r23
    21f0:	88 1f       	adc	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	1a 94       	dec	r1
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <__udivmodsi4_loop>
    21f8:	60 95       	com	r22
    21fa:	70 95       	com	r23
    21fc:	80 95       	com	r24
    21fe:	90 95       	com	r25
    2200:	9b 01       	movw	r18, r22
    2202:	ac 01       	movw	r20, r24
    2204:	bd 01       	movw	r22, r26
    2206:	cf 01       	movw	r24, r30
    2208:	08 95       	ret

0000220a <__tablejump2__>:
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	05 90       	lpm	r0, Z+
    2210:	f4 91       	lpm	r31, Z
    2212:	e0 2d       	mov	r30, r0
    2214:	09 94       	ijmp

00002216 <_exit>:
    2216:	f8 94       	cli

00002218 <__stop_program>:
    2218:	ff cf       	rjmp	.-2      	; 0x2218 <__stop_program>
